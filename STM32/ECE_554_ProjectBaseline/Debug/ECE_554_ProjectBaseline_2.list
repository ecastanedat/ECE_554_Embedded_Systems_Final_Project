
ECE_554_ProjectBaseline_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017328  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b28  080175f8  080175f8  000275f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b120  0801b120  0002b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b128  0801b128  0002b128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b12c  0801b12c  0002b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0801b130  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000035a4  2400009c  0801b1cc  0003009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003640  0801b1cc  00033640  2**0
                  ALLOC
  9 .lwip_sec     00001900  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005450b  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008253  00000000  00000000  000845d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002440  00000000  00000000  0008c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002308  00000000  00000000  0008ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000432b6  00000000  00000000  00090f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00038ea5  00000000  00000000  000d4226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017471b  00000000  00000000  0010d0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002817e6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a2d8  00000000  00000000  0028183c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080175e0 	.word	0x080175e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	080175e0 	.word	0x080175e0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <drawPixel>:
#include "stdlib.h"



void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	460b      	mov	r3, r1
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	4613      	mov	r3, r2
 80006c8:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	88b9      	ldrh	r1, [r7, #4]
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fde3 	bl	800229c <ST7735_DrawPixel>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006de:	b590      	push	{r4, r7, lr}
 80006e0:	b085      	sub	sp, #20
 80006e2:	af02      	add	r7, sp, #8
 80006e4:	4604      	mov	r4, r0
 80006e6:	4608      	mov	r0, r1
 80006e8:	4611      	mov	r1, r2
 80006ea:	461a      	mov	r2, r3
 80006ec:	4623      	mov	r3, r4
 80006ee:	80fb      	strh	r3, [r7, #6]
 80006f0:	4603      	mov	r3, r0
 80006f2:	80bb      	strh	r3, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
 80006f8:	4613      	mov	r3, r2
 80006fa:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006fc:	88f8      	ldrh	r0, [r7, #6]
 80006fe:	88b9      	ldrh	r1, [r7, #4]
 8000700:	887a      	ldrh	r2, [r7, #2]
 8000702:	883c      	ldrh	r4, [r7, #0]
 8000704:	8b3b      	ldrh	r3, [r7, #24]
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4623      	mov	r3, r4
 800070a:	f001 fed1 	bl	80024b0 <ST7735_FillRectangle>
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bd90      	pop	{r4, r7, pc}

08000716 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	460b      	mov	r3, r1
 8000722:	80bb      	strh	r3, [r7, #4]
 8000724:	4613      	mov	r3, r2
 8000726:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000728:	887a      	ldrh	r2, [r7, #2]
 800072a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800072e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffc0 	bl	80006b8 <drawPixel>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4603      	mov	r3, r0
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	4613      	mov	r3, r2
 800075c:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800075e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000762:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800076c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000770:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000778:	1acb      	subs	r3, r1, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	bfb8      	it	lt
 800077e:	425b      	neglt	r3, r3
 8000780:	429a      	cmp	r2, r3
 8000782:	bfcc      	ite	gt
 8000784:	2301      	movgt	r3, #1
 8000786:	2300      	movle	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	837b      	strh	r3, [r7, #26]
    if (steep) {
 800078c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	833b      	strh	r3, [r7, #24]
 8000798:	88bb      	ldrh	r3, [r7, #4]
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	8b3b      	ldrh	r3, [r7, #24]
 800079e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80007a0:	887b      	ldrh	r3, [r7, #2]
 80007a2:	82fb      	strh	r3, [r7, #22]
 80007a4:	883b      	ldrh	r3, [r7, #0]
 80007a6:	807b      	strh	r3, [r7, #2]
 80007a8:	8afb      	ldrh	r3, [r7, #22]
 80007aa:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80007ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dd0b      	ble.n	80007d0 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	82bb      	strh	r3, [r7, #20]
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	80fb      	strh	r3, [r7, #6]
 80007c0:	8abb      	ldrh	r3, [r7, #20]
 80007c2:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	827b      	strh	r3, [r7, #18]
 80007c8:	883b      	ldrh	r3, [r7, #0]
 80007ca:	80bb      	strh	r3, [r7, #4]
 80007cc:	8a7b      	ldrh	r3, [r7, #18]
 80007ce:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80007d0:	887a      	ldrh	r2, [r7, #2]
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80007da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80007de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bfb8      	it	lt
 80007e8:	425b      	neglt	r3, r3
 80007ea:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 80007ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	da00      	bge.n	80007f6 <writeLine+0xb6>
 80007f4:	3301      	adds	r3, #1
 80007f6:	105b      	asrs	r3, r3, #1
 80007f8:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 80007fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000802:	429a      	cmp	r2, r3
 8000804:	da02      	bge.n	800080c <writeLine+0xcc>
        ystep = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	83bb      	strh	r3, [r7, #28]
 800080a:	e031      	b.n	8000870 <writeLine+0x130>
    } else {
        ystep = -1;
 800080c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000810:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000812:	e02d      	b.n	8000870 <writeLine+0x130>
        if (steep) {
 8000814:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d008      	beq.n	800082e <writeLine+0xee>
            writePixel(y0, x0, color);
 800081c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800081e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff75 	bl	8000716 <writePixel>
 800082c:	e007      	b.n	800083e <writeLine+0xfe>
        } else {
            writePixel(x0, y0, color);
 800082e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000830:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff6c 	bl	8000716 <writePixel>
        }
        err -= dy;
 800083e:	8bfa      	ldrh	r2, [r7, #30]
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	b29b      	uxth	r3, r3
 8000846:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8000848:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800084c:	2b00      	cmp	r3, #0
 800084e:	da09      	bge.n	8000864 <writeLine+0x124>
            y0 += ystep;
 8000850:	88ba      	ldrh	r2, [r7, #4]
 8000852:	8bbb      	ldrh	r3, [r7, #28]
 8000854:	4413      	add	r3, r2
 8000856:	b29b      	uxth	r3, r3
 8000858:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800085a:	8bfa      	ldrh	r2, [r7, #30]
 800085c:	8a3b      	ldrh	r3, [r7, #16]
 800085e:	4413      	add	r3, r2
 8000860:	b29b      	uxth	r3, r3
 8000862:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8000864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000868:	b29b      	uxth	r3, r3
 800086a:	3301      	adds	r3, #1
 800086c:	b29b      	uxth	r3, r3
 800086e:	80fb      	strh	r3, [r7, #6]
 8000870:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000874:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000878:	429a      	cmp	r2, r3
 800087a:	ddcb      	ble.n	8000814 <writeLine+0xd4>
        }
    }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd90      	pop	{r4, r7, pc}

08000886 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af02      	add	r7, sp, #8
 800088c:	4604      	mov	r4, r0
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	461a      	mov	r2, r3
 8000894:	4623      	mov	r3, r4
 8000896:	80fb      	strh	r3, [r7, #6]
 8000898:	4603      	mov	r3, r0
 800089a:	80bb      	strh	r3, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80008a4:	88ba      	ldrh	r2, [r7, #4]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	4413      	add	r3, r2
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b21c      	sxth	r4, r3
 80008b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80008be:	883b      	ldrh	r3, [r7, #0]
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4623      	mov	r3, r4
 80008c4:	f7ff ff3c 	bl	8000740 <writeLine>
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	4604      	mov	r4, r0
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	4623      	mov	r3, r4
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	4603      	mov	r3, r0
 80008e4:	80bb      	strh	r3, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	807b      	strh	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 80008ee:	88fa      	ldrh	r2, [r7, #6]
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000900:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000904:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000908:	883b      	ldrh	r3, [r7, #0]
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	4623      	mov	r3, r4
 800090e:	f7ff ff17 	bl	8000740 <writeLine>
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bd90      	pop	{r4, r7, pc}

0800091a <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800091a:	b590      	push	{r4, r7, lr}
 800091c:	b087      	sub	sp, #28
 800091e:	af02      	add	r7, sp, #8
 8000920:	4604      	mov	r4, r0
 8000922:	4608      	mov	r0, r1
 8000924:	4611      	mov	r1, r2
 8000926:	461a      	mov	r2, r3
 8000928:	4623      	mov	r3, r4
 800092a:	80fb      	strh	r3, [r7, #6]
 800092c:	4603      	mov	r3, r0
 800092e:	80bb      	strh	r3, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
 8000934:	4613      	mov	r3, r2
 8000936:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8000938:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800093c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000940:	429a      	cmp	r2, r3
 8000942:	d11a      	bne.n	800097a <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8000944:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000948:	f9b7 3000 	ldrsh.w	r3, [r7]
 800094c:	429a      	cmp	r2, r3
 800094e:	dd05      	ble.n	800095c <drawLine+0x42>
 8000950:	88bb      	ldrh	r3, [r7, #4]
 8000952:	81bb      	strh	r3, [r7, #12]
 8000954:	883b      	ldrh	r3, [r7, #0]
 8000956:	80bb      	strh	r3, [r7, #4]
 8000958:	89bb      	ldrh	r3, [r7, #12]
 800095a:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800095c:	883a      	ldrh	r2, [r7, #0]
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	3301      	adds	r3, #1
 8000966:	b29b      	uxth	r3, r3
 8000968:	b21a      	sxth	r2, r3
 800096a:	8c3b      	ldrh	r3, [r7, #32]
 800096c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000970:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000974:	f7ff ff87 	bl	8000886 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8000978:	e02d      	b.n	80009d6 <drawLine+0xbc>
    } else if(y0 == y1){
 800097a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800097e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000982:	429a      	cmp	r2, r3
 8000984:	d11a      	bne.n	80009bc <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8000986:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800098a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800098e:	429a      	cmp	r2, r3
 8000990:	dd05      	ble.n	800099e <drawLine+0x84>
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	81fb      	strh	r3, [r7, #14]
 8000996:	887b      	ldrh	r3, [r7, #2]
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800099e:	887a      	ldrh	r2, [r7, #2]
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	8c3b      	ldrh	r3, [r7, #32]
 80009ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009b6:	f7ff ff8b 	bl	80008d0 <drawFastHLine>
}
 80009ba:	e00c      	b.n	80009d6 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80009bc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80009c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80009c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009cc:	8c3b      	ldrh	r3, [r7, #32]
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	4623      	mov	r3, r4
 80009d2:	f7ff feb5 	bl	8000740 <writeLine>
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}

080009de <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80009de:	b590      	push	{r4, r7, lr}
 80009e0:	b087      	sub	sp, #28
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	4623      	mov	r3, r4
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	4603      	mov	r3, r0
 80009f2:	80bb      	strh	r3, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
 80009f8:	4613      	mov	r3, r2
 80009fa:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	f1c3 0301 	rsb	r3, r3, #1
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	03d2      	lsls	r2, r2, #15
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000a20:	88ba      	ldrh	r2, [r7, #4]
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	4413      	add	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	b219      	sxth	r1, r3
 8000a2a:	883a      	ldrh	r2, [r7, #0]
 8000a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe70 	bl	8000716 <writePixel>
    writePixel(x0  , y0-r, color);
 8000a36:	88ba      	ldrh	r2, [r7, #4]
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b219      	sxth	r1, r3
 8000a40:	883a      	ldrh	r2, [r7, #0]
 8000a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe65 	bl	8000716 <writePixel>
    writePixel(x0+r, y0  , color);
 8000a4c:	88fa      	ldrh	r2, [r7, #6]
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	4413      	add	r3, r2
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	883a      	ldrh	r2, [r7, #0]
 8000a58:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe5a 	bl	8000716 <writePixel>
    writePixel(x0-r, y0  , color);
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	883a      	ldrh	r2, [r7, #0]
 8000a6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fe4f 	bl	8000716 <writePixel>

    while (x<y) {
 8000a78:	e091      	b.n	8000b9e <drawCircle+0x1c0>
        if (f >= 0) {
 8000a7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0e      	blt.n	8000aa0 <drawCircle+0xc2>
            y--;
 8000a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a8e:	8a7b      	ldrh	r3, [r7, #18]
 8000a90:	3302      	adds	r3, #2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000a96:	8afa      	ldrh	r2, [r7, #22]
 8000a98:	8a7b      	ldrh	r3, [r7, #18]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000aa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000aac:	8abb      	ldrh	r3, [r7, #20]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000ab4:	8afa      	ldrh	r2, [r7, #22]
 8000ab6:	8abb      	ldrh	r3, [r7, #20]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 8000abe:	88fa      	ldrh	r2, [r7, #6]
 8000ac0:	8a3b      	ldrh	r3, [r7, #16]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b218      	sxth	r0, r3
 8000ac8:	88ba      	ldrh	r2, [r7, #4]
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	4413      	add	r3, r2
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	883a      	ldrh	r2, [r7, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f7ff fe1e 	bl	8000716 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 8000ada:	88fa      	ldrh	r2, [r7, #6]
 8000adc:	8a3b      	ldrh	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b218      	sxth	r0, r3
 8000ae4:	88ba      	ldrh	r2, [r7, #4]
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	883a      	ldrh	r2, [r7, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f7ff fe10 	bl	8000716 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000af6:	88fa      	ldrh	r2, [r7, #6]
 8000af8:	8a3b      	ldrh	r3, [r7, #16]
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b218      	sxth	r0, r3
 8000b00:	88ba      	ldrh	r2, [r7, #4]
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	883a      	ldrh	r2, [r7, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff fe02 	bl	8000716 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000b12:	88fa      	ldrh	r2, [r7, #6]
 8000b14:	8a3b      	ldrh	r3, [r7, #16]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b218      	sxth	r0, r3
 8000b1c:	88ba      	ldrh	r2, [r7, #4]
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	883a      	ldrh	r2, [r7, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fdf4 	bl	8000716 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b218      	sxth	r0, r3
 8000b38:	88ba      	ldrh	r2, [r7, #4]
 8000b3a:	8a3b      	ldrh	r3, [r7, #16]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	883a      	ldrh	r2, [r7, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f7ff fde6 	bl	8000716 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	89fb      	ldrh	r3, [r7, #14]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b218      	sxth	r0, r3
 8000b54:	88ba      	ldrh	r2, [r7, #4]
 8000b56:	8a3b      	ldrh	r3, [r7, #16]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	883a      	ldrh	r2, [r7, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff fdd8 	bl	8000716 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8000b66:	88fa      	ldrh	r2, [r7, #6]
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b218      	sxth	r0, r3
 8000b70:	88ba      	ldrh	r2, [r7, #4]
 8000b72:	8a3b      	ldrh	r3, [r7, #16]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	883a      	ldrh	r2, [r7, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f7ff fdca 	bl	8000716 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	b218      	sxth	r0, r3
 8000b8c:	88ba      	ldrh	r2, [r7, #4]
 8000b8e:	8a3b      	ldrh	r3, [r7, #16]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	883a      	ldrh	r2, [r7, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f7ff fdbc 	bl	8000716 <writePixel>
    while (x<y) {
 8000b9e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	f6ff af67 	blt.w	8000a7a <drawCircle+0x9c>
    }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8000bb6:	b590      	push	{r4, r7, lr}
 8000bb8:	b087      	sub	sp, #28
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4623      	mov	r3, r4
 8000bc6:	80fb      	strh	r3, [r7, #6]
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80bb      	strh	r3, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	f1c3 0301 	rsb	r3, r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	461a      	mov	r2, r3
 8000be6:	03d2      	lsls	r2, r2, #15
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000bf8:	e0a5      	b.n	8000d46 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000bfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0e      	blt.n	8000c20 <drawCircleHelper+0x6a>
            y--;
 8000c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000c0e:	8a7b      	ldrh	r3, [r7, #18]
 8000c10:	3302      	adds	r3, #2
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000c16:	8afa      	ldrh	r2, [r7, #22]
 8000c18:	8a7b      	ldrh	r3, [r7, #18]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000c20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000c2c:	8abb      	ldrh	r3, [r7, #20]
 8000c2e:	3302      	adds	r3, #2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000c34:	8afa      	ldrh	r2, [r7, #22]
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	4413      	add	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000c3e:	787b      	ldrb	r3, [r7, #1]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01b      	beq.n	8000c80 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	8a3b      	ldrh	r3, [r7, #16]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b218      	sxth	r0, r3
 8000c52:	88ba      	ldrh	r2, [r7, #4]
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	4413      	add	r3, r2
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f7ff fd59 	bl	8000716 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8000c64:	88fa      	ldrh	r2, [r7, #6]
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	b218      	sxth	r0, r3
 8000c6e:	88ba      	ldrh	r2, [r7, #4]
 8000c70:	8a3b      	ldrh	r3, [r7, #16]
 8000c72:	4413      	add	r3, r2
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff fd4b 	bl	8000716 <writePixel>
        }
        if (cornername & 0x2) {
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d01b      	beq.n	8000cc2 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	8a3b      	ldrh	r3, [r7, #16]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b218      	sxth	r0, r3
 8000c94:	88ba      	ldrh	r2, [r7, #4]
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f7ff fd38 	bl	8000716 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	4413      	add	r3, r2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b218      	sxth	r0, r3
 8000cb0:	88ba      	ldrh	r2, [r7, #4]
 8000cb2:	8a3b      	ldrh	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f7ff fd2a 	bl	8000716 <writePixel>
        }
        if (cornername & 0x8) {
 8000cc2:	787b      	ldrb	r3, [r7, #1]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d01b      	beq.n	8000d04 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b218      	sxth	r0, r3
 8000cd6:	88ba      	ldrh	r2, [r7, #4]
 8000cd8:	8a3b      	ldrh	r3, [r7, #16]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff fd17 	bl	8000716 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	8a3b      	ldrh	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b218      	sxth	r0, r3
 8000cf2:	88ba      	ldrh	r2, [r7, #4]
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fd09 	bl	8000716 <writePixel>
        }
        if (cornername & 0x1) {
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d01b      	beq.n	8000d46 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	b218      	sxth	r0, r3
 8000d18:	88ba      	ldrh	r2, [r7, #4]
 8000d1a:	8a3b      	ldrh	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fcf6 	bl	8000716 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000d2a:	88fa      	ldrh	r2, [r7, #6]
 8000d2c:	8a3b      	ldrh	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b218      	sxth	r0, r3
 8000d34:	88ba      	ldrh	r2, [r7, #4]
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d40:	4619      	mov	r1, r3
 8000d42:	f7ff fce8 	bl	8000716 <writePixel>
    while (x<y) {
 8000d46:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f6ff af53 	blt.w	8000bfa <drawCircleHelper+0x44>
        }
    }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd90      	pop	{r4, r7, pc}

08000d5e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000d5e:	b590      	push	{r4, r7, lr}
 8000d60:	b087      	sub	sp, #28
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4604      	mov	r4, r0
 8000d66:	4608      	mov	r0, r1
 8000d68:	4611      	mov	r1, r2
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4623      	mov	r3, r4
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	4603      	mov	r3, r0
 8000d72:	80bb      	strh	r3, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	f1c3 0301 	rsb	r3, r3, #1
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	03d2      	lsls	r2, r2, #15
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000d9c:	887b      	ldrh	r3, [r7, #2]
 8000d9e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000da0:	8a3b      	ldrh	r3, [r7, #16]
 8000da2:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000da8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8000db4:	e095      	b.n	8000ee2 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000db6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0e      	blt.n	8000ddc <fillCircleHelper+0x7e>
            y--;
 8000dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000dca:	8a7b      	ldrh	r3, [r7, #18]
 8000dcc:	3302      	adds	r3, #2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000dd2:	8afa      	ldrh	r2, [r7, #22]
 8000dd4:	8a7b      	ldrh	r3, [r7, #18]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000ddc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000de8:	8abb      	ldrh	r3, [r7, #20]
 8000dea:	3302      	adds	r3, #2
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000df0:	8afa      	ldrh	r2, [r7, #22]
 8000df2:	8abb      	ldrh	r3, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000dfa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000dfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	db31      	blt.n	8000e6a <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000e06:	787b      	ldrb	r3, [r7, #1]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <fillCircleHelper+0xda>
 8000e10:	88fa      	ldrh	r2, [r7, #6]
 8000e12:	8a3b      	ldrh	r3, [r7, #16]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b218      	sxth	r0, r3
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	b219      	sxth	r1, r3
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e34:	f7ff fd27 	bl	8000886 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000e38:	787b      	ldrb	r3, [r7, #1]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d013      	beq.n	8000e6a <fillCircleHelper+0x10c>
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	8a3b      	ldrh	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b218      	sxth	r0, r3
 8000e4c:	88ba      	ldrh	r2, [r7, #4]
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b219      	sxth	r1, r3
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e5e:	4413      	add	r3, r2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e66:	f7ff fd0e 	bl	8000886 <drawFastVLine>
        }
        if(y != py) {
 8000e6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000e6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d033      	beq.n	8000ede <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000e76:	787b      	ldrb	r3, [r7, #1]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d013      	beq.n	8000ea8 <fillCircleHelper+0x14a>
 8000e80:	88fa      	ldrh	r2, [r7, #6]
 8000e82:	897b      	ldrh	r3, [r7, #10]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b218      	sxth	r0, r3
 8000e8a:	88ba      	ldrh	r2, [r7, #4]
 8000e8c:	89bb      	ldrh	r3, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b219      	sxth	r1, r3
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ea4:	f7ff fcef 	bl	8000886 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d013      	beq.n	8000eda <fillCircleHelper+0x17c>
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	897b      	ldrh	r3, [r7, #10]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b218      	sxth	r0, r3
 8000ebc:	88ba      	ldrh	r2, [r7, #4]
 8000ebe:	89bb      	ldrh	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b219      	sxth	r1, r3
 8000ec6:	89bb      	ldrh	r3, [r7, #12]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ece:	4413      	add	r3, r2
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ed6:	f7ff fcd6 	bl	8000886 <drawFastVLine>
            py = y;
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000ede:	8a3b      	ldrh	r3, [r7, #16]
 8000ee0:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000ee2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f6ff af63 	blt.w	8000db6 <fillCircleHelper+0x58>
    }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}

08000efa <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000efa:	b590      	push	{r4, r7, lr}
 8000efc:	b085      	sub	sp, #20
 8000efe:	af02      	add	r7, sp, #8
 8000f00:	4604      	mov	r4, r0
 8000f02:	4608      	mov	r0, r1
 8000f04:	4611      	mov	r1, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	4623      	mov	r3, r4
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	80bb      	strh	r3, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b219      	sxth	r1, r3
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	883b      	ldrh	r3, [r7, #0]
 8000f30:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f34:	f7ff fca7 	bl	8000886 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000f38:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f40:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f7ff ff06 	bl	8000d5e <fillCircleHelper>
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd90      	pop	{r4, r7, pc}

08000f5a <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000f5a:	b590      	push	{r4, r7, lr}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4604      	mov	r4, r0
 8000f62:	4608      	mov	r0, r1
 8000f64:	4611      	mov	r1, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4623      	mov	r3, r4
 8000f6a:	80fb      	strh	r3, [r7, #6]
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	80bb      	strh	r3, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000f78:	8b3b      	ldrh	r3, [r7, #24]
 8000f7a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f82:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f86:	f7ff fca3 	bl	80008d0 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000f8a:	88ba      	ldrh	r2, [r7, #4]
 8000f8c:	883b      	ldrh	r3, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b219      	sxth	r1, r3
 8000f98:	8b3b      	ldrh	r3, [r7, #24]
 8000f9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f9e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000fa2:	f7ff fc95 	bl	80008d0 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000fa6:	8b3b      	ldrh	r3, [r7, #24]
 8000fa8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fb0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000fb4:	f7ff fc67 	bl	8000886 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b218      	sxth	r0, r3
 8000fc6:	8b3b      	ldrh	r3, [r7, #24]
 8000fc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fcc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fd0:	f7ff fc59 	bl	8000886 <drawFastVLine>
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}

08000fdc <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4623      	mov	r3, r4
 8000fec:	80fb      	strh	r3, [r7, #6]
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80bb      	strh	r3, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	807b      	strh	r3, [r7, #2]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000ffa:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ffe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001002:	4293      	cmp	r3, r2
 8001004:	bfa8      	it	ge
 8001006:	4613      	movge	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	da00      	bge.n	8001010 <drawRoundRect+0x34>
 800100e:	3301      	adds	r3, #1
 8001010:	105b      	asrs	r3, r3, #1
 8001012:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8001014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001018:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd01      	ble.n	8001024 <drawRoundRect+0x48>
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	8c3b      	ldrh	r3, [r7, #32]
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	b218      	sxth	r0, r3
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	8c3b      	ldrh	r3, [r7, #32]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	b29b      	uxth	r3, r3
 800103a:	b21a      	sxth	r2, r3
 800103c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800103e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001042:	f7ff fc45 	bl	80008d0 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	8c3b      	ldrh	r3, [r7, #32]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	b218      	sxth	r0, r3
 8001050:	88ba      	ldrh	r2, [r7, #4]
 8001052:	883b      	ldrh	r3, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	b219      	sxth	r1, r3
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	8c3b      	ldrh	r3, [r7, #32]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800106e:	f7ff fc2f 	bl	80008d0 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001072:	88ba      	ldrh	r2, [r7, #4]
 8001074:	8c3b      	ldrh	r3, [r7, #32]
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	b219      	sxth	r1, r3
 800107c:	883a      	ldrh	r2, [r7, #0]
 800107e:	8c3b      	ldrh	r3, [r7, #32]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	b21a      	sxth	r2, r3
 800108a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800108c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001090:	f7ff fbf9 	bl	8000886 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	3b01      	subs	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b218      	sxth	r0, r3
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	8c3b      	ldrh	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b219      	sxth	r1, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	8c3b      	ldrh	r3, [r7, #32]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010bc:	f7ff fbe3 	bl	8000886 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 80010c0:	88fa      	ldrh	r2, [r7, #6]
 80010c2:	8c3b      	ldrh	r3, [r7, #32]
 80010c4:	4413      	add	r3, r2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b218      	sxth	r0, r3
 80010ca:	88ba      	ldrh	r2, [r7, #4]
 80010cc:	8c3b      	ldrh	r3, [r7, #32]
 80010ce:	4413      	add	r3, r2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b219      	sxth	r1, r3
 80010d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80010d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	f7ff fd6a 	bl	8000bb6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80010e2:	88fa      	ldrh	r2, [r7, #6]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	8c3b      	ldrh	r3, [r7, #32]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	3b01      	subs	r3, #1
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b218      	sxth	r0, r3
 80010f6:	88ba      	ldrh	r2, [r7, #4]
 80010f8:	8c3b      	ldrh	r3, [r7, #32]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b219      	sxth	r1, r3
 8001100:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	f7ff fd54 	bl	8000bb6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	4413      	add	r3, r2
 8001114:	b29a      	uxth	r2, r3
 8001116:	8c3b      	ldrh	r3, [r7, #32]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	3b01      	subs	r3, #1
 800111e:	b29b      	uxth	r3, r3
 8001120:	b218      	sxth	r0, r3
 8001122:	88ba      	ldrh	r2, [r7, #4]
 8001124:	883b      	ldrh	r3, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	b29a      	uxth	r2, r3
 800112a:	8c3b      	ldrh	r3, [r7, #32]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	b29b      	uxth	r3, r3
 8001130:	3b01      	subs	r3, #1
 8001132:	b29b      	uxth	r3, r3
 8001134:	b219      	sxth	r1, r3
 8001136:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800113a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2304      	movs	r3, #4
 8001140:	f7ff fd39 	bl	8000bb6 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	8c3b      	ldrh	r3, [r7, #32]
 8001148:	4413      	add	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	b218      	sxth	r0, r3
 800114e:	88ba      	ldrh	r2, [r7, #4]
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	8c3b      	ldrh	r3, [r7, #32]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	b219      	sxth	r1, r3
 8001162:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2308      	movs	r3, #8
 800116c:	f7ff fd23 	bl	8000bb6 <drawCircleHelper>
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af02      	add	r7, sp, #8
 800117e:	4604      	mov	r4, r0
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4623      	mov	r3, r4
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	4603      	mov	r3, r0
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
 8001192:	4613      	mov	r3, r2
 8001194:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001196:	f9b7 2000 	ldrsh.w	r2, [r7]
 800119a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800119e:	4293      	cmp	r3, r2
 80011a0:	bfa8      	it	ge
 80011a2:	4613      	movge	r3, r2
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da00      	bge.n	80011ac <fillRoundRect+0x34>
 80011aa:	3301      	adds	r3, #1
 80011ac:	105b      	asrs	r3, r3, #1
 80011ae:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80011b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80011b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dd01      	ble.n	80011c0 <fillRoundRect+0x48>
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	b218      	sxth	r0, r3
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	8c3b      	ldrh	r3, [r7, #32]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80011dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4623      	mov	r3, r4
 80011e6:	f7ff fa7a 	bl	80006de <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4413      	add	r3, r2
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b218      	sxth	r0, r3
 80011fe:	88ba      	ldrh	r2, [r7, #4]
 8001200:	8c3b      	ldrh	r3, [r7, #32]
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	b219      	sxth	r1, r3
 8001208:	883a      	ldrh	r2, [r7, #0]
 800120a:	8c3b      	ldrh	r3, [r7, #32]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	b29b      	uxth	r3, r3
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b01      	subs	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	b21b      	sxth	r3, r3
 800121a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800121e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	4622      	mov	r2, r4
 8001228:	f7ff fd99 	bl	8000d5e <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	8c3b      	ldrh	r3, [r7, #32]
 8001230:	4413      	add	r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	b218      	sxth	r0, r3
 8001236:	88ba      	ldrh	r2, [r7, #4]
 8001238:	8c3b      	ldrh	r3, [r7, #32]
 800123a:	4413      	add	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	b219      	sxth	r1, r3
 8001240:	883a      	ldrh	r2, [r7, #0]
 8001242:	8c3b      	ldrh	r3, [r7, #32]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	b29b      	uxth	r3, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	b21b      	sxth	r3, r3
 8001252:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001256:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001258:	9201      	str	r2, [sp, #4]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2302      	movs	r3, #2
 800125e:	4622      	mov	r2, r4
 8001260:	f7ff fd7d 	bl	8000d5e <fillCircleHelper>
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bd90      	pop	{r4, r7, pc}

0800126c <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af02      	add	r7, sp, #8
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	4603      	mov	r3, r0
 8001280:	80bb      	strh	r3, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]
 8001286:	4613      	mov	r3, r2
 8001288:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 800128a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800128e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800129a:	8c3b      	ldrh	r3, [r7, #32]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4623      	mov	r3, r4
 80012a0:	f7ff fb3b 	bl	800091a <drawLine>
    drawLine(x1, y1, x2, y2, color);
 80012a4:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80012a8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80012ac:	f9b7 1000 	ldrsh.w	r1, [r7]
 80012b0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80012b4:	8c3b      	ldrh	r3, [r7, #32]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4623      	mov	r3, r4
 80012ba:	f7ff fb2e 	bl	800091a <drawLine>
    drawLine(x2, y2, x0, y0, color);
 80012be:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80012c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012c6:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80012ca:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80012ce:	8c3b      	ldrh	r3, [r7, #32]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4623      	mov	r3, r4
 80012d4:	f7ff fb21 	bl	800091a <drawLine>
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}

080012e0 <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08f      	sub	sp, #60	; 0x3c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4623      	mov	r3, r4
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	4603      	mov	r3, r0
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]
 80012fa:	4613      	mov	r3, r2
 80012fc:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80012fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001302:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001306:	429a      	cmp	r2, r3
 8001308:	dd0b      	ble.n	8001322 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800130e:	883b      	ldrh	r3, [r7, #0]
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001314:	803b      	strh	r3, [r7, #0]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	84bb      	strh	r3, [r7, #36]	; 0x24
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001320:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8001322:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001326:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800132a:	429a      	cmp	r2, r3
 800132c:	dd0f      	ble.n	800134e <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800132e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001332:	847b      	strh	r3, [r7, #34]	; 0x22
 8001334:	883b      	ldrh	r3, [r7, #0]
 8001336:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800133a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800133c:	803b      	strh	r3, [r7, #0]
 800133e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001342:	843b      	strh	r3, [r7, #32]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800134a:	8c3b      	ldrh	r3, [r7, #32]
 800134c:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800134e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001352:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001356:	429a      	cmp	r2, r3
 8001358:	dd0b      	ble.n	8001372 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	83fb      	strh	r3, [r7, #30]
 800135e:	883b      	ldrh	r3, [r7, #0]
 8001360:	80bb      	strh	r3, [r7, #4]
 8001362:	8bfb      	ldrh	r3, [r7, #30]
 8001364:	803b      	strh	r3, [r7, #0]
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	83bb      	strh	r3, [r7, #28]
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	8bbb      	ldrh	r3, [r7, #28]
 8001370:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001372:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001376:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800137a:	429a      	cmp	r2, r3
 800137c:	d137      	bne.n	80013ee <fillTriangle+0x10e>
        a = b = x0;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001382:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001384:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8001386:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800138a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800138e:	429a      	cmp	r2, r3
 8001390:	da02      	bge.n	8001398 <fillTriangle+0xb8>
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001396:	e007      	b.n	80013a8 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8001398:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800139c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dd01      	ble.n	80013a8 <fillTriangle+0xc8>
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80013a8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80013ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80013b0:	429a      	cmp	r2, r3
 80013b2:	da03      	bge.n	80013bc <fillTriangle+0xdc>
 80013b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013ba:	e008      	b.n	80013ce <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80013bc:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80013c0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dd02      	ble.n	80013ce <fillTriangle+0xee>
 80013c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80013cc:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 80013ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013e4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80013e8:	f7ff fa72 	bl	80008d0 <drawFastHLine>
        return;
 80013ec:	e0d4      	b.n	8001598 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80013f8:	883a      	ldrh	r2, [r7, #0]
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8001402:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800140e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800141a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001426:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800142a:	883b      	ldrh	r3, [r7, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b29b      	uxth	r3, r3
 8001430:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800143a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800143e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001442:	429a      	cmp	r2, r3
 8001444:	d102      	bne.n	800144c <fillTriangle+0x16c>
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	863b      	strh	r3, [r7, #48]	; 0x30
 800144a:	e003      	b.n	8001454 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	867b      	strh	r3, [r7, #50]	; 0x32
 8001458:	e03e      	b.n	80014d8 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 800145a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800145e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001460:	fb92 f3f3 	sdiv	r3, r2, r3
 8001464:	b29a      	uxth	r2, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800146e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001474:	fb92 f3f3 	sdiv	r3, r2, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4413      	add	r3, r2
 800147e:	b29b      	uxth	r3, r3
 8001480:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8001482:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001488:	4413      	add	r3, r2
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800148c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001492:	4413      	add	r3, r2
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001496:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800149a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800149e:	429a      	cmp	r2, r3
 80014a0:	dd05      	ble.n	80014ae <fillTriangle+0x1ce>
 80014a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014a4:	81bb      	strh	r3, [r7, #12]
 80014a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80014aa:	89bb      	ldrh	r3, [r7, #12]
 80014ac:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 80014ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80014b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014c0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80014c4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80014c8:	f7ff fa02 	bl	80008d0 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 80014cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	867b      	strh	r3, [r7, #50]	; 0x32
 80014d8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80014dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80014e0:	429a      	cmp	r2, r3
 80014e2:	ddba      	ble.n	800145a <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80014e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014e8:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80014ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014f0:	1a8a      	subs	r2, r1, r2
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80014f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014fc:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001500:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001504:	1a8a      	subs	r2, r1, r2
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800150c:	e03e      	b.n	800158c <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800150e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001514:	fb92 f3f3 	sdiv	r3, r2, r3
 8001518:	b29a      	uxth	r2, r3
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8001522:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001528:	fb92 f3f3 	sdiv	r3, r2, r3
 800152c:	b29a      	uxth	r2, r3
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8001536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800153a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153c:	4413      	add	r3, r2
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8001540:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001546:	4413      	add	r3, r2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800154a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800154e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001552:	429a      	cmp	r2, r3
 8001554:	dd05      	ble.n	8001562 <fillTriangle+0x282>
 8001556:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001558:	81fb      	strh	r3, [r7, #14]
 800155a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800155c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8001562:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	b21a      	sxth	r2, r3
 8001570:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001574:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001578:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800157c:	f7ff f9a8 	bl	80008d0 <drawFastHLine>
    for(; y<=y2; y++) {
 8001580:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001584:	b29b      	uxth	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	867b      	strh	r3, [r7, #50]	; 0x32
 800158c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001590:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001594:	429a      	cmp	r2, r3
 8001596:	ddba      	ble.n	800150e <fillTriangle+0x22e>
    }
}
 8001598:	373c      	adds	r7, #60	; 0x3c
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
	...

080015a0 <fillScreen>:

void fillScreen(uint16_t color) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <fillScreen+0x2c>)
 80015ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <fillScreen+0x30>)
 80015b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	460b      	mov	r3, r1
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff f88d 	bl	80006de <fillRect>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	24000250 	.word	0x24000250
 80015d0:	24000254 	.word	0x24000254

080015d4 <testLines>:



void testLines(uint16_t color)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b08b      	sub	sp, #44	; 0x2c
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <testLines+0x1fc>)
 80015e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e4:	617b      	str	r3, [r7, #20]
                  h = _height;
 80015e6:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <testLines+0x200>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff ffd6 	bl	80015a0 <fillScreen>

    x1 = y1 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	3b01      	subs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e00f      	b.n	8001628 <testLines+0x54>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	b218      	sxth	r0, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	b219      	sxth	r1, r3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	b21a      	sxth	r2, r3
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	b21c      	sxth	r4, r3
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4623      	mov	r3, r4
 800161e:	f7ff f97c 	bl	800091a <drawLine>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3306      	adds	r3, #6
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbeb      	blt.n	8001608 <testLines+0x34>
    x2    = w - 1;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3b01      	subs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00f      	b.n	800165c <testLines+0x88>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	b218      	sxth	r0, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	b219      	sxth	r1, r3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	b21a      	sxth	r2, r3
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b21c      	sxth	r4, r3
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4623      	mov	r3, r4
 8001652:	f7ff f962 	bl	800091a <drawLine>
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	3306      	adds	r3, #6
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbeb      	blt.n	800163c <testLines+0x68>

    fillScreen(BLACK);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff ff9b 	bl	80015a0 <fillScreen>

    x1    = w - 1;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3b01      	subs	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	3b01      	subs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e00f      	b.n	80016a0 <testLines+0xcc>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	b218      	sxth	r0, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	b219      	sxth	r1, r3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	b21a      	sxth	r2, r3
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	b21c      	sxth	r4, r3
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4623      	mov	r3, r4
 8001696:	f7ff f940 	bl	800091a <drawLine>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3306      	adds	r3, #6
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbeb      	blt.n	8001680 <testLines+0xac>
    x2    = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	e00f      	b.n	80016d2 <testLines+0xfe>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	b218      	sxth	r0, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	b219      	sxth	r1, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	b21a      	sxth	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	b21c      	sxth	r4, r3
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4623      	mov	r3, r4
 80016c8:	f7ff f927 	bl	800091a <drawLine>
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	3306      	adds	r3, #6
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbeb      	blt.n	80016b2 <testLines+0xde>

    fillScreen(BLACK);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff ff60 	bl	80015a0 <fillScreen>

    x1    = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e00f      	b.n	8001714 <testLines+0x140>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	b218      	sxth	r0, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	b219      	sxth	r1, r3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	b21a      	sxth	r2, r3
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	b21c      	sxth	r4, r3
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4623      	mov	r3, r4
 800170a:	f7ff f906 	bl	800091a <drawLine>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3306      	adds	r3, #6
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbeb      	blt.n	80016f4 <testLines+0x120>
    x2    = w - 1;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3b01      	subs	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	e00f      	b.n	8001748 <testLines+0x174>
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	b218      	sxth	r0, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	b219      	sxth	r1, r3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	b21a      	sxth	r2, r3
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	b21c      	sxth	r4, r3
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4623      	mov	r3, r4
 800173e:	f7ff f8ec 	bl	800091a <drawLine>
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	3306      	adds	r3, #6
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbeb      	blt.n	8001728 <testLines+0x154>

    fillScreen(BLACK);
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ff25 	bl	80015a0 <fillScreen>

    x1    = w - 1;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	3b01      	subs	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e00f      	b.n	800178c <testLines+0x1b8>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	b218      	sxth	r0, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	b219      	sxth	r1, r3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	b21a      	sxth	r2, r3
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	b21c      	sxth	r4, r3
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4623      	mov	r3, r4
 8001782:	f7ff f8ca 	bl	800091a <drawLine>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3306      	adds	r3, #6
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbeb      	blt.n	800176c <testLines+0x198>
    x2    = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	e00f      	b.n	80017be <testLines+0x1ea>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	b218      	sxth	r0, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b219      	sxth	r1, r3
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	b21c      	sxth	r4, r3
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7ff f8b1 	bl	800091a <drawLine>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	3306      	adds	r3, #6
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	dbeb      	blt.n	800179e <testLines+0x1ca>

}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	24000250 	.word	0x24000250
 80017d4:	24000254 	.word	0x24000254

080017d8 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <testFastLines+0x78>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <testFastLines+0x7c>)
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fed1 	bl	80015a0 <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e00a      	b.n	800181a <testFastLines+0x42>
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	b219      	sxth	r1, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b21a      	sxth	r2, r3
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff f85e 	bl	80008d0 <drawFastHLine>
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3305      	adds	r3, #5
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e00a      	b.n	800183e <testFastLines+0x66>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	b218      	sxth	r0, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	b21a      	sxth	r2, r3
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	2100      	movs	r1, #0
 8001834:	f7ff f827 	bl	8000886 <drawFastVLine>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3305      	adds	r3, #5
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbf0      	blt.n	8001828 <testFastLines+0x50>
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24000250 	.word	0x24000250
 8001854:	24000254 	.word	0x24000254

08001858 <testRects>:

void testRects(uint16_t color)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b08b      	sub	sp, #44	; 0x2c
 800185c:	af02      	add	r7, sp, #8
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <testRects+0xa4>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	da00      	bge.n	800186e <testRects+0x16>
 800186c:	3301      	adds	r3, #1
 800186e:	105b      	asrs	r3, r3, #1
 8001870:	b21b      	sxth	r3, r3
 8001872:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <testRects+0xa8>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	2b00      	cmp	r3, #0
 800187c:	da00      	bge.n	8001880 <testRects+0x28>
 800187e:	3301      	adds	r3, #1
 8001880:	105b      	asrs	r3, r3, #1
 8001882:	b21b      	sxth	r3, r3
 8001884:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fe8a 	bl	80015a0 <fillScreen>
    n     = min(_width, _height);
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <testRects+0xa8>)
 800188e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <testRects+0xa4>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	4293      	cmp	r3, r2
 800189a:	bfa8      	it	ge
 800189c:	4613      	movge	r3, r2
 800189e:	b21b      	sxth	r3, r3
 80018a0:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 80018a2:	2302      	movs	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e01f      	b.n	80018e8 <testRects+0x90>
        i2 = i / 2;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da00      	bge.n	80018b0 <testRects+0x58>
 80018ae:	3301      	adds	r3, #1
 80018b0:	105b      	asrs	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b218      	sxth	r0, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b219      	sxth	r1, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b21c      	sxth	r4, r3
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4623      	mov	r3, r4
 80018de:	f7ff fb3c 	bl	8000f5a <drawRect>
    for (i = 2; i < n; i += 6) {
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3306      	adds	r3, #6
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbdb      	blt.n	80018a8 <testRects+0x50>
    }

}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	24000250 	.word	0x24000250
 8001900:	24000254 	.word	0x24000254

08001904 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b08b      	sub	sp, #44	; 0x2c
 8001908:	af02      	add	r7, sp, #8
 800190a:	4603      	mov	r3, r0
 800190c:	460a      	mov	r2, r1
 800190e:	80fb      	strh	r3, [r7, #6]
 8001910:	4613      	mov	r3, r2
 8001912:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <testFilledRects+0xd8>)
 8001916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191a:	2b00      	cmp	r3, #0
 800191c:	da00      	bge.n	8001920 <testFilledRects+0x1c>
 800191e:	3301      	adds	r3, #1
 8001920:	105b      	asrs	r3, r3, #1
 8001922:	b21b      	sxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <testFilledRects+0xdc>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	da00      	bge.n	8001934 <testFilledRects+0x30>
 8001932:	3301      	adds	r3, #1
 8001934:	105b      	asrs	r3, r3, #1
 8001936:	b21b      	sxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff fe2f 	bl	80015a0 <fillScreen>
    n = min(_width, _height);
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <testFilledRects+0xdc>)
 8001944:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <testFilledRects+0xd8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	4293      	cmp	r3, r2
 8001950:	bfa8      	it	ge
 8001952:	4613      	movge	r3, r2
 8001954:	b21b      	sxth	r3, r3
 8001956:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	e036      	b.n	80019cc <testFilledRects+0xc8>
        i2    = i / 2;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da00      	bge.n	8001966 <testFilledRects+0x62>
 8001964:	3301      	adds	r3, #1
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	b29b      	uxth	r3, r3
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	b218      	sxth	r0, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	b29b      	uxth	r3, r3
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	b219      	sxth	r1, r3
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	b21a      	sxth	r2, r3
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	b21c      	sxth	r4, r3
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4623      	mov	r3, r4
 8001994:	f7fe fea3 	bl	80006de <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b218      	sxth	r0, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b219      	sxth	r1, r3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	b21c      	sxth	r4, r3
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4623      	mov	r3, r4
 80019c2:	f7ff faca 	bl	8000f5a <drawRect>
    for (i = n; i > 0; i -= 6) {
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b06      	subs	r3, #6
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dcc5      	bgt.n	800195e <testFilledRects+0x5a>
    }
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	3724      	adds	r7, #36	; 0x24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	24000250 	.word	0x24000250
 80019e0:	24000254 	.word	0x24000254

080019e4 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <testFilledCircles+0x74>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <testFilledCircles+0x78>)
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fdc8 	bl	80015a0 <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e017      	b.n	8001a46 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e00c      	b.n	8001a36 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	b218      	sxth	r0, r3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	b219      	sxth	r1, r3
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	f7ff fa66 	bl	8000efa <fillCircle>
        for (y = radius; y < h; y += r2) {
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbee      	blt.n	8001a1c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbe3      	blt.n	8001a16 <testFilledCircles+0x32>
        }
    }

}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	24000250 	.word	0x24000250
 8001a5c:	24000254 	.word	0x24000254

08001a60 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <testCircles+0x7c>)
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4413      	add	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <testCircles+0x80>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e017      	b.n	8001ac8 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e00c      	b.n	8001ab8 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	b218      	sxth	r0, r3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	b219      	sxth	r1, r3
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	f7fe ff97 	bl	80009de <drawCircle>
        for (y = 0; y < h; y += r2) {
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbee      	blt.n	8001a9e <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbe3      	blt.n	8001a98 <testCircles+0x38>
        }
    }

}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000250 	.word	0x24000250
 8001ae0:	24000254 	.word	0x24000254

08001ae4 <testTriangles>:

void testTriangles()
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <testTriangles+0xc4>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da00      	bge.n	8001af6 <testTriangles+0x12>
 8001af4:	3301      	adds	r3, #1
 8001af6:	105b      	asrs	r3, r3, #1
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <testTriangles+0xc8>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da00      	bge.n	8001b0a <testTriangles+0x26>
 8001b08:	3301      	adds	r3, #1
 8001b0a:	105b      	asrs	r3, r3, #1
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fd44 	bl	80015a0 <fillScreen>
    n     = min(cx, cy);
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bfa8      	it	ge
 8001b20:	4613      	movge	r3, r2
 8001b22:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e035      	b.n	8001b96 <testTriangles+0xb2>
        drawTriangle(
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29b      	uxth	r3, r3
        drawTriangle(
 8001b3a:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b29b      	uxth	r3, r3
        drawTriangle(
 8001b48:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
        drawTriangle(
 8001b56:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	b29b      	uxth	r3, r3
        drawTriangle(
 8001b64:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	b291      	uxth	r1, r2
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	440a      	add	r2, r1
 8001b70:	b292      	uxth	r2, r2
        drawTriangle(
 8001b72:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	10c9      	asrs	r1, r1, #3
 8001b78:	b289      	uxth	r1, r1
        drawTriangle(
 8001b7a:	f001 011f 	and.w	r1, r1, #31
 8001b7e:	b289      	uxth	r1, r1
 8001b80:	9102      	str	r1, [sp, #8]
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4633      	mov	r3, r6
 8001b88:	462a      	mov	r2, r5
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	f7ff fb6e 	bl	800126c <drawTriangle>
    for (i = 0; i < n; i += 5) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3305      	adds	r3, #5
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbc5      	blt.n	8001b2a <testTriangles+0x46>
    }

}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	24000250 	.word	0x24000250
 8001bac:	24000254 	.word	0x24000254

08001bb0 <testFilledTriangles>:

void testFilledTriangles() {
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <testFilledTriangles+0x154>)
 8001bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da00      	bge.n	8001bc2 <testFilledTriangles+0x12>
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	105b      	asrs	r3, r3, #1
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8001bca:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <testFilledTriangles+0x158>)
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da00      	bge.n	8001bd6 <testFilledTriangles+0x26>
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	105b      	asrs	r3, r3, #1
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff fcde 	bl	80015a0 <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bfa8      	it	ge
 8001bec:	4613      	movge	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e07e      	b.n	8001cf0 <testFilledTriangles+0x140>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	b21c      	sxth	r4, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b21d      	sxth	r5, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b21e      	sxth	r6, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	fa0f fc83 	sxth.w	ip, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	b291      	uxth	r1, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	b292      	uxth	r2, r2
 8001c38:	440a      	add	r2, r1
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	00c9      	lsls	r1, r1, #3
 8001c42:	b209      	sxth	r1, r1
 8001c44:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8001c48:	b208      	sxth	r0, r1
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	10c9      	asrs	r1, r1, #3
 8001c4e:	b209      	sxth	r1, r1
 8001c50:	f001 011f 	and.w	r1, r1, #31
 8001c54:	b209      	sxth	r1, r1
 8001c56:	4301      	orrs	r1, r0
 8001c58:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001c5a:	b289      	uxth	r1, r1
 8001c5c:	9102      	str	r1, [sp, #8]
 8001c5e:	9201      	str	r2, [sp, #4]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4663      	mov	r3, ip
 8001c64:	4632      	mov	r2, r6
 8001c66:	4629      	mov	r1, r5
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fb39 	bl	80012e0 <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	b21c      	sxth	r4, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b21d      	sxth	r5, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21e      	sxth	r6, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	fa0f fc83 	sxth.w	ip, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b218      	sxth	r0, r3
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <testFilledTriangles+0x15c>)
 8001cc2:	4003      	ands	r3, r0
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	9101      	str	r1, [sp, #4]
 8001cdc:	9200      	str	r2, [sp, #0]
 8001cde:	4663      	mov	r3, ip
 8001ce0:	4632      	mov	r2, r6
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fac1 	bl	800126c <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3b05      	subs	r3, #5
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	f73f af7d 	bgt.w	8001bf2 <testFilledTriangles+0x42>
    }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24000250 	.word	0x24000250
 8001d08:	24000254 	.word	0x24000254
 8001d0c:	fffff800 	.word	0xfffff800

08001d10 <testRoundRects>:

void testRoundRects() {
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <testRoundRects+0xd8>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da00      	bge.n	8001d22 <testRoundRects+0x12>
 8001d20:	3301      	adds	r3, #1
 8001d22:	105b      	asrs	r3, r3, #1
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <testRoundRects+0xdc>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da00      	bge.n	8001d36 <testRoundRects+0x26>
 8001d34:	3301      	adds	r3, #1
 8001d36:	105b      	asrs	r3, r3, #1
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fc2e 	bl	80015a0 <fillScreen>
    w     = min(_width, _height);
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <testRoundRects+0xdc>)
 8001d46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <testRoundRects+0xd8>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	bfa8      	it	ge
 8001d54:	4613      	movge	r3, r2
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	60fb      	str	r3, [r7, #12]
    red = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8001d5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d68:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e031      	b.n	8001dd4 <testRoundRects+0xc4>
        i2 = i / 2;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	da00      	bge.n	8001d78 <testRoundRects+0x68>
 8001d76:	3301      	adds	r3, #1
 8001d78:	105b      	asrs	r3, r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
        red += step;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	b218      	sxth	r0, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b21c      	sxth	r4, r3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	b21d      	sxth	r5, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	b21e      	sxth	r6, r3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da00      	bge.n	8001db0 <testRoundRects+0xa0>
 8001dae:	3307      	adds	r3, #7
 8001db0:	10db      	asrs	r3, r3, #3
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b299      	uxth	r1, r3
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <testRoundRects+0xe0>)
 8001dbc:	400b      	ands	r3, r1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	4633      	mov	r3, r6
 8001dc6:	462a      	mov	r2, r5
 8001dc8:	4621      	mov	r1, r4
 8001dca:	f7ff f907 	bl	8000fdc <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3306      	adds	r3, #6
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbc9      	blt.n	8001d70 <testRoundRects+0x60>
    }

}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	24000250 	.word	0x24000250
 8001dec:	24000254 	.word	0x24000254
 8001df0:	fffff800 	.word	0xfffff800

08001df4 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <testFilledRoundRects+0xe4>)
 8001dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da00      	bge.n	8001e06 <testFilledRoundRects+0x12>
 8001e04:	3301      	adds	r3, #1
 8001e06:	105b      	asrs	r3, r3, #1
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <testFilledRoundRects+0xe8>)
 8001e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da00      	bge.n	8001e1a <testFilledRoundRects+0x26>
 8001e18:	3301      	adds	r3, #1
 8001e1a:	105b      	asrs	r3, r3, #1
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fbbc 	bl	80015a0 <fillScreen>
    green = 256;
 8001e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2c:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <testFilledRoundRects+0xe8>)
 8001e30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <testFilledRoundRects+0xe4>)
 8001e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	bfa8      	it	ge
 8001e3e:	4613      	movge	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e4c:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <testFilledRoundRects+0xe8>)
 8001e50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <testFilledRoundRects+0xe4>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	bfa8      	it	ge
 8001e5e:	4613      	movge	r3, r2
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e030      	b.n	8001ec8 <testFilledRoundRects+0xd4>
        i2 = i / 2;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da00      	bge.n	8001e6e <testFilledRoundRects+0x7a>
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	105b      	asrs	r3, r3, #1
 8001e70:	603b      	str	r3, [r7, #0]
        green -= step;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b218      	sxth	r0, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b219      	sxth	r1, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	b21c      	sxth	r4, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	b21d      	sxth	r5, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da00      	bge.n	8001ea6 <testFilledRoundRects+0xb2>
 8001ea4:	3307      	adds	r3, #7
 8001ea6:	10db      	asrs	r3, r3, #3
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	00d2      	lsls	r2, r2, #3
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	462b      	mov	r3, r5
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	f7ff f95b 	bl	8001178 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3b06      	subs	r3, #6
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b14      	cmp	r3, #20
 8001ecc:	dccb      	bgt.n	8001e66 <testFilledRoundRects+0x72>
    }

}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed8:	24000250 	.word	0x24000250
 8001edc:	24000254 	.word	0x24000254

08001ee0 <testFillScreen>:
void testFillScreen()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fb5b 	bl	80015a0 <fillScreen>
    fillScreen(RED);
 8001eea:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001eee:	f7ff fb57 	bl	80015a0 <fillScreen>
    fillScreen(GREEN);
 8001ef2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001ef6:	f7ff fb53 	bl	80015a0 <fillScreen>
    fillScreen(BLUE);
 8001efa:	201f      	movs	r0, #31
 8001efc:	f7ff fb50 	bl	80015a0 <fillScreen>
    fillScreen(BLACK);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fb4d 	bl	80015a0 <fillScreen>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <testAll>:

void testAll (void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
	testFillScreen();
 8001f0e:	f7ff ffe7 	bl	8001ee0 <testFillScreen>
	testLines(CYAN);
 8001f12:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001f16:	f7ff fb5d 	bl	80015d4 <testLines>
	testFastLines(RED, BLUE);
 8001f1a:	211f      	movs	r1, #31
 8001f1c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f20:	f7ff fc5a 	bl	80017d8 <testFastLines>
	testRects(GREEN);
 8001f24:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001f28:	f7ff fc96 	bl	8001858 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001f2c:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001f30:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001f34:	f7ff fce6 	bl	8001904 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001f38:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f7ff fd51 	bl	80019e4 <testFilledCircles>
	testCircles(10, WHITE);
 8001f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f46:	200a      	movs	r0, #10
 8001f48:	f7ff fd8a 	bl	8001a60 <testCircles>
	testTriangles();
 8001f4c:	f7ff fdca 	bl	8001ae4 <testTriangles>
	testFilledTriangles();
 8001f50:	f7ff fe2e 	bl	8001bb0 <testFilledTriangles>
	testRoundRects();
 8001f54:	f7ff fedc 	bl	8001d10 <testRoundRects>
	testFilledRoundRects();
 8001f58:	f7ff ff4c 	bl	8001df4 <testFilledRoundRects>
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2101      	movs	r1, #1
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <ST7735_Select+0x14>)
 8001f6a:	f004 fd8d 	bl	8006a88 <HAL_GPIO_WritePin>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58020800 	.word	0x58020800

08001f78 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <ST7735_Unselect+0x14>)
 8001f82:	f004 fd81 	bl	8006a88 <HAL_GPIO_WritePin>
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	58020800 	.word	0x58020800

08001f90 <ST7735_Reset>:

void ST7735_Reset()
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2108      	movs	r1, #8
 8001f98:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <ST7735_Reset+0x24>)
 8001f9a:	f004 fd75 	bl	8006a88 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f9e:	2005      	movs	r0, #5
 8001fa0:	f001 ff78 	bl	8003e94 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <ST7735_Reset+0x24>)
 8001faa:	f004 fd6d 	bl	8006a88 <HAL_GPIO_WritePin>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58020800 	.word	0x58020800

08001fb8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <ST7735_WriteCommand+0x2c>)
 8001fc8:	f004 fd5e 	bl	8006a88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001fcc:	1df9      	adds	r1, r7, #7
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <ST7735_WriteCommand+0x30>)
 8001fd6:	f007 f91f 	bl	8009218 <HAL_SPI_Transmit>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	58020000 	.word	0x58020000
 8001fe8:	240003e8 	.word	0x240003e8

08001fec <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	4807      	ldr	r0, [pc, #28]	; (8002018 <ST7735_WriteData+0x2c>)
 8001ffc:	f004 fd44 	bl	8006a88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <ST7735_WriteData+0x30>)
 800200c:	f007 f904 	bl	8009218 <HAL_SPI_Transmit>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58020000 	.word	0x58020000
 800201c:	240003e8 	.word	0x240003e8

08002020 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002032:	e034      	b.n	800209e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ffb9 	bl	8001fb8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002050:	7abb      	ldrb	r3, [r7, #10]
 8002052:	b29b      	uxth	r3, r3
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800205a:	7abb      	ldrb	r3, [r7, #10]
 800205c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002060:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002062:	7abb      	ldrb	r3, [r7, #10]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffbd 	bl	8001fec <ST7735_WriteData>
            addr += numArgs;
 8002072:	7abb      	ldrb	r3, [r7, #10]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800207a:	89bb      	ldrh	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <DisplayInit+0x7e>
            ms = *addr++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800208a:	89bb      	ldrh	r3, [r7, #12]
 800208c:	2bff      	cmp	r3, #255	; 0xff
 800208e:	d102      	bne.n	8002096 <DisplayInit+0x76>
 8002090:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002094:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fefb 	bl	8003e94 <HAL_Delay>
    while(numCommands--) {
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	73fa      	strb	r2, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1c5      	bne.n	8002034 <DisplayInit+0x14>
        }
    }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4604      	mov	r4, r0
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	71fb      	strb	r3, [r7, #7]
 80020c6:	4603      	mov	r3, r0
 80020c8:	71bb      	strb	r3, [r7, #6]
 80020ca:	460b      	mov	r3, r1
 80020cc:	717b      	strb	r3, [r7, #5]
 80020ce:	4613      	mov	r3, r2
 80020d0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80020d2:	202a      	movs	r0, #42	; 0x2a
 80020d4:	f7ff ff70 	bl	8001fb8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80020d8:	2300      	movs	r3, #0
 80020da:	733b      	strb	r3, [r7, #12]
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <ST7735_SetAddressWindow+0x88>)
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4413      	add	r3, r2
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	737b      	strb	r3, [r7, #13]
 80020e8:	2300      	movs	r3, #0
 80020ea:	73bb      	strb	r3, [r7, #14]
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <ST7735_SetAddressWindow+0x88>)
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	797b      	ldrb	r3, [r7, #5]
 80020f2:	4413      	add	r3, r2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2104      	movs	r1, #4
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff74 	bl	8001fec <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002104:	202b      	movs	r0, #43	; 0x2b
 8002106:	f7ff ff57 	bl	8001fb8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <ST7735_SetAddressWindow+0x8c>)
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	4413      	add	r3, r2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <ST7735_SetAddressWindow+0x8c>)
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	793b      	ldrb	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2104      	movs	r1, #4
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5f 	bl	8001fec <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800212e:	202c      	movs	r0, #44	; 0x2c
 8002130:	f7ff ff42 	bl	8001fb8 <ST7735_WriteCommand>
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	24000248 	.word	0x24000248
 8002140:	2400024c 	.word	0x2400024c

08002144 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800214e:	f7ff ff07 	bl	8001f60 <ST7735_Select>
    ST7735_Reset();
 8002152:	f7ff ff1d 	bl	8001f90 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <ST7735_Init+0x44>)
 8002158:	f7ff ff62 	bl	8002020 <DisplayInit>
    DisplayInit(init_cmds2);
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <ST7735_Init+0x48>)
 800215e:	f7ff ff5f 	bl	8002020 <DisplayInit>
    DisplayInit(init_cmds3);
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <ST7735_Init+0x4c>)
 8002164:	f7ff ff5c 	bl	8002020 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <ST7735_Init+0x50>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <ST7735_Init+0x54>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f810 	bl	800219c <ST7735_SetRotation>
    ST7735_Unselect();
 800217c:	f7ff fefc 	bl	8001f78 <ST7735_Unselect>

}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	0801a0cc 	.word	0x0801a0cc
 800218c:	0801a104 	.word	0x0801a104
 8002190:	0801a114 	.word	0x0801a114
 8002194:	24000249 	.word	0x24000249
 8002198:	2400024d 	.word	0x2400024d

0800219c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <ST7735_SetRotation+0xe4>)
 80021b4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <ST7735_SetRotation+0xe4>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d84e      	bhi.n	800225c <ST7735_SetRotation+0xc0>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <ST7735_SetRotation+0x28>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	080021d5 	.word	0x080021d5
 80021c8:	080021f7 	.word	0x080021f7
 80021cc:	08002219 	.word	0x08002219
 80021d0:	0800223b 	.word	0x0800223b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80021d4:	23c0      	movs	r3, #192	; 0xc0
 80021d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <ST7735_SetRotation+0xe8>)
 80021da:	22a0      	movs	r2, #160	; 0xa0
 80021dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <ST7735_SetRotation+0xec>)
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <ST7735_SetRotation+0xf0>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <ST7735_SetRotation+0xf4>)
 80021ea:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <ST7735_SetRotation+0xf8>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <ST7735_SetRotation+0xfc>)
 80021f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021f4:	e032      	b.n	800225c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80021fa:	4b23      	ldr	r3, [pc, #140]	; (8002288 <ST7735_SetRotation+0xec>)
 80021fc:	22a0      	movs	r2, #160	; 0xa0
 80021fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <ST7735_SetRotation+0xe8>)
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <ST7735_SetRotation+0xf0>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <ST7735_SetRotation+0xfc>)
 800220c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <ST7735_SetRotation+0xf8>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <ST7735_SetRotation+0xf4>)
 8002214:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002216:	e021      	b.n	800225c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <ST7735_SetRotation+0xe8>)
 800221e:	22a0      	movs	r2, #160	; 0xa0
 8002220:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <ST7735_SetRotation+0xec>)
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <ST7735_SetRotation+0xf0>)
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <ST7735_SetRotation+0xf4>)
 800222e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <ST7735_SetRotation+0xf8>)
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <ST7735_SetRotation+0xfc>)
 8002236:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002238:	e010      	b.n	800225c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800223a:	2360      	movs	r3, #96	; 0x60
 800223c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <ST7735_SetRotation+0xec>)
 8002240:	22a0      	movs	r2, #160	; 0xa0
 8002242:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <ST7735_SetRotation+0xe8>)
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <ST7735_SetRotation+0xf0>)
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <ST7735_SetRotation+0xfc>)
 8002250:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <ST7735_SetRotation+0xf8>)
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <ST7735_SetRotation+0xf4>)
 8002258:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800225a:	bf00      	nop
  }
  ST7735_Select();
 800225c:	f7ff fe80 	bl	8001f60 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002260:	2036      	movs	r0, #54	; 0x36
 8002262:	f7ff fea9 	bl	8001fb8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002266:	f107 030f 	add.w	r3, r7, #15
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff febd 	bl	8001fec <ST7735_WriteData>
  ST7735_Unselect();
 8002272:	f7ff fe81 	bl	8001f78 <ST7735_Unselect>
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2400024e 	.word	0x2400024e
 8002284:	24000254 	.word	0x24000254
 8002288:	24000250 	.word	0x24000250
 800228c:	24000249 	.word	0x24000249
 8002290:	24000248 	.word	0x24000248
 8002294:	2400024d 	.word	0x2400024d
 8002298:	2400024c 	.word	0x2400024c

0800229c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	460b      	mov	r3, r1
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <ST7735_DrawPixel+0x74>)
 80022b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	da26      	bge.n	8002308 <ST7735_DrawPixel+0x6c>
 80022ba:	88bb      	ldrh	r3, [r7, #4]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <ST7735_DrawPixel+0x78>)
 80022be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80022c2:	4293      	cmp	r3, r2
 80022c4:	da20      	bge.n	8002308 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80022c6:	f7ff fe4b 	bl	8001f60 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	88bb      	ldrh	r3, [r7, #4]
 80022d0:	b2d9      	uxtb	r1, r3
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	88bb      	ldrh	r3, [r7, #4]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f7ff fee7 	bl	80020b4 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	733b      	strb	r3, [r7, #12]
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2102      	movs	r1, #2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe75 	bl	8001fec <ST7735_WriteData>

    ST7735_Unselect();
 8002302:	f7ff fe39 	bl	8001f78 <ST7735_Unselect>
 8002306:	e000      	b.n	800230a <ST7735_DrawPixel+0x6e>
        return;
 8002308:	bf00      	nop
}
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	24000250 	.word	0x24000250
 8002314:	24000254 	.word	0x24000254

08002318 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002318:	b082      	sub	sp, #8
 800231a:	b590      	push	{r4, r7, lr}
 800231c:	b089      	sub	sp, #36	; 0x24
 800231e:	af00      	add	r7, sp, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
 8002326:	460b      	mov	r3, r1
 8002328:	80bb      	strh	r3, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	b2d8      	uxtb	r0, r3
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	b2d9      	uxtb	r1, r3
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800233e:	4413      	add	r3, r2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b2dc      	uxtb	r4, r3
 8002346:	88bb      	ldrh	r3, [r7, #4]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800234e:	4413      	add	r3, r2
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4622      	mov	r2, r4
 8002358:	f7ff feac 	bl	80020b4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	e043      	b.n	80023ea <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	3b20      	subs	r3, #32
 8002368:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4619      	mov	r1, r3
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	440b      	add	r3, r1
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	e029      	b.n	80023d8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002394:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	743b      	strb	r3, [r7, #16]
 800239e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe1e 	bl	8001fec <ST7735_WriteData>
 80023b0:	e00f      	b.n	80023d2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80023b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	733b      	strb	r3, [r7, #12]
 80023be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2102      	movs	r1, #2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fe0d 	bl	8001fec <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023dc:	461a      	mov	r2, r3
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d3cf      	bcc.n	8002384 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023ee:	461a      	mov	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d3b5      	bcc.n	8002362 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3724      	adds	r7, #36	; 0x24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002402:	b002      	add	sp, #8
 8002404:	4770      	bx	lr
	...

08002408 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002408:	b082      	sub	sp, #8
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af04      	add	r7, sp, #16
 8002410:	603a      	str	r2, [r7, #0]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	4603      	mov	r3, r0
 8002416:	80fb      	strh	r3, [r7, #6]
 8002418:	460b      	mov	r3, r1
 800241a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800241c:	f7ff fda0 	bl	8001f60 <ST7735_Select>

    while(*str) {
 8002420:	e033      	b.n	800248a <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	7d3a      	ldrb	r2, [r7, #20]
 8002426:	4413      	add	r3, r2
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <ST7735_WriteString+0xa0>)
 800242a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800242e:	4293      	cmp	r3, r2
 8002430:	db16      	blt.n	8002460 <ST7735_WriteString+0x58>
            x = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002436:	7d7b      	ldrb	r3, [r7, #21]
 8002438:	b29a      	uxth	r2, r3
 800243a:	88bb      	ldrh	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	7d7a      	ldrb	r2, [r7, #21]
 8002444:	4413      	add	r3, r2
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <ST7735_WriteString+0xa4>)
 8002448:	f9b2 2000 	ldrsh.w	r2, [r2]
 800244c:	4293      	cmp	r3, r2
 800244e:	da21      	bge.n	8002494 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b20      	cmp	r3, #32
 8002456:	d103      	bne.n	8002460 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	603b      	str	r3, [r7, #0]
                continue;
 800245e:	e014      	b.n	800248a <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	88b9      	ldrh	r1, [r7, #4]
 8002466:	88f8      	ldrh	r0, [r7, #6]
 8002468:	8c3b      	ldrh	r3, [r7, #32]
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	8bbb      	ldrh	r3, [r7, #28]
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f7ff ff4f 	bl	8002318 <ST7735_WriteChar>
        x += font.width;
 800247a:	7d3b      	ldrb	r3, [r7, #20]
 800247c:	b29a      	uxth	r2, r3
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4413      	add	r3, r2
 8002482:	80fb      	strh	r3, [r7, #6]
        str++;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	603b      	str	r3, [r7, #0]
    while(*str) {
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1c7      	bne.n	8002422 <ST7735_WriteString+0x1a>
 8002492:	e000      	b.n	8002496 <ST7735_WriteString+0x8e>
                break;
 8002494:	bf00      	nop
    }

    ST7735_Unselect();
 8002496:	f7ff fd6f 	bl	8001f78 <ST7735_Unselect>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024a4:	b002      	add	sp, #8
 80024a6:	4770      	bx	lr
 80024a8:	24000250 	.word	0x24000250
 80024ac:	24000254 	.word	0x24000254

080024b0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	80fb      	strh	r3, [r7, #6]
 80024c2:	4603      	mov	r3, r0
 80024c4:	80bb      	strh	r3, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	807b      	strh	r3, [r7, #2]
 80024ca:	4613      	mov	r3, r2
 80024cc:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4a37      	ldr	r2, [pc, #220]	; (80025b0 <ST7735_FillRectangle+0x100>)
 80024d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	da66      	bge.n	80025a8 <ST7735_FillRectangle+0xf8>
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	4a35      	ldr	r2, [pc, #212]	; (80025b4 <ST7735_FillRectangle+0x104>)
 80024de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	da60      	bge.n	80025a8 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <ST7735_FillRectangle+0x100>)
 80024ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024f2:	4293      	cmp	r3, r2
 80024f4:	dd06      	ble.n	8002504 <ST7735_FillRectangle+0x54>
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <ST7735_FillRectangle+0x100>)
 80024f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8002504:	88ba      	ldrh	r2, [r7, #4]
 8002506:	883b      	ldrh	r3, [r7, #0]
 8002508:	4413      	add	r3, r2
 800250a:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <ST7735_FillRectangle+0x104>)
 800250c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002510:	4293      	cmp	r3, r2
 8002512:	dd06      	ble.n	8002522 <ST7735_FillRectangle+0x72>
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <ST7735_FillRectangle+0x104>)
 8002516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251a:	b29a      	uxth	r2, r3
 800251c:	88bb      	ldrh	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002522:	f7ff fd1d 	bl	8001f60 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	b2d9      	uxtb	r1, r3
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	4413      	add	r3, r2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b2dc      	uxtb	r4, r3
 800253e:	88bb      	ldrh	r3, [r7, #4]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	883b      	ldrh	r3, [r7, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4413      	add	r3, r2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4622      	mov	r2, r4
 8002550:	f7ff fdb0 	bl	80020b4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002554:	8c3b      	ldrh	r3, [r7, #32]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	733b      	strb	r3, [r7, #12]
 800255e:	8c3b      	ldrh	r3, [r7, #32]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002564:	2201      	movs	r2, #1
 8002566:	2108      	movs	r1, #8
 8002568:	4813      	ldr	r0, [pc, #76]	; (80025b8 <ST7735_FillRectangle+0x108>)
 800256a:	f004 fa8d 	bl	8006a88 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800256e:	883b      	ldrh	r3, [r7, #0]
 8002570:	80bb      	strh	r3, [r7, #4]
 8002572:	e013      	b.n	800259c <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	80fb      	strh	r3, [r7, #6]
 8002578:	e00a      	b.n	8002590 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800257a:	f107 010c 	add.w	r1, r7, #12
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	2202      	movs	r2, #2
 8002584:	480d      	ldr	r0, [pc, #52]	; (80025bc <ST7735_FillRectangle+0x10c>)
 8002586:	f006 fe47 	bl	8009218 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	3b01      	subs	r3, #1
 800258e:	80fb      	strh	r3, [r7, #6]
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f1      	bne.n	800257a <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	3b01      	subs	r3, #1
 800259a:	80bb      	strh	r3, [r7, #4]
 800259c:	88bb      	ldrh	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e8      	bne.n	8002574 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80025a2:	f7ff fce9 	bl	8001f78 <ST7735_Unselect>
 80025a6:	e000      	b.n	80025aa <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80025a8:	bf00      	nop
}
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	24000250 	.word	0x24000250
 80025b4:	24000254 	.word	0x24000254
 80025b8:	58020000 	.word	0x58020000
 80025bc:	240003e8 	.word	0x240003e8

080025c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  SM_STATES state = INIT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80025ca:	f000 fc8f 	bl	8002eec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80025ce:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <main+0x200>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11b      	bne.n	8002612 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025da:	f3bf 8f4f 	dsb	sy
}
 80025de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025e0:	f3bf 8f6f 	isb	sy
}
 80025e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80025e6:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <main+0x200>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80025ee:	f3bf 8f4f 	dsb	sy
}
 80025f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025f4:	f3bf 8f6f 	isb	sy
}
 80025f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80025fa:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <main+0x200>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	4a70      	ldr	r2, [pc, #448]	; (80027c0 <main+0x200>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002606:	f3bf 8f4f 	dsb	sy
}
 800260a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800260c:	f3bf 8f6f 	isb	sy
}
 8002610:	e000      	b.n	8002614 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002612:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <main+0x200>)
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d138      	bne.n	8002692 <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002620:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <main+0x200>)
 8002622:	2200      	movs	r2, #0
 8002624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002628:	f3bf 8f4f 	dsb	sy
}
 800262c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <main+0x200>)
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0b5b      	lsrs	r3, r3, #13
 800263a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800263e:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	08db      	lsrs	r3, r3, #3
 8002644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002648:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002652:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002658:	4959      	ldr	r1, [pc, #356]	; (80027c0 <main+0x200>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1e5a      	subs	r2, r3, #1
 8002664:	603a      	str	r2, [r7, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ef      	bne.n	800264a <main+0x8a>
    } while(sets-- != 0U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <main+0x200>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4a50      	ldr	r2, [pc, #320]	; (80027c0 <main+0x200>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002686:	f3bf 8f4f 	dsb	sy
}
 800268a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800268c:	f3bf 8f6f 	isb	sy
}
 8002690:	e000      	b.n	8002694 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002692:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002694:	f001 fb6c 	bl	8003d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002698:	f000 f8ac 	bl	80027f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269c:	f000 fac0 	bl	8002c20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80026a0:	f000 fa6a 	bl	8002b78 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80026a4:	f000 fab4 	bl	8002c10 <MX_USB_OTG_HS_USB_Init>
  MX_LWIP_Init();
 80026a8:	f008 fca4 	bl	800aff4 <MX_LWIP_Init>
  MX_FDCAN1_Init();
 80026ac:	f000 f91e 	bl	80028ec <MX_FDCAN1_Init>
  MX_TIM6_Init();
 80026b0:	f000 fa2a 	bl	8002b08 <MX_TIM6_Init>
  MX_SPI1_Init();
 80026b4:	f000 f9d2 	bl	8002a5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7ff fd43 	bl	8002144 <ST7735_Init>
  fillScreen(BLACK);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe ff6e 	bl	80015a0 <fillScreen>
  tcp_server_init();
 80026c4:	f000 ff56 	bl	8003574 <tcp_server_init>
  testAll();
 80026c8:	f7ff fc1f 	bl	8001f0a <testAll>

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 80026cc:	483d      	ldr	r0, [pc, #244]	; (80027c4 <main+0x204>)
 80026ce:	f007 f8d5 	bl	800987c <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80026d2:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <main+0x204>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <main+0x208>)
 80026dc:	801a      	strh	r2, [r3, #0]

  //Prepare CAN data
  myTxData[0] = 0xFF;
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <main+0x20c>)
 80026e0:	22ff      	movs	r2, #255	; 0xff
 80026e2:	701a      	strb	r2, [r3, #0]
  myTxData[1] = 0x00;
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <main+0x20c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	705a      	strb	r2, [r3, #1]
  myTxData[2] = 0xFF;
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <main+0x20c>)
 80026ec:	22ff      	movs	r2, #255	; 0xff
 80026ee:	709a      	strb	r2, [r3, #2]
  myTxData[3] = 0x00;
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <main+0x20c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	70da      	strb	r2, [r3, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(state)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d05c      	beq.n	80027b6 <main+0x1f6>
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	dc5c      	bgt.n	80027ba <main+0x1fa>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <main+0x14a>
 8002704:	2b01      	cmp	r3, #1
 8002706:	d033      	beq.n	8002770 <main+0x1b0>
					 state = IDLE;
					 break;

		  case STATE_2: break;

		  default: break;
 8002708:	e057      	b.n	80027ba <main+0x1fa>
		  case INIT: print_to_serial("Ethernet + CAN!\r\n");
 800270a:	4831      	ldr	r0, [pc, #196]	; (80027d0 <main+0x210>)
 800270c:	f000 fbaa 	bl	8002e64 <print_to_serial>
		  	  	  	 ST7735_SetRotation(2);
 8002710:	2002      	movs	r0, #2
 8002712:	f7ff fd43 	bl	800219c <ST7735_SetRotation>
		  			 ST7735_WriteString(0, 0, "Hello Ethernet!", Font_11x18, RED,BLACK);
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <main+0x214>)
 8002718:	2200      	movs	r2, #0
 800271a:	9202      	str	r2, [sp, #8]
 800271c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002720:	9201      	str	r2, [sp, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	9200      	str	r2, [sp, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <main+0x218>)
 800272a:	2100      	movs	r1, #0
 800272c:	2000      	movs	r0, #0
 800272e:	f7ff fe6b 	bl	8002408 <ST7735_WriteString>
		  			 ST7735_WriteString(0, 20, "Hello CAN!", Font_11x18, RED,BLACK);
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <main+0x214>)
 8002734:	2200      	movs	r2, #0
 8002736:	9202      	str	r2, [sp, #8]
 8002738:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800273c:	9201      	str	r2, [sp, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	9200      	str	r2, [sp, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <main+0x21c>)
 8002746:	2114      	movs	r1, #20
 8002748:	2000      	movs	r0, #0
 800274a:	f7ff fe5d 	bl	8002408 <ST7735_WriteString>
		  			 ST7735_WriteString(0, 40, "Hello SPI!", Font_11x18, RED,BLACK);
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <main+0x214>)
 8002750:	2200      	movs	r2, #0
 8002752:	9202      	str	r2, [sp, #8]
 8002754:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002758:	9201      	str	r2, [sp, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <main+0x220>)
 8002762:	2128      	movs	r1, #40	; 0x28
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff fe4f 	bl	8002408 <ST7735_WriteString>
					 state = IDLE;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
					 break;
 800276e:	e025      	b.n	80027bc <main+0x1fc>
			  	  	 ethernetif_input(&gnetif);
 8002770:	481c      	ldr	r0, [pc, #112]	; (80027e4 <main+0x224>)
 8002772:	f008 ffff 	bl	800b774 <ethernetif_input>
					 sys_check_timeouts();
 8002776:	f011 f941 	bl	80139fc <sys_check_timeouts>
					 if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 10000)
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <main+0x204>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <main+0x208>)
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	f242 720f 	movw	r2, #9999	; 0x270f
 800278a:	4293      	cmp	r3, r2
 800278c:	d910      	bls.n	80027b0 <main+0x1f0>
					   	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800278e:	2102      	movs	r1, #2
 8002790:	4815      	ldr	r0, [pc, #84]	; (80027e8 <main+0x228>)
 8002792:	f004 f992 	bl	8006aba <HAL_GPIO_TogglePin>
					   	  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <main+0x204>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b29a      	uxth	r2, r3
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <main+0x208>)
 80027a0:	801a      	strh	r2, [r3, #0]
					   	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <main+0x20c>)
 80027a4:	4911      	ldr	r1, [pc, #68]	; (80027ec <main+0x22c>)
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <main+0x230>)
 80027a8:	f003 fcec 	bl	8006184 <HAL_FDCAN_AddMessageToTxFifoQ>
					   	  Toggle_CAN_Data();
 80027ac:	f000 fb78 	bl	8002ea0 <Toggle_CAN_Data>
					 state = IDLE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
					 break;
 80027b4:	e002      	b.n	80027bc <main+0x1fc>
		  case STATE_2: break;
 80027b6:	bf00      	nop
 80027b8:	e79d      	b.n	80026f6 <main+0x136>
		  default: break;
 80027ba:	bf00      	nop
	  switch(state)
 80027bc:	e79b      	b.n	80026f6 <main+0x136>
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00
 80027c4:	24000398 	.word	0x24000398
 80027c8:	240003e4 	.word	0x240003e4
 80027cc:	240002e8 	.word	0x240002e8
 80027d0:	080175f8 	.word	0x080175f8
 80027d4:	24000000 	.word	0x24000000
 80027d8:	0801760c 	.word	0x0801760c
 80027dc:	0801761c 	.word	0x0801761c
 80027e0:	08017628 	.word	0x08017628
 80027e4:	24000530 	.word	0x24000530
 80027e8:	58021000 	.word	0x58021000
 80027ec:	24000478 	.word	0x24000478
 80027f0:	240002f0 	.word	0x240002f0

080027f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b09c      	sub	sp, #112	; 0x70
 80027f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fe:	224c      	movs	r2, #76	; 0x4c
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f013 feae 	bl	8016564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2220      	movs	r2, #32
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f013 fea8 	bl	8016564 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002814:	2002      	movs	r0, #2
 8002816:	f004 f96b 	bl	8006af0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800281a:	2300      	movs	r3, #0
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <SystemClock_Config+0xf0>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <SystemClock_Config+0xf0>)
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	6193      	str	r3, [r2, #24]
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <SystemClock_Config+0xf0>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800283a:	bf00      	nop
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <SystemClock_Config+0xf0>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d1f8      	bne.n	800283c <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800284a:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <SystemClock_Config+0xf4>)
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <SystemClock_Config+0xf4>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800285a:	2321      	movs	r3, #33	; 0x21
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800285e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002864:	2301      	movs	r3, #1
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002868:	2302      	movs	r3, #2
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800286c:	2302      	movs	r3, #2
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002870:	2301      	movs	r3, #1
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002874:	2318      	movs	r3, #24
 8002876:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002878:	2301      	movs	r3, #1
 800287a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800287c:	2302      	movs	r3, #2
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002880:	2302      	movs	r3, #2
 8002882:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002884:	230c      	movs	r3, #12
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002888:	2300      	movs	r3, #0
 800288a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	4618      	mov	r0, r3
 8002896:	f004 f965 	bl	8006b64 <HAL_RCC_OscConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80028a0:	f000 fb51 	bl	8002f46 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a4:	233f      	movs	r3, #63	; 0x3f
 80028a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a8:	2303      	movs	r3, #3
 80028aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80028b0:	2308      	movs	r3, #8
 80028b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80028b4:	2340      	movs	r3, #64	; 0x40
 80028b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80028b8:	2340      	movs	r3, #64	; 0x40
 80028ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028c2:	2340      	movs	r3, #64	; 0x40
 80028c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 fcf6 	bl	80072bc <HAL_RCC_ClockConfig>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80028d6:	f000 fb36 	bl	8002f46 <Error_Handler>
  }
}
 80028da:	bf00      	nop
 80028dc:	3770      	adds	r7, #112	; 0x70
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	58024800 	.word	0x58024800
 80028e8:	58024400 	.word	0x58024400

080028ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 80028f4:	4a57      	ldr	r2, [pc, #348]	; (8002a54 <MX_FDCAN1_Init+0x168>)
 80028f6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80028f8:	4b55      	ldr	r3, [pc, #340]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002904:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002906:	2201      	movs	r2, #1
 8002908:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800290a:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800290c:	2200      	movs	r2, #0
 800290e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8002910:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002912:	2201      	movs	r2, #1
 8002914:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8002916:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002918:	2202      	movs	r2, #2
 800291a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800291e:	2208      	movs	r2, #8
 8002920:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8002922:	4b4b      	ldr	r3, [pc, #300]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002924:	221f      	movs	r2, #31
 8002926:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8002928:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800292a:	2208      	movs	r2, #8
 800292c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800292e:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002930:	2201      	movs	r2, #1
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002934:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002936:	2201      	movs	r2, #1
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800293a:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800293c:	2201      	movs	r2, #1
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002940:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002942:	2201      	movs	r2, #1
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002946:	4b42      	ldr	r3, [pc, #264]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002948:	2200      	movs	r2, #0
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800294c:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800294e:	2201      	movs	r2, #1
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002954:	2200      	movs	r2, #0
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800295a:	2201      	movs	r2, #1
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800295e:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002960:	2204      	movs	r2, #4
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002966:	2200      	movs	r2, #0
 8002968:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800296c:	2204      	movs	r2, #4
 800296e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002972:	2200      	movs	r2, #0
 8002974:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002978:	2204      	movs	r2, #4
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800297e:	2200      	movs	r2, #0
 8002980:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002984:	2200      	movs	r2, #0
 8002986:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800298a:	2201      	movs	r2, #1
 800298c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002990:	2200      	movs	r2, #0
 8002992:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002994:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002996:	2204      	movs	r2, #4
 8002998:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800299a:	482d      	ldr	r0, [pc, #180]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 800299c:	f003 f942 	bl	8005c24 <HAL_FDCAN_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80029a6:	f000 face 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80029b2:	2302      	movs	r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80029b6:	2301      	movs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x123;
 80029ba:	f240 1323 	movw	r3, #291	; 0x123
 80029be:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80029c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029c4:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	4619      	mov	r1, r3
 80029ca:	4821      	ldr	r0, [pc, #132]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 80029cc:	f003 fb0c 	bl	8005fe8 <HAL_FDCAN_ConfigFilter>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_FDCAN1_Init+0xee>
  {
     Error_Handler();
 80029d6:	f000 fab6 	bl	8002f46 <Error_Handler>
  }

  /* Configure global filter to reject all non-matching frames */
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80029da:	2301      	movs	r3, #1
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2301      	movs	r3, #1
 80029e0:	2202      	movs	r2, #2
 80029e2:	2102      	movs	r1, #2
 80029e4:	481a      	ldr	r0, [pc, #104]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 80029e6:	f003 fb75 	bl	80060d4 <HAL_FDCAN_ConfigGlobalFilter>

  /* Start the FDCAN module */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80029ea:	4819      	ldr	r0, [pc, #100]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 80029ec:	f003 fb9f 	bl	800612e <HAL_FDCAN_Start>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_FDCAN1_Init+0x10e>
  {
     Error_Handler();
 80029f6:	f000 faa6 	bl	8002f46 <Error_Handler>
  }

  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80029fa:	2200      	movs	r2, #0
 80029fc:	2101      	movs	r1, #1
 80029fe:	4814      	ldr	r0, [pc, #80]	; (8002a50 <MX_FDCAN1_Init+0x164>)
 8002a00:	f003 fc1c 	bl	800623c <HAL_FDCAN_ActivateNotification>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_FDCAN1_Init+0x122>
  {
     Error_Handler();
 8002a0a:	f000 fa9c 	bl	8002f46 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x322;
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a10:	f240 3222 	movw	r2, #802	; 0x322
 8002a14:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a28:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <MX_FDCAN1_Init+0x16c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	240002f0 	.word	0x240002f0
 8002a54:	4000a000 	.word	0x4000a000
 8002a58:	24000478 	.word	0x24000478

08002a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <MX_SPI1_Init+0xa8>)
 8002a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a70:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002a74:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a82:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a92:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aec:	4804      	ldr	r0, [pc, #16]	; (8002b00 <MX_SPI1_Init+0xa4>)
 8002aee:	f006 fa8d 	bl	800900c <HAL_SPI_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002af8:	f000 fa25 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	240003e8 	.word	0x240003e8
 8002b04:	40013000 	.word	0x40013000

08002b08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <MX_TIM6_Init+0x6c>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b20:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002b24:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b3c:	f006 fe47 	bl	80097ce <HAL_TIM_Base_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b46:	f000 f9fe 	bl	8002f46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	; (8002b70 <MX_TIM6_Init+0x68>)
 8002b58:	f006 ffb4 	bl	8009ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002b62:	f000 f9f0 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	24000398 	.word	0x24000398
 8002b74:	40001000 	.word	0x40001000

08002b78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <MX_USART3_UART_Init+0x94>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bc0:	4811      	ldr	r0, [pc, #68]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002bc2:	f007 f81b 	bl	8009bfc <HAL_UART_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bcc:	f000 f9bb 	bl	8002f46 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002bd4:	f008 f944 	bl	800ae60 <HAL_UARTEx_SetTxFifoThreshold>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002bde:	f000 f9b2 	bl	8002f46 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be2:	2100      	movs	r1, #0
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002be6:	f008 f979 	bl	800aedc <HAL_UARTEx_SetRxFifoThreshold>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002bf0:	f000 f9a9 	bl	8002f46 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_USART3_UART_Init+0x90>)
 8002bf6:	f008 f8fa 	bl	800adee <HAL_UARTEx_DisableFifoMode>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c00:	f000 f9a1 	bl	8002f46 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	24000258 	.word	0x24000258
 8002c0c:	40004800 	.word	0x40004800

08002c10 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c26:	f107 031c 	add.w	r3, r7, #28
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c36:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3c:	4a82      	ldr	r2, [pc, #520]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c46:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c54:	4b7c      	ldr	r3, [pc, #496]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	4a7b      	ldr	r2, [pc, #492]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c64:	4b78      	ldr	r3, [pc, #480]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	4b75      	ldr	r3, [pc, #468]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c78:	4a73      	ldr	r2, [pc, #460]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c82:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c96:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca0:	4b69      	ldr	r3, [pc, #420]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cae:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb4:	4a64      	ldr	r2, [pc, #400]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cbe:	4b62      	ldr	r3, [pc, #392]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ccc:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cdc:	4b5a      	ldr	r3, [pc, #360]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf0:	4a55      	ldr	r2, [pc, #340]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cf2:	f043 0310 	orr.w	r3, r3, #16
 8002cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cfa:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <MX_GPIO_Init+0x228>)
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2109      	movs	r1, #9
 8002d0c:	484f      	ldr	r0, [pc, #316]	; (8002e4c <MX_GPIO_Init+0x22c>)
 8002d0e:	f003 febb 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2108      	movs	r1, #8
 8002d16:	484e      	ldr	r0, [pc, #312]	; (8002e50 <MX_GPIO_Init+0x230>)
 8002d18:	f003 feb6 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f244 0101 	movw	r1, #16385	; 0x4001
 8002d22:	484c      	ldr	r0, [pc, #304]	; (8002e54 <MX_GPIO_Init+0x234>)
 8002d24:	f003 feb0 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d2e:	484a      	ldr	r0, [pc, #296]	; (8002e58 <MX_GPIO_Init+0x238>)
 8002d30:	f003 feaa 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2102      	movs	r1, #2
 8002d38:	4848      	ldr	r0, [pc, #288]	; (8002e5c <MX_GPIO_Init+0x23c>)
 8002d3a:	f003 fea5 	bl	8006a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d44:	2300      	movs	r3, #0
 8002d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	4619      	mov	r1, r3
 8002d52:	483e      	ldr	r0, [pc, #248]	; (8002e4c <MX_GPIO_Init+0x22c>)
 8002d54:	f003 fcf0 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002d58:	2309      	movs	r3, #9
 8002d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4837      	ldr	r0, [pc, #220]	; (8002e4c <MX_GPIO_Init+0x22c>)
 8002d70:	f003 fce2 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d74:	2308      	movs	r3, #8
 8002d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4831      	ldr	r0, [pc, #196]	; (8002e50 <MX_GPIO_Init+0x230>)
 8002d8c:	f003 fcd4 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8002d90:	f244 0301 	movw	r3, #16385	; 0x4001
 8002d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	4619      	mov	r1, r3
 8002da8:	482a      	ldr	r0, [pc, #168]	; (8002e54 <MX_GPIO_Init+0x234>)
 8002daa:	f003 fcc5 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8002dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db4:	2301      	movs	r3, #1
 8002db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4824      	ldr	r0, [pc, #144]	; (8002e58 <MX_GPIO_Init+0x238>)
 8002dc8:	f003 fcb6 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	4619      	mov	r1, r3
 8002de0:	481f      	ldr	r0, [pc, #124]	; (8002e60 <MX_GPIO_Init+0x240>)
 8002de2:	f003 fca9 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8002de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002df4:	f107 031c 	add.w	r3, r7, #28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4815      	ldr	r0, [pc, #84]	; (8002e50 <MX_GPIO_Init+0x230>)
 8002dfc:	f003 fc9c 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8002e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8002e12:	230a      	movs	r3, #10
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <MX_GPIO_Init+0x230>)
 8002e1e:	f003 fc8b 	bl	8006738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8002e22:	2302      	movs	r3, #2
 8002e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	4808      	ldr	r0, [pc, #32]	; (8002e5c <MX_GPIO_Init+0x23c>)
 8002e3a:	f003 fc7d 	bl	8006738 <HAL_GPIO_Init>

}
 8002e3e:	bf00      	nop
 8002e40:	3730      	adds	r7, #48	; 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58020800 	.word	0x58020800
 8002e50:	58020000 	.word	0x58020000
 8002e54:	58020400 	.word	0x58020400
 8002e58:	58020c00 	.word	0x58020c00
 8002e5c:	58021000 	.word	0x58021000
 8002e60:	58021800 	.word	0x58021800

08002e64 <print_to_serial>:

/* USER CODE BEGIN 4 */
static void print_to_serial(char *myString)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b09c      	sub	sp, #112	; 0x70
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f013 fbd6 	bl	8016624 <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fa47 	bl	8000310 <strlen>
 8002e82:	4603      	mov	r3, r0
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	f107 010c 	add.w	r1, r7, #12
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	4803      	ldr	r0, [pc, #12]	; (8002e9c <print_to_serial+0x38>)
 8002e90:	f006 ff04 	bl	8009c9c <HAL_UART_Transmit>

}
 8002e94:	bf00      	nop
 8002e96:	3770      	adds	r7, #112	; 0x70
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	24000258 	.word	0x24000258

08002ea0 <Toggle_CAN_Data>:


static void Toggle_CAN_Data(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <Toggle_CAN_Data+0x26>
	{
		myTxData[0] = 0xFF;
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	701a      	strb	r2, [r3, #0]
        myTxData[1] = 0x00;
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	70da      	strb	r2, [r3, #3]
		myTxData[0] = 0x00;
		myTxData[1] = 0xFF;
		myTxData[2] = 0x00;
		myTxData[3] = 0xFF;
	}
}
 8002ec4:	e00b      	b.n	8002ede <Toggle_CAN_Data+0x3e>
		myTxData[0] = 0x00;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <Toggle_CAN_Data+0x48>)
 8002eda:	22ff      	movs	r2, #255	; 0xff
 8002edc:	70da      	strb	r2, [r3, #3]
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	240002e8 	.word	0x240002e8

08002eec <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002ef2:	463b      	mov	r3, r7
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002efe:	f001 f8e5 	bl	80040cc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002f02:	2301      	movs	r3, #1
 8002f04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002f0a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002f0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002f10:	230e      	movs	r3, #14
 8002f12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002f24:	2301      	movs	r3, #1
 8002f26:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002f30:	463b      	mov	r3, r7
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 f902 	bl	800413c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002f38:	2004      	movs	r0, #4
 8002f3a:	f001 f8df 	bl	80040fc <HAL_MPU_Enable>

}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
}
 8002f4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <Error_Handler+0x8>

08002f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_MspInit+0x30>)
 8002f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f5c:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_MspInit+0x30>)
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_MspInit+0x30>)
 8002f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	58024400 	.word	0x58024400

08002f84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0b6      	sub	sp, #216	; 0xd8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	22b4      	movs	r2, #180	; 0xb4
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f013 fadd 	bl	8016564 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <HAL_FDCAN_MspInit+0xe0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d152      	bne.n	800305a <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8002fbe:	2319      	movs	r3, #25
 8002fc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002fce:	23c0      	movs	r3, #192	; 0xc0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002fda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002fde:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 fcf5 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8002ff0:	f7ff ffa9 	bl	8002f46 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_FDCAN_MspInit+0xe4>)
 8002ff6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_FDCAN_MspInit+0xe4>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_FDCAN_MspInit+0xe4>)
 8003006:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_FDCAN_MspInit+0xe4>)
 8003014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_FDCAN_MspInit+0xe4>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_FDCAN_MspInit+0xe4>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003030:	2303      	movs	r3, #3
 8003032:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003048:	2309      	movs	r3, #9
 800304a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800304e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <HAL_FDCAN_MspInit+0xe8>)
 8003056:	f003 fb6f 	bl	8006738 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	37d8      	adds	r7, #216	; 0xd8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	4000a000 	.word	0x4000a000
 8003068:	58024400 	.word	0x58024400
 800306c:	58020c00 	.word	0x58020c00

08003070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0b8      	sub	sp, #224	; 0xe0
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003088:	f107 0318 	add.w	r3, r7, #24
 800308c:	22b4      	movs	r2, #180	; 0xb4
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f013 fa67 	bl	8016564 <memset>
  if(hspi->Instance==SPI1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_SPI_MspInit+0x104>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d165      	bne.n	800316c <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80030a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030aa:	f107 0318 	add.w	r3, r7, #24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fc90 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80030ba:	f7ff ff44 	bl	8002f46 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030c4:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e2:	4a25      	ldr	r2, [pc, #148]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_SPI_MspInit+0x108>)
 80030fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_SPI_MspInit+0x108>)
 8003102:	f043 0308 	orr.w	r3, r3, #8
 8003106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_SPI_MspInit+0x108>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003118:	2320      	movs	r3, #32
 800311a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2302      	movs	r3, #2
 8003120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003130:	2305      	movs	r3, #5
 8003132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800313a:	4619      	mov	r1, r3
 800313c:	480f      	ldr	r0, [pc, #60]	; (800317c <HAL_SPI_MspInit+0x10c>)
 800313e:	f003 fafb 	bl	8006738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800315a:	2305      	movs	r3, #5
 800315c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003160:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003164:	4619      	mov	r1, r3
 8003166:	4806      	ldr	r0, [pc, #24]	; (8003180 <HAL_SPI_MspInit+0x110>)
 8003168:	f003 fae6 	bl	8006738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800316c:	bf00      	nop
 800316e:	37e0      	adds	r7, #224	; 0xe0
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40013000 	.word	0x40013000
 8003178:	58024400 	.word	0x58024400
 800317c:	58020000 	.word	0x58020000
 8003180:	58020c00 	.word	0x58020c00

08003184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_TIM_Base_MspInit+0x3c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_TIM_Base_MspInit+0x40>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800319c:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_TIM_Base_MspInit+0x40>)
 800319e:	f043 0310 	orr.w	r3, r3, #16
 80031a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_TIM_Base_MspInit+0x40>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40001000 	.word	0x40001000
 80031c4:	58024400 	.word	0x58024400

080031c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b0b6      	sub	sp, #216	; 0xd8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	22b4      	movs	r2, #180	; 0xb4
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f013 f9bb 	bl	8016564 <memset>
  if(huart->Instance==USART3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_UART_MspInit+0xc0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d142      	bne.n	800327e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031f8:	2302      	movs	r3, #2
 80031fa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003202:	f107 0310 	add.w	r3, r7, #16
 8003206:	4618      	mov	r0, r3
 8003208:	f004 fbe4 	bl	80079d4 <HAL_RCCEx_PeriphCLKConfig>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003212:	f7ff fe98 	bl	8002f46 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_UART_MspInit+0xc4>)
 800321e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003222:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800322c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <HAL_UART_MspInit+0xc4>)
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800326c:	2307      	movs	r3, #7
 800326e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003272:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003276:	4619      	mov	r1, r3
 8003278:	4805      	ldr	r0, [pc, #20]	; (8003290 <HAL_UART_MspInit+0xc8>)
 800327a:	f003 fa5d 	bl	8006738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800327e:	bf00      	nop
 8003280:	37d8      	adds	r7, #216	; 0xd8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40004800 	.word	0x40004800
 800328c:	58024400 	.word	0x58024400
 8003290:	58020c00 	.word	0x58020c00

08003294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <NMI_Handler+0x4>

0800329a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329e:	e7fe      	b.n	800329e <HardFault_Handler+0x4>

080032a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <MemManage_Handler+0x4>

080032a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <BusFault_Handler+0x4>

080032ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <UsageFault_Handler+0x4>

080032b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e0:	f000 fdb8 	bl	8003e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
	return 1;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <_kill>:

int _kill(int pid, int sig)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <_kill+0x20>)
 8003304:	2216      	movs	r2, #22
 8003306:	601a      	str	r2, [r3, #0]
	return -1;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	24003630 	.word	0x24003630

0800331c <_exit>:

void _exit (int status)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ffe5 	bl	80032f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800332e:	e7fe      	b.n	800332e <_exit+0x12>

08003330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e00a      	b.n	8003358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003342:	f3af 8000 	nop.w
 8003346:	4601      	mov	r1, r0
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	60ba      	str	r2, [r7, #8]
 800334e:	b2ca      	uxtb	r2, r1
 8003350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	dbf0      	blt.n	8003342 <_read+0x12>
	}

return len;
 8003360:	687b      	ldr	r3, [r7, #4]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e009      	b.n	8003390 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	60ba      	str	r2, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3301      	adds	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	dbf1      	blt.n	800337c <_write+0x12>
	}
	return len;
 8003398:	687b      	ldr	r3, [r7, #4]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_close>:

int _close(int file)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
	return -1;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ca:	605a      	str	r2, [r3, #4]
	return 0;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_isatty>:

int _isatty(int file)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	return 1;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
	return 0;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <_sbrk+0x5c>)
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <_sbrk+0x60>)
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <_sbrk+0x64>)
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <_sbrk+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	429a      	cmp	r2, r3
 800343a:	d205      	bcs.n	8003448 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <_sbrk+0x6c>)
 800343e:	220c      	movs	r2, #12
 8003440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	e009      	b.n	800345c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <_sbrk+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <_sbrk+0x64>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	4a06      	ldr	r2, [pc, #24]	; (8003470 <_sbrk+0x64>)
 8003458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	24050000 	.word	0x24050000
 800346c:	00000400 	.word	0x00000400
 8003470:	240000b8 	.word	0x240000b8
 8003474:	24003640 	.word	0x24003640
 8003478:	24003630 	.word	0x24003630

0800347c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <SystemInit+0xd8>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	4a33      	ldr	r2, [pc, #204]	; (8003554 <SystemInit+0xd8>)
 8003488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800348c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <SystemInit+0xdc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2b06      	cmp	r3, #6
 800349a:	d807      	bhi.n	80034ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <SystemInit+0xdc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 030f 	bic.w	r3, r3, #15
 80034a4:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <SystemInit+0xdc>)
 80034a6:	f043 0307 	orr.w	r3, r3, #7
 80034aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <SystemInit+0xe0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2a      	ldr	r2, [pc, #168]	; (800355c <SystemInit+0xe0>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <SystemInit+0xe0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <SystemInit+0xe0>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4926      	ldr	r1, [pc, #152]	; (800355c <SystemInit+0xe0>)
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <SystemInit+0xe4>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <SystemInit+0xdc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <SystemInit+0xdc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 030f 	bic.w	r3, r3, #15
 80034de:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <SystemInit+0xdc>)
 80034e0:	f043 0307 	orr.w	r3, r3, #7
 80034e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <SystemInit+0xe0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <SystemInit+0xe0>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <SystemInit+0xe0>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80034f8:	4b18      	ldr	r3, [pc, #96]	; (800355c <SystemInit+0xe0>)
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <SystemInit+0xe8>)
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <SystemInit+0xe0>)
 8003500:	4a19      	ldr	r2, [pc, #100]	; (8003568 <SystemInit+0xec>)
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003504:	4b15      	ldr	r3, [pc, #84]	; (800355c <SystemInit+0xe0>)
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <SystemInit+0xf0>)
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <SystemInit+0xe0>)
 800350c:	2200      	movs	r2, #0
 800350e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <SystemInit+0xe0>)
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <SystemInit+0xf0>)
 8003514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <SystemInit+0xe0>)
 8003518:	2200      	movs	r2, #0
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <SystemInit+0xe0>)
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <SystemInit+0xf0>)
 8003520:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <SystemInit+0xe0>)
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <SystemInit+0xe0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0b      	ldr	r2, [pc, #44]	; (800355c <SystemInit+0xe0>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <SystemInit+0xe0>)
 8003536:	2200      	movs	r2, #0
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <SystemInit+0xf4>)
 800353c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003540:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <SystemInit+0xd8>)
 8003544:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003548:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800354a:	bf00      	nop
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00
 8003558:	52002000 	.word	0x52002000
 800355c:	58024400 	.word	0x58024400
 8003560:	eaf6ed7f 	.word	0xeaf6ed7f
 8003564:	02020200 	.word	0x02020200
 8003568:	01ff0000 	.word	0x01ff0000
 800356c:	01010280 	.word	0x01010280
 8003570:	52004000 	.word	0x52004000

08003574 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800357a:	f00b fc91 	bl	800eea0 <tcp_new>
 800357e:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <tcp_server_init+0x4c>)
 8003582:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	220a      	movs	r2, #10
 8003588:	4619      	mov	r1, r3
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f00a fbe4 	bl	800dd58 <tcp_bind>
 8003590:	4603      	mov	r3, r0
 8003592:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8003594:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 800359c:	21ff      	movs	r1, #255	; 0xff
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f00a fc92 	bl	800dec8 <tcp_listen_with_backlog>
 80035a4:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 80035a6:	4907      	ldr	r1, [pc, #28]	; (80035c4 <tcp_server_init+0x50>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f00b fcf9 	bl	800efa0 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 80035ae:	e003      	b.n	80035b8 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	2001      	movs	r0, #1
 80035b4:	f008 ffb6 	bl	800c524 <memp_free>
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	c801a8c0 	.word	0xc801a8c0
 80035c4:	080035c9 	.word	0x080035c9

080035c8 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80035d6:	2101      	movs	r1, #1
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f00b fa6f 	bl	800eabc <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 80035de:	200c      	movs	r0, #12
 80035e0:	f008 fda0 	bl	800c124 <mem_malloc>
 80035e4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01f      	beq.n	800362c <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2200      	movs	r2, #0
 80035fc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8003604:	6939      	ldr	r1, [r7, #16]
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f00b fc52 	bl	800eeb0 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 800360c:	490d      	ldr	r1, [pc, #52]	; (8003644 <tcp_server_accept+0x7c>)
 800360e:	68b8      	ldr	r0, [r7, #8]
 8003610:	f00b fc60 	bl	800eed4 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <tcp_server_accept+0x80>)
 8003616:	68b8      	ldr	r0, [r7, #8]
 8003618:	f00b fca0 	bl	800ef5c <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	490b      	ldr	r1, [pc, #44]	; (800364c <tcp_server_accept+0x84>)
 8003620:	68b8      	ldr	r0, [r7, #8]
 8003622:	f00b fcd5 	bl	800efd0 <tcp_poll>

    ret_err = ERR_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
 800362a:	e005      	b.n	8003638 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 800362c:	6939      	ldr	r1, [r7, #16]
 800362e:	68b8      	ldr	r0, [r7, #8]
 8003630:	f000 f965 	bl	80038fe <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8003634:	23ff      	movs	r3, #255	; 0xff
 8003636:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8003638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	08003651 	.word	0x08003651
 8003648:	08003785 	.word	0x08003785
 800364c:	080037a9 	.word	0x080037a9

08003650 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <tcp_server_recv+0x20>
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <tcp_server_recv+0x124>)
 8003666:	22c3      	movs	r2, #195	; 0xc3
 8003668:	4943      	ldr	r1, [pc, #268]	; (8003778 <tcp_server_recv+0x128>)
 800366a:	4844      	ldr	r0, [pc, #272]	; (800377c <tcp_server_recv+0x12c>)
 800366c:	f012 ff82 	bl	8016574 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2203      	movs	r2, #3
 800367e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	68b8      	ldr	r0, [r7, #8]
 800368c:	f000 f937 	bl	80038fe <tcp_server_connection_close>
 8003690:	e007      	b.n	80036a2 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8003692:	493b      	ldr	r1, [pc, #236]	; (8003780 <tcp_server_recv+0x130>)
 8003694:	68b8      	ldr	r0, [r7, #8]
 8003696:	f00b fc3f 	bl	800ef18 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800369a:	69b9      	ldr	r1, [r7, #24]
 800369c:	68b8      	ldr	r0, [r7, #8]
 800369e:	f000 f8db 	bl	8003858 <tcp_server_send>
    }
    ret_err = ERR_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e05f      	b.n	8003768 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80036a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f009 fda7 	bl	800d210 <pbuf_free>
    }
    ret_err = err;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e04f      	b.n	8003768 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d110      	bne.n	80036f2 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2202      	movs	r2, #2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 80036dc:	4928      	ldr	r1, [pc, #160]	; (8003780 <tcp_server_recv+0x130>)
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	f00b fc1a 	bl	800ef18 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f000 f930 	bl	800394c <tcp_server_handle>

    ret_err = ERR_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e03a      	b.n	8003768 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d115      	bne.n	8003726 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f000 f91e 	bl	800394c <tcp_server_handle>
 8003710:	e006      	b.n	8003720 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f009 fe90 	bl	800d440 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e020      	b.n	8003768 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d10e      	bne.n	800374c <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	891b      	ldrh	r3, [r3, #8]
 8003732:	4619      	mov	r1, r3
 8003734:	68b8      	ldr	r0, [r7, #8]
 8003736:	f00a fcdd 	bl	800e0f4 <tcp_recved>
    es->p = NULL;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f009 fd65 	bl	800d210 <pbuf_free>
    ret_err = ERR_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e00d      	b.n	8003768 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	891b      	ldrh	r3, [r3, #8]
 8003750:	4619      	mov	r1, r3
 8003752:	68b8      	ldr	r0, [r7, #8]
 8003754:	f00a fcce 	bl	800e0f4 <tcp_recved>
    es->p = NULL;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f009 fd56 	bl	800d210 <pbuf_free>
    ret_err = ERR_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8003768:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	08017634 	.word	0x08017634
 8003778:	08017650 	.word	0x08017650
 800377c:	0801765c 	.word	0x0801765c
 8003780:	08003809 	.word	0x08003809

08003784 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f008 fb5c 	bl	800be58 <mem_free>
  }
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d017      	beq.n	80037ec <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 80037c4:	490f      	ldr	r1, [pc, #60]	; (8003804 <tcp_server_poll+0x5c>)
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	f00b fba6 	bl	800ef18 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f000 f842 	bl	8003858 <tcp_server_send>
 80037d4:	e007      	b.n	80037e6 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d103      	bne.n	80037e6 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	6838      	ldr	r0, [r7, #0]
 80037e2:	f000 f88c 	bl	80038fe <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e004      	b.n	80037f6 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	f00a faa7 	bl	800dd40 <tcp_abort>
    ret_err = ERR_ABRT;
 80037f2:	23f3      	movs	r3, #243	; 0xf3
 80037f4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80037f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08003809 	.word	0x08003809

08003808 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8003828:	490a      	ldr	r1, [pc, #40]	; (8003854 <tcp_server_sent+0x4c>)
 800382a:	68b8      	ldr	r0, [r7, #8]
 800382c:	f00b fb74 	bl	800ef18 <tcp_sent>
    tcp_server_send(tpcb, es);
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	68b8      	ldr	r0, [r7, #8]
 8003834:	f000 f810 	bl	8003858 <tcp_server_send>
 8003838:	e007      	b.n	800384a <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d103      	bne.n	800384a <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f000 f85a 	bl	80038fe <tcp_server_connection_close>
  }
  return ERR_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	08003809 	.word	0x08003809

08003858 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8003866:	e036      	b.n	80038d6 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	895a      	ldrh	r2, [r3, #10]
 8003876:	2301      	movs	r3, #1
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f00e fa57 	bl	8011d2c <tcp_write>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8003882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11d      	bne.n	80038c6 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	895b      	ldrh	r3, [r3, #10]
 800388e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f009 fd53 	bl	800d350 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80038aa:	6938      	ldr	r0, [r7, #16]
 80038ac:	f009 fcb0 	bl	800d210 <pbuf_free>
 80038b0:	4603      	mov	r3, r0
 80038b2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 80038b4:	7b7b      	ldrb	r3, [r7, #13]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f7      	beq.n	80038aa <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f00a fc18 	bl	800e0f4 <tcp_recved>
 80038c4:	e007      	b.n	80038d6 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80038c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d102      	bne.n	80038d6 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80038d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	895a      	ldrh	r2, [r3, #10]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d9b8      	bls.n	8003868 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8003908:	2100      	movs	r1, #0
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f00b fad0 	bl	800eeb0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8003910:	2100      	movs	r1, #0
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f00b fb00 	bl	800ef18 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f00b fada 	bl	800eed4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8003920:	2100      	movs	r1, #0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f00b fb1a 	bl	800ef5c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2100      	movs	r1, #0
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f00b fb4f 	bl	800efd0 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f008 fa8d 	bl	800be58 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f00a f914 	bl	800db6c <tcp_close>
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b0a0      	sub	sp, #128	; 0x80
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8b1b      	ldrh	r3, [r3, #24]
 8003964:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8003968:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800396c:	4618      	mov	r0, r3
 800396e:	f011 fe19 	bl	80155a4 <ip4addr_ntoa>
 8003972:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800397a:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003982:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800398a:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f012 fde5 	bl	8016564 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	891b      	ldrh	r3, [r3, #8]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	4618      	mov	r0, r3
 80039ae:	f012 fe41 	bl	8016634 <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	891b      	ldrh	r3, [r3, #8]
 80039be:	461a      	mov	r2, r3
 80039c0:	4824      	ldr	r0, [pc, #144]	; (8003a54 <tcp_server_handle+0x108>)
 80039c2:	f012 fe37 	bl	8016634 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fc fca0 	bl	8000310 <strlen>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	4413      	add	r3, r2
 80039da:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <tcp_server_handle+0x10c>)
 80039dc:	461d      	mov	r5, r3
 80039de:	4614      	mov	r4, r2
 80039e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e2:	6028      	str	r0, [r5, #0]
 80039e4:	6069      	str	r1, [r5, #4]
 80039e6:	60aa      	str	r2, [r5, #8]
 80039e8:	60eb      	str	r3, [r5, #12]
 80039ea:	cc03      	ldmia	r4!, {r0, r1}
 80039ec:	6128      	str	r0, [r5, #16]
 80039ee:	6169      	str	r1, [r5, #20]
 80039f0:	7823      	ldrb	r3, [r4, #0]
 80039f2:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 80039f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f107 020c 	add.w	r2, r7, #12
 80039fc:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	891a      	ldrh	r2, [r3, #8]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	895b      	ldrh	r3, [r3, #10]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b29c      	uxth	r4, r3
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fc7c 	bl	8000310 <strlen>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4422      	add	r2, r4
 8003a22:	b292      	uxth	r2, r2
 8003a24:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fc70 	bl	8000310 <strlen>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	b292      	uxth	r2, r2
 8003a38:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8003a3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff0b 	bl	8003858 <tcp_server_send>

	pbuf_free(es->p);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f009 fbe2 	bl	800d210 <pbuf_free>

}
 8003a4c:	bf00      	nop
 8003a4e:	3780      	adds	r7, #128	; 0x80
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}
 8003a54:	240004c4 	.word	0x240004c4
 8003a58:	08017684 	.word	0x08017684

08003a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a60:	f7ff fd0c 	bl	800347c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a64:	480c      	ldr	r0, [pc, #48]	; (8003a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a66:	490d      	ldr	r1, [pc, #52]	; (8003a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a68:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a6c:	e002      	b.n	8003a74 <LoopCopyDataInit>

08003a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a72:	3304      	adds	r3, #4

08003a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a78:	d3f9      	bcc.n	8003a6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a7c:	4c0a      	ldr	r4, [pc, #40]	; (8003aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a80:	e001      	b.n	8003a86 <LoopFillZerobss>

08003a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a84:	3204      	adds	r2, #4

08003a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a88:	d3fb      	bcc.n	8003a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a8a:	f012 fd2b 	bl	80164e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8e:	f7fe fd97 	bl	80025c0 <main>
  bx  lr
 8003a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a94:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003a98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a9c:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8003aa0:	0801b130 	.word	0x0801b130
  ldr r2, =_sbss
 8003aa4:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8003aa8:	24003640 	.word	0x24003640

08003aac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aac:	e7fe      	b.n	8003aac <ADC3_IRQHandler>

08003aae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <LAN8742_RegisterBusIO+0x28>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <LAN8742_RegisterBusIO+0x28>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <LAN8742_RegisterBusIO+0x28>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e014      	b.n	8003b06 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d17c      	bne.n	8003c2c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e01c      	b.n	8003b86 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f107 0208 	add.w	r2, r7, #8
 8003b54:	2112      	movs	r1, #18
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	4798      	blx	r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da03      	bge.n	8003b68 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003b60:	f06f 0304 	mvn.w	r3, #4
 8003b64:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003b66:	e00b      	b.n	8003b80 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d105      	bne.n	8003b80 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
         break;
 8003b7e:	e005      	b.n	8003b8c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3301      	adds	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b1f      	cmp	r3, #31
 8003b8a:	d9df      	bls.n	8003b4c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b1f      	cmp	r3, #31
 8003b92:	d902      	bls.n	8003b9a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003b94:	f06f 0302 	mvn.w	r3, #2
 8003b98:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d145      	bne.n	8003c2c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6810      	ldr	r0, [r2, #0]
 8003ba8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bac:	2100      	movs	r1, #0
 8003bae:	4798      	blx	r3
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	db37      	blt.n	8003c26 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6810      	ldr	r0, [r2, #0]
 8003bbe:	f107 0208 	add.w	r2, r7, #8
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4798      	blx	r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db28      	blt.n	8003c1e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4798      	blx	r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003bd6:	e01c      	b.n	8003c12 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	4798      	blx	r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bea:	d80e      	bhi.n	8003c0a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6810      	ldr	r0, [r2, #0]
 8003bf4:	f107 0208 	add.w	r2, r7, #8
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4798      	blx	r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da07      	bge.n	8003c12 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003c02:	f06f 0304 	mvn.w	r3, #4
 8003c06:	613b      	str	r3, [r7, #16]
                 break;
 8003c08:	e010      	b.n	8003c2c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003c0a:	f06f 0301 	mvn.w	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
               break;
 8003c10:	e00c      	b.n	8003c2c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1dd      	bne.n	8003bd8 <LAN8742_Init+0xc6>
 8003c1c:	e006      	b.n	8003c2c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003c1e:	f06f 0304 	mvn.w	r3, #4
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e002      	b.n	8003c2c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003c26:	f06f 0303 	mvn.w	r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d112      	bne.n	8003c58 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	4798      	blx	r3
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003c3c:	bf00      	nop
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	4798      	blx	r3
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c50:	d9f5      	bls.n	8003c3e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003c58:	693b      	ldr	r3, [r7, #16]
 }
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6810      	ldr	r0, [r2, #0]
 8003c76:	f107 020c 	add.w	r2, r7, #12
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4798      	blx	r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da02      	bge.n	8003c8a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003c84:	f06f 0304 	mvn.w	r3, #4
 8003c88:	e06e      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6810      	ldr	r0, [r2, #0]
 8003c92:	f107 020c 	add.w	r2, r7, #12
 8003c96:	2101      	movs	r1, #1
 8003c98:	4798      	blx	r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	da02      	bge.n	8003ca6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003ca0:	f06f 0304 	mvn.w	r3, #4
 8003ca4:	e060      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e059      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6810      	ldr	r0, [r2, #0]
 8003cbc:	f107 020c 	add.w	r2, r7, #12
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4798      	blx	r3
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da02      	bge.n	8003cd0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cca:	f06f 0304 	mvn.w	r3, #4
 8003cce:	e04b      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11b      	bne.n	8003d12 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <LAN8742_GetLinkState+0x90>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e03a      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e033      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	e02c      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e02a      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6810      	ldr	r0, [r2, #0]
 8003d1a:	f107 020c 	add.w	r2, r7, #12
 8003d1e:	211f      	movs	r1, #31
 8003d20:	4798      	blx	r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	da02      	bge.n	8003d2e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003d28:	f06f 0304 	mvn.w	r3, #4
 8003d2c:	e01c      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003d38:	2306      	movs	r3, #6
 8003d3a:	e015      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 031c 	and.w	r3, r3, #28
 8003d42:	2b18      	cmp	r3, #24
 8003d44:	d101      	bne.n	8003d4a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d46:	2302      	movs	r3, #2
 8003d48:	e00e      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 031c 	and.w	r3, r3, #28
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d101      	bne.n	8003d58 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e007      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 031c 	and.w	r3, r3, #28
 8003d5e:	2b14      	cmp	r3, #20
 8003d60:	d101      	bne.n	8003d66 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d62:	2304      	movs	r3, #4
 8003d64:	e000      	b.n	8003d68 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d66:	2305      	movs	r3, #5
    }				
  }
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d76:	2003      	movs	r0, #3
 8003d78:	f000 f976 	bl	8004068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d7c:	f003 fc54 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_Init+0x68>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	4913      	ldr	r1, [pc, #76]	; (8003ddc <HAL_Init+0x6c>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
 8003d98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_Init+0x68>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_Init+0x6c>)
 8003da4:	5cd3      	ldrb	r3, [r2, r3]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	4a0b      	ldr	r2, [pc, #44]	; (8003de0 <HAL_Init+0x70>)
 8003db2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003db4:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <HAL_Init+0x74>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 f814 	bl	8003de8 <HAL_InitTick>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e002      	b.n	8003dd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dca:	f7ff f8c1 	bl	8002f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	58024400 	.word	0x58024400
 8003ddc:	0801ae9c 	.word	0x0801ae9c
 8003de0:	2400000c 	.word	0x2400000c
 8003de4:	24000008 	.word	0x24000008

08003de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_InitTick+0x60>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e021      	b.n	8003e40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_InitTick+0x64>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_InitTick+0x60>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f94d 	bl	80040b2 <HAL_SYSTICK_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e00e      	b.n	8003e40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b0f      	cmp	r3, #15
 8003e26:	d80a      	bhi.n	8003e3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	f000 f925 	bl	800407e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e34:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <HAL_InitTick+0x68>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	24000014 	.word	0x24000014
 8003e4c:	24000008 	.word	0x24000008
 8003e50:	24000010 	.word	0x24000010

08003e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_IncTick+0x20>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_IncTick+0x24>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4413      	add	r3, r2
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <HAL_IncTick+0x24>)
 8003e66:	6013      	str	r3, [r2, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	24000014 	.word	0x24000014
 8003e78:	24000528 	.word	0x24000528

08003e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_GetTick+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	24000528 	.word	0x24000528

08003e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e9c:	f7ff ffee 	bl	8003e7c <HAL_GetTick>
 8003ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d005      	beq.n	8003eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_Delay+0x44>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eba:	bf00      	nop
 8003ebc:	f7ff ffde 	bl	8003e7c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d8f7      	bhi.n	8003ebc <HAL_Delay+0x28>
  {
  }
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	24000014 	.word	0x24000014

08003edc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	58000400 	.word	0x58000400

08003f04 <__NVIC_SetPriorityGrouping>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f20:	4013      	ands	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <__NVIC_SetPriorityGrouping+0x44>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00
 8003f48:	05fa0000 	.word	0x05fa0000

08003f4c <__NVIC_GetPriorityGrouping>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <__NVIC_GetPriorityGrouping+0x18>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0307 	and.w	r3, r3, #7
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_SetPriority>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6039      	str	r1, [r7, #0]
 8003f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	db0a      	blt.n	8003f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	490c      	ldr	r1, [pc, #48]	; (8003fb4 <__NVIC_SetPriority+0x4c>)
 8003f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f86:	0112      	lsls	r2, r2, #4
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f90:	e00a      	b.n	8003fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4908      	ldr	r1, [pc, #32]	; (8003fb8 <__NVIC_SetPriority+0x50>)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	3b04      	subs	r3, #4
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	761a      	strb	r2, [r3, #24]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000e100 	.word	0xe000e100
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <NVIC_EncodePriority>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f1c3 0307 	rsb	r3, r3, #7
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	bf28      	it	cs
 8003fda:	2304      	movcs	r3, #4
 8003fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d902      	bls.n	8003fec <NVIC_EncodePriority+0x30>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3b03      	subs	r3, #3
 8003fea:	e000      	b.n	8003fee <NVIC_EncodePriority+0x32>
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	401a      	ands	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004004:	f04f 31ff 	mov.w	r1, #4294967295
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	43d9      	mvns	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004014:	4313      	orrs	r3, r2
}
 8004016:	4618      	mov	r0, r3
 8004018:	3724      	adds	r7, #36	; 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004034:	d301      	bcc.n	800403a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004036:	2301      	movs	r3, #1
 8004038:	e00f      	b.n	800405a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800403a:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <SysTick_Config+0x40>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004042:	210f      	movs	r1, #15
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	f7ff ff8e 	bl	8003f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <SysTick_Config+0x40>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <SysTick_Config+0x40>)
 8004054:	2207      	movs	r2, #7
 8004056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	e000e010 	.word	0xe000e010

08004068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff47 	bl	8003f04 <__NVIC_SetPriorityGrouping>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800408c:	f7ff ff5e 	bl	8003f4c <__NVIC_GetPriorityGrouping>
 8004090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f7ff ff90 	bl	8003fbc <NVIC_EncodePriority>
 800409c:	4602      	mov	r2, r0
 800409e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff5f 	bl	8003f68 <__NVIC_SetPriority>
}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ffb2 	bl	8004024 <SysTick_Config>
 80040c0:	4603      	mov	r3, r0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80040d0:	f3bf 8f5f 	dmb	sy
}
 80040d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_MPU_Disable+0x28>)
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <HAL_MPU_Disable+0x28>)
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_MPU_Disable+0x2c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	e000ed00 	.word	0xe000ed00
 80040f8:	e000ed90 	.word	0xe000ed90

080040fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004104:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <HAL_MPU_Enable+0x38>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_MPU_Enable+0x3c>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <HAL_MPU_Enable+0x3c>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800411a:	f3bf 8f4f 	dsb	sy
}
 800411e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004120:	f3bf 8f6f 	isb	sy
}
 8004124:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	e000ed90 	.word	0xe000ed90
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	785a      	ldrb	r2, [r3, #1]
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_MPU_ConfigRegion+0x84>)
 800414a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d029      	beq.n	80041a8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004154:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_MPU_ConfigRegion+0x84>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7b1b      	ldrb	r3, [r3, #12]
 8004160:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7adb      	ldrb	r3, [r3, #11]
 8004166:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004168:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7a9b      	ldrb	r3, [r3, #10]
 800416e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004170:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7b5b      	ldrb	r3, [r3, #13]
 8004176:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004178:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7b9b      	ldrb	r3, [r3, #14]
 800417e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004180:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	7bdb      	ldrb	r3, [r3, #15]
 8004186:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004188:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7a5b      	ldrb	r3, [r3, #9]
 800418e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004190:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7a1b      	ldrb	r3, [r3, #8]
 8004196:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004198:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041a2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041a4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80041a6:	e005      	b.n	80041b4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_MPU_ConfigRegion+0x84>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80041ae:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <HAL_MPU_ConfigRegion+0x84>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed90 	.word	0xe000ed90

080041c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0c6      	b.n	8004364 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f007 f844 	bl	800b26c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2223      	movs	r2, #35	; 0x23
 80041e8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ea:	4b60      	ldr	r3, [pc, #384]	; (800436c <HAL_ETH_Init+0x1a8>)
 80041ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041f0:	4a5e      	ldr	r2, [pc, #376]	; (800436c <HAL_ETH_Init+0x1a8>)
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <HAL_ETH_Init+0x1a8>)
 80041fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7a1b      	ldrb	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004210:	2000      	movs	r0, #0
 8004212:	f7ff fe63 	bl	8003edc <HAL_SYSCFG_ETHInterfaceSelect>
 8004216:	e003      	b.n	8004220 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004218:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800421c:	f7ff fe5e 	bl	8003edc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004238:	f7ff fe20 	bl	8003e7c <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800423e:	e00f      	b.n	8004260 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004240:	f7ff fe1c 	bl	8003e7c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800424e:	d907      	bls.n	8004260 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2204      	movs	r2, #4
 8004254:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	22e0      	movs	r2, #224	; 0xe0
 800425a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e081      	b.n	8004364 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f001 f95c 	bl	8005530 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004278:	f003 fb50 	bl	800791c <HAL_RCC_GetHCLKFreq>
 800427c:	4603      	mov	r3, r0
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_ETH_Init+0x1ac>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	0c9a      	lsrs	r2, r3, #18
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3a01      	subs	r2, #1
 800428c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 f8af 	bl	80053f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80042ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80042b0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	22e0      	movs	r2, #224	; 0xe0
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e04a      	b.n	8004364 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f241 1308 	movw	r3, #4360	; 0x1108
 80042d6:	4413      	add	r3, r2
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_ETH_Init+0x1b0>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6952      	ldr	r2, [r2, #20]
 80042e2:	0052      	lsls	r2, r2, #1
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	6809      	ldr	r1, [r1, #0]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80042ee:	440b      	add	r3, r1
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 f974 	bl	80055e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f001 f9b8 	bl	800566e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	3305      	adds	r3, #5
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	021a      	lsls	r2, r3, #8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	4619      	mov	r1, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	3303      	adds	r3, #3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	061a      	lsls	r2, r3, #24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	3302      	adds	r3, #2
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800433c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800434a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800434c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2210      	movs	r2, #16
 800435a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2210      	movs	r2, #16
 8004360:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	58024400 	.word	0x58024400
 8004370:	431bde83 	.word	0x431bde83
 8004374:	ffff8001 	.word	0xffff8001

08004378 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3310      	adds	r3, #16
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_ETH_DescAssignMemory+0x28>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d904      	bls.n	80043aa <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e021      	b.n	80043ee <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004406:	2b10      	cmp	r3, #16
 8004408:	d14c      	bne.n	80044a4 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2223      	movs	r2, #35	; 0x23
 800440e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0202 	orr.w	r2, r2, #2
 800441e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	f241 1304 	movw	r3, #4356	; 0x1104
 800444c:	4413      	add	r3, r2
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6811      	ldr	r1, [r2, #0]
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	f241 1304 	movw	r3, #4356	; 0x1104
 800445c:	440b      	add	r3, r1
 800445e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	f241 1308 	movw	r3, #4360	; 0x1108
 8004468:	4413      	add	r3, r2
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6811      	ldr	r1, [r2, #0]
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	f241 1308 	movw	r3, #4360	; 0x1108
 8004478:	440b      	add	r3, r1
 800447a:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800448e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004492:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2210      	movs	r2, #16
 8004498:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2222      	movs	r2, #34	; 0x22
 800449e:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d040      	beq.n	8004544 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2223      	movs	r2, #35	; 0x23
 80044c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f241 1304 	movw	r3, #4356	; 0x1104
 80044d0:	4413      	add	r3, r2
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6811      	ldr	r1, [r2, #0]
 80044d8:	f023 0201 	bic.w	r2, r3, #1
 80044dc:	f241 1304 	movw	r3, #4356	; 0x1104
 80044e0:	440b      	add	r3, r1
 80044e2:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	f241 1308 	movw	r3, #4360	; 0x1108
 80044ec:	4413      	add	r3, r2
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6811      	ldr	r1, [r2, #0]
 80044f4:	f023 0201 	bic.w	r2, r3, #1
 80044f8:	f241 1308 	movw	r3, #4360	; 0x1108
 80044fc:	440b      	add	r3, r1
 80044fe:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0202 	bic.w	r2, r2, #2
 8004532:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2210      	movs	r2, #16
 8004538:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2210      	movs	r2, #16
 800453e:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e073      	b.n	800465c <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004578:	2b10      	cmp	r3, #16
 800457a:	d16e      	bne.n	800465a <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800457c:	2200      	movs	r2, #0
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f001 f8d1 	bl	8005728 <ETH_Prepare_Tx_Descriptors>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	f043 0202 	orr.w	r2, r3, #2
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e05f      	b.n	800465c <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3206      	adds	r2, #6
 80045a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a8:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d904      	bls.n	80045c6 <HAL_ETH_Transmit+0x74>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	1f1a      	subs	r2, r3, #4
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	3106      	adds	r1, #6
 80045d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80045d6:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80045da:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80045dc:	f7ff fc4e 	bl	8003e7c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80045e2:	e034      	b.n	800464e <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f043 0208 	orr.w	r2, r3, #8
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	22e0      	movs	r2, #224	; 0xe0
 8004614:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e020      	b.n	800465c <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d015      	beq.n	800464e <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8004622:	f7ff fc2b 	bl	8003e7c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <HAL_ETH_Transmit+0xe6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463c:	f043 0204 	orr.w	r2, r3, #4
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	22e0      	movs	r2, #224	; 0xe0
 8004648:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e006      	b.n	800465c <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	dbc6      	blt.n	80045e4 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	; 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3344      	adds	r3, #68	; 0x44
 8004670:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d06b      	beq.n	800476e <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8004696:	2300      	movs	r3, #0
 8004698:	e0ce      	b.n	8004838 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	3301      	adds	r3, #1
 800469e:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d036      	beq.n	800471a <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3301      	adds	r3, #1
 80046b0:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d902      	bls.n	80046ce <HAL_ETH_IsRxDataAvailable+0x6a>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3b04      	subs	r3, #4
 80046cc:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d6:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	db11      	blt.n	8004704 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2201      	movs	r2, #1
 80046f0:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d902      	bls.n	8004704 <HAL_ETH_IsRxDataAvailable+0xa0>
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3b04      	subs	r3, #4
 8004702:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8004716:	2301      	movs	r3, #1
 8004718:	e08e      	b.n	8004838 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d012      	beq.n	800474c <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800472a:	2301      	movs	r3, #1
 800472c:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3301      	adds	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d902      	bls.n	8004740 <HAL_ETH_IsRxDataAvailable+0xdc>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3b04      	subs	r3, #4
 800473e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e010      	b.n	800476e <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	3301      	adds	r3, #1
 8004750:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d902      	bls.n	8004764 <HAL_ETH_IsRxDataAvailable+0x100>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3b04      	subs	r3, #4
 8004762:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476c:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	db02      	blt.n	800477c <HAL_ETH_IsRxDataAvailable+0x118>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d98e      	bls.n	800469a <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d056      	beq.n	8004830 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479a:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e03b      	b.n	800481a <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047b0:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d20d      	bcs.n	8004814 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d902      	bls.n	800480a <HAL_ETH_IsRxDataAvailable+0x1a6>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3b04      	subs	r3, #4
 8004808:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004812:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3301      	adds	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	d3bf      	bcc.n	80047a2 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	f241 1328 	movw	r3, #4392	; 0x1128
 800482c:	440b      	add	r3, r1
 800482e:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	619a      	str	r2, [r3, #24]

  return 0;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3724      	adds	r7, #36	; 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3344      	adds	r3, #68	; 0x44
 8004852:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e07d      	b.n	8004978 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff feed 	bl	8004664 <HAL_ETH_IsRxDataAvailable>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e071      	b.n	8004978 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a2:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	e031      	b.n	800490e <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	461a      	mov	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	461a      	mov	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80048e4:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	3301      	adds	r3, #1
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d902      	bls.n	80048f8 <HAL_ETH_GetRxDataBuffer+0xb4>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	3b04      	subs	r3, #4
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004900:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	3301      	adds	r3, #1
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	3b01      	subs	r3, #1
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3c7      	bcc.n	80048aa <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	461a      	mov	r2, r3
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	429a      	cmp	r2, r3
 800493a:	d803      	bhi.n	8004944 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	e018      	b.n	8004976 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	461a      	mov	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	e001      	b.n	8004976 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3728      	adds	r7, #40	; 0x28
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3344      	adds	r3, #68	; 0x44
 800498e:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fe60 	bl	8004664 <HAL_ETH_IsRxDataAvailable>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e017      	b.n	80049de <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	3b01      	subs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d902      	bls.n	80049c6 <HAL_ETH_GetRxDataLength+0x46>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3b04      	subs	r3, #4
 80049c4:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ce:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b089      	sub	sp, #36	; 0x24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3344      	adds	r3, #68	; 0x44
 80049f2:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a02:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e057      	b.n	8004ac6 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3301      	adds	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	e03b      	b.n	8004aa2 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a38:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d20d      	bcs.n	8004a9c <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d902      	bls.n	8004a92 <HAL_ETH_BuildRxDescriptors+0xac>
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3b04      	subs	r3, #4
 8004a90:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d3bf      	bcc.n	8004a2a <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	f241 1328 	movw	r3, #4392	; 0x1128
 8004ab4:	440b      	add	r3, r1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3724      	adds	r7, #36	; 0x24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e03e      	b.n	8004b72 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004afc:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	055b      	lsls	r3, r3, #21
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f043 030c 	orr.w	r3, r3, #12
 8004b20:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004b34:	f7ff f9a2 	bl	8003e7c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b3a:	e009      	b.n	8004b50 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004b3c:	f7ff f99e 	bl	8003e7c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b4a:	d901      	bls.n	8004b50 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e010      	b.n	8004b72 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ed      	bne.n	8004b3c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e03c      	b.n	8004c18 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ba6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	055b      	lsls	r3, r3, #21
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 030c 	bic.w	r3, r3, #12
 8004bca:	f043 0304 	orr.w	r3, r3, #4
 8004bce:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_ETH_WritePHYRegister+0xa4>)
 8004bde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004be2:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <HAL_ETH_WritePHYRegister+0xa4>)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004bea:	f7ff f947 	bl	8003e7c <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004bf0:	e009      	b.n	8004c06 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004bf2:	f7ff f943 	bl	8003e7c <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c00:	d901      	bls.n	8004c06 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e008      	b.n	8004c18 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ed      	bne.n	8004bf2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40028000 	.word	0x40028000

08004c24 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e1c3      	b.n	8004fc0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 020c 	and.w	r2, r3, #12
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf14      	ite	ne
 8004c9a:	2301      	movne	r3, #1
 8004c9c:	2300      	moveq	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	0e5b      	lsrs	r3, r3, #25
 8004e82:	f003 021f 	and.w	r2, r3, #31
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bf0c      	ite	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	2300      	movne	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bf14      	ite	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	2300      	moveq	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f4c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f5c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf14      	ite	ne
 8004f92:	2301      	movne	r3, #1
 8004f94:	2300      	moveq	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e00a      	b.n	8004ff6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d105      	bne.n	8004ff4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f860 	bl	80050b0 <ETH_SetMACConfig>

    return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005010:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005018:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800501a:	f002 fc7f 	bl	800791c <HAL_RCC_GetHCLKFreq>
 800501e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d908      	bls.n	800503a <HAL_ETH_SetMDIOClockRange+0x3a>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d804      	bhi.n	800503a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e027      	b.n	800508a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d908      	bls.n	8005054 <HAL_ETH_SetMDIOClockRange+0x54>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d204      	bcs.n	8005054 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e01a      	b.n	800508a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d303      	bcc.n	8005064 <HAL_ETH_SetMDIOClockRange+0x64>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d911      	bls.n	8005088 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d908      	bls.n	800507e <HAL_ETH_SetMDIOClockRange+0x7e>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <HAL_ETH_SetMDIOClockRange+0xac>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d804      	bhi.n	800507e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e005      	b.n	800508a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e000      	b.n	800508a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005088:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	01312cff 	.word	0x01312cff
 80050a0:	02160ebf 	.word	0x02160ebf
 80050a4:	03938700 	.word	0x03938700
 80050a8:	05f5e0ff 	.word	0x05f5e0ff
 80050ac:	08f0d17f 	.word	0x08f0d17f

080050b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80050c2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	791b      	ldrb	r3, [r3, #4]
 80050c8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80050ca:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	7b1b      	ldrb	r3, [r3, #12]
 80050d0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050d2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	7b5b      	ldrb	r3, [r3, #13]
 80050d8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050da:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	7b9b      	ldrb	r3, [r3, #14]
 80050e0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	7bdb      	ldrb	r3, [r3, #15]
 80050e8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050ea:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	7c12      	ldrb	r2, [r2, #16]
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	d102      	bne.n	80050fa <ETH_SetMACConfig+0x4a>
 80050f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050f8:	e000      	b.n	80050fc <ETH_SetMACConfig+0x4c>
 80050fa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050fc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	7c52      	ldrb	r2, [r2, #17]
 8005102:	2a00      	cmp	r2, #0
 8005104:	d102      	bne.n	800510c <ETH_SetMACConfig+0x5c>
 8005106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800510a:	e000      	b.n	800510e <ETH_SetMACConfig+0x5e>
 800510c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800510e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	7c9b      	ldrb	r3, [r3, #18]
 8005114:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005116:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800511c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005122:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	7f1b      	ldrb	r3, [r3, #28]
 8005128:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800512a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	7f5b      	ldrb	r3, [r3, #29]
 8005130:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005132:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	7f92      	ldrb	r2, [r2, #30]
 8005138:	2a00      	cmp	r2, #0
 800513a:	d102      	bne.n	8005142 <ETH_SetMACConfig+0x92>
 800513c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005140:	e000      	b.n	8005144 <ETH_SetMACConfig+0x94>
 8005142:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005144:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	7fdb      	ldrb	r3, [r3, #31]
 800514a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800514c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005154:	2a00      	cmp	r2, #0
 8005156:	d102      	bne.n	800515e <ETH_SetMACConfig+0xae>
 8005158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800515c:	e000      	b.n	8005160 <ETH_SetMACConfig+0xb0>
 800515e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005160:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005166:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800516e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005170:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b56      	ldr	r3, [pc, #344]	; (80052dc <ETH_SetMACConfig+0x22c>)
 8005182:	4013      	ands	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	430b      	orrs	r3, r1
 800518c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800519a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800519c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80051a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051ae:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80051b0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d102      	bne.n	80051c2 <ETH_SetMACConfig+0x112>
 80051bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051c0:	e000      	b.n	80051c4 <ETH_SetMACConfig+0x114>
 80051c2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051c4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <ETH_SetMACConfig+0x230>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	430b      	orrs	r3, r1
 80051e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	4b3a      	ldr	r3, [pc, #232]	; (80052e4 <ETH_SetMACConfig+0x234>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	430b      	orrs	r3, r1
 8005204:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800520c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005212:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800521a:	2a00      	cmp	r2, #0
 800521c:	d101      	bne.n	8005222 <ETH_SetMACConfig+0x172>
 800521e:	2280      	movs	r2, #128	; 0x80
 8005220:	e000      	b.n	8005224 <ETH_SetMACConfig+0x174>
 8005222:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005224:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005236:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800523a:	4013      	ands	r3, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	430b      	orrs	r3, r1
 8005244:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800524c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005254:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f023 0103 	bic.w	r1, r3, #3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	430a      	orrs	r2, r1
 800526e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800527a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005296:	2a00      	cmp	r2, #0
 8005298:	d101      	bne.n	800529e <ETH_SetMACConfig+0x1ee>
 800529a:	2240      	movs	r2, #64	; 0x40
 800529c:	e000      	b.n	80052a0 <ETH_SetMACConfig+0x1f0>
 800529e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80052a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80052aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80052b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80052c0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80052d0:	bf00      	nop
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	00048083 	.word	0x00048083
 80052e0:	c0f88000 	.word	0xc0f88000
 80052e4:	fffffef0 	.word	0xfffffef0

080052e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <ETH_SetDMAConfig+0xf8>)
 80052fe:	4013      	ands	r3, r2
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	6809      	ldr	r1, [r1, #0]
 8005308:	431a      	orrs	r2, r3
 800530a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800530e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	791b      	ldrb	r3, [r3, #4]
 8005314:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800531a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	7b1b      	ldrb	r3, [r3, #12]
 8005320:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	f241 0304 	movw	r3, #4100	; 0x1004
 800532e:	4413      	add	r3, r2
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <ETH_SetDMAConfig+0xfc>)
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	431a      	orrs	r2, r3
 800533e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005342:	440b      	add	r3, r1
 8005344:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	7b5b      	ldrb	r3, [r3, #13]
 800534a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <ETH_SetDMAConfig+0x100>)
 8005360:	4013      	ands	r3, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	431a      	orrs	r2, r3
 800536a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800536e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	7d1b      	ldrb	r3, [r3, #20]
 8005378:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800537a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	7f5b      	ldrb	r3, [r3, #29]
 8005380:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f241 1304 	movw	r3, #4356	; 0x1104
 800538e:	4413      	add	r3, r2
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b16      	ldr	r3, [pc, #88]	; (80053ec <ETH_SetDMAConfig+0x104>)
 8005394:	4013      	ands	r3, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6811      	ldr	r1, [r2, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	431a      	orrs	r2, r3
 800539e:	f241 1304 	movw	r3, #4356	; 0x1104
 80053a2:	440b      	add	r3, r1
 80053a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	7f1b      	ldrb	r3, [r3, #28]
 80053aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80053bc:	4413      	add	r3, r2
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <ETH_SetDMAConfig+0x108>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6811      	ldr	r1, [r2, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80053d0:	440b      	add	r3, r1
 80053d2:	601a      	str	r2, [r3, #0]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	ffff87fd 	.word	0xffff87fd
 80053e4:	ffff2ffe 	.word	0xffff2ffe
 80053e8:	fffec000 	.word	0xfffec000
 80053ec:	ffc0efef 	.word	0xffc0efef
 80053f0:	7fc0ffff 	.word	0x7fc0ffff

080053f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b0a4      	sub	sp, #144	; 0x90
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005402:	2300      	movs	r3, #0
 8005404:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800540c:	2300      	movs	r3, #0
 800540e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005434:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800543c:	2300      	movs	r3, #0
 800543e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800544c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005450:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005458:	2300      	movs	r3, #0
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005462:	2300      	movs	r3, #0
 8005464:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800546e:	2300      	movs	r3, #0
 8005470:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005472:	2300      	movs	r3, #0
 8005474:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005476:	2300      	movs	r3, #0
 8005478:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800548c:	2320      	movs	r3, #32
 800548e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800549e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80054a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054a8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80054b0:	2302      	movs	r3, #2
 80054b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80054ce:	2300      	movs	r3, #0
 80054d0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80054d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff fde6 	bl	80050b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80054e8:	2301      	movs	r3, #1
 80054ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80054fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005502:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800550c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800550e:	2300      	movs	r3, #0
 8005510:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005514:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800551a:	f107 0308 	add.w	r3, r7, #8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff fee1 	bl	80052e8 <ETH_SetDMAConfig>
}
 8005526:	bf00      	nop
 8005528:	3790      	adds	r7, #144	; 0x90
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005540:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005548:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800554a:	f002 f9e7 	bl	800791c <HAL_RCC_GetHCLKFreq>
 800554e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d908      	bls.n	800556a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d804      	bhi.n	800556a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e027      	b.n	80055ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d908      	bls.n	8005584 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d204      	bcs.n	8005584 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e01a      	b.n	80055ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d303      	bcc.n	8005594 <ETH_MAC_MDIO_ClkConfig+0x64>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d911      	bls.n	80055b8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d908      	bls.n	80055ae <ETH_MAC_MDIO_ClkConfig+0x7e>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <ETH_MAC_MDIO_ClkConfig+0xac>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d804      	bhi.n	80055ae <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e005      	b.n	80055ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e000      	b.n	80055ba <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80055b8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	01312cff 	.word	0x01312cff
 80055d0:	02160ebf 	.word	0x02160ebf
 80055d4:	03938700 	.word	0x03938700
 80055d8:	05f5e0ff 	.word	0x05f5e0ff
 80055dc:	08f0d17f 	.word	0x08f0d17f

080055e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e01d      	b.n	800562a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68d9      	ldr	r1, [r3, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	440b      	add	r3, r1
 80055fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2200      	movs	r2, #0
 800560a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2200      	movs	r2, #0
 8005616:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	3206      	adds	r2, #6
 8005620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d9de      	bls.n	80055ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	f241 132c 	movw	r3, #4396	; 0x112c
 800563e:	4413      	add	r3, r2
 8005640:	2203      	movs	r2, #3
 8005642:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68d9      	ldr	r1, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f241 1314 	movw	r3, #4372	; 0x1114
 8005650:	4413      	add	r3, r2
 8005652:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e024      	b.n	80056c6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6919      	ldr	r1, [r3, #16]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4613      	mov	r3, r2
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4413      	add	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	440b      	add	r3, r1
 800568c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2200      	movs	r2, #0
 80056a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3310      	adds	r3, #16
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d9d7      	bls.n	800567c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	f241 1330 	movw	r3, #4400	; 0x1130
 80056f2:	4413      	add	r3, r2
 80056f4:	2203      	movs	r2, #3
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6919      	ldr	r1, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	f241 131c 	movw	r3, #4380	; 0x111c
 8005704:	4413      	add	r3, r2
 8005706:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	f241 1328 	movw	r3, #4392	; 0x1128
 8005718:	4413      	add	r3, r2
 800571a:	6019      	str	r1, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005728:	b480      	push	{r7}
 800572a:	b08d      	sub	sp, #52	; 0x34
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3318      	adds	r3, #24
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8005746:	2300      	movs	r3, #0
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005752:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800576a:	d007      	beq.n	800577c <ETH_Prepare_Tx_Descriptors+0x54>
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	3304      	adds	r3, #4
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800577c:	2302      	movs	r3, #2
 800577e:	e24a      	b.n	8005c16 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d044      	beq.n	8005816 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	4b72      	ldr	r3, [pc, #456]	; (800595c <ETH_Prepare_Tx_Descriptors+0x234>)
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005798:	431a      	orrs	r2, r3
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d027      	beq.n	8005816 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	041b      	lsls	r3, r3, #16
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	431a      	orrs	r2, r3
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005804:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005814:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	4b4e      	ldr	r3, [pc, #312]	; (8005960 <ETH_Prepare_Tx_Descriptors+0x238>)
 8005828:	4013      	ands	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	6992      	ldr	r2, [r2, #24]
 800582e:	431a      	orrs	r2, r3
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <ETH_Prepare_Tx_Descriptors+0x130>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d030      	beq.n	80058ba <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005872:	3301      	adds	r3, #1
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b03      	cmp	r3, #3
 800587a:	d902      	bls.n	8005882 <ETH_Prepare_Tx_Descriptors+0x15a>
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	3b04      	subs	r3, #4
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	3301      	adds	r3, #1
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589e:	d10c      	bne.n	80058ba <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	e1ad      	b.n	8005c16 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	3301      	adds	r3, #1
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <ETH_Prepare_Tx_Descriptors+0x238>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	6852      	ldr	r2, [r2, #4]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d012      	beq.n	800590a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	6852      	ldr	r2, [r2, #4]
 8005900:	0412      	lsls	r2, r2, #16
 8005902:	431a      	orrs	r2, r3
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	e008      	b.n	800591c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	2200      	movs	r2, #0
 800590e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8005916:	4013      	ands	r3, r2
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	d021      	beq.n	800596c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	04db      	lsls	r3, r3, #19
 8005936:	431a      	orrs	r2, r3
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	4b09      	ldr	r3, [pc, #36]	; (8005968 <ETH_Prepare_Tx_Descriptors+0x240>)
 8005942:	4013      	ands	r3, r2
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	69d2      	ldr	r2, [r2, #28]
 8005948:	431a      	orrs	r2, r3
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	e02e      	b.n	80059ba <ETH_Prepare_Tx_Descriptors+0x292>
 800595c:	ffff0000 	.word	0xffff0000
 8005960:	ffffc000 	.word	0xffffc000
 8005964:	c000ffff 	.word	0xc000ffff
 8005968:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	4b93      	ldr	r3, [pc, #588]	; (8005bc0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005972:	4013      	ands	r3, r2
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	6852      	ldr	r2, [r2, #4]
 8005978:	431a      	orrs	r2, r3
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	431a      	orrs	r2, r3
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	431a      	orrs	r2, r3
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80cb 	beq.w	8005ba0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005a1c:	e0c0      	b.n	8005ba0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d902      	bls.n	8005a3c <ETH_Prepare_Tx_Descriptors+0x314>
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	3b04      	subs	r3, #4
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a44:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5e:	d007      	beq.n	8005a70 <ETH_Prepare_Tx_Descriptors+0x348>
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	3304      	adds	r3, #4
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d026      	beq.n	8005abe <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	e016      	b.n	8005ab2 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	3301      	adds	r3, #1
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d902      	bls.n	8005aa2 <ETH_Prepare_Tx_Descriptors+0x37a>
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	3301      	adds	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d3e4      	bcc.n	8005a84 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8005aba:	2302      	movs	r3, #2
 8005abc:	e0ab      	b.n	8005c16 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	4b3a      	ldr	r3, [pc, #232]	; (8005bc4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	6852      	ldr	r2, [r2, #4]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d012      	beq.n	8005b14 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	6852      	ldr	r2, [r2, #4]
 8005b0a:	0412      	lsls	r2, r2, #16
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	609a      	str	r2, [r3, #8]
 8005b12:	e008      	b.n	8005b26 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2200      	movs	r2, #0
 8005b18:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00f      	beq.n	8005b52 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	69d2      	ldr	r2, [r2, #28]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	e017      	b.n	8005b82 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	6852      	ldr	r2, [r2, #4]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f47f af3a 	bne.w	8005a1e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00f      	beq.n	8005bd0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	e00e      	b.n	8005bdc <ETH_Prepare_Tx_Descriptors+0x4b4>
 8005bbe:	bf00      	nop
 8005bc0:	ffff8000 	.word	0xffff8000
 8005bc4:	ffffc000 	.word	0xffffc000
 8005bc8:	c000ffff 	.word	0xc000ffff
 8005bcc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bec:	6979      	ldr	r1, [r7, #20]
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bfe:	b672      	cpsid	i
}
 8005c00:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4413      	add	r3, r2
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005c10:	b662      	cpsie	i
}
 8005c12:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3734      	adds	r7, #52	; 0x34
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop

08005c24 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b098      	sub	sp, #96	; 0x60
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005c2c:	4a84      	ldr	r2, [pc, #528]	; (8005e40 <HAL_FDCAN_Init+0x21c>)
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	4611      	mov	r1, r2
 8005c34:	224c      	movs	r2, #76	; 0x4c
 8005c36:	4618      	mov	r0, r3
 8005c38:	f010 fc86 	bl	8016548 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e1ca      	b.n	8005fdc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a7e      	ldr	r2, [pc, #504]	; (8005e44 <HAL_FDCAN_Init+0x220>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d106      	bne.n	8005c5e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fd f986 	bl	8002f84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0210 	bic.w	r2, r2, #16
 8005c86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c88:	f7fe f8f8 	bl	8003e7c <HAL_GetTick>
 8005c8c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005c8e:	e014      	b.n	8005cba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005c90:	f7fe f8f4 	bl	8003e7c <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b0a      	cmp	r3, #10
 8005c9c:	d90d      	bls.n	8005cba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e190      	b.n	8005fdc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d0e3      	beq.n	8005c90 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cd8:	f7fe f8d0 	bl	8003e7c <HAL_GetTick>
 8005cdc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005cde:	e014      	b.n	8005d0a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ce0:	f7fe f8cc 	bl	8003e7c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b0a      	cmp	r3, #10
 8005cec:	d90d      	bls.n	8005d0a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2203      	movs	r2, #3
 8005d02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e168      	b.n	8005fdc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0e3      	beq.n	8005ce0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0202 	orr.w	r2, r2, #2
 8005d26:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7c1b      	ldrb	r3, [r3, #16]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d108      	bne.n	8005d42 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3e:	619a      	str	r2, [r3, #24]
 8005d40:	e007      	b.n	8005d52 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d50:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	7c5b      	ldrb	r3, [r3, #17]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d108      	bne.n	8005d6c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d68:	619a      	str	r2, [r3, #24]
 8005d6a:	e007      	b.n	8005d7c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d7a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7c9b      	ldrb	r3, [r3, #18]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d108      	bne.n	8005d96 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d92:	619a      	str	r2, [r3, #24]
 8005d94:	e007      	b.n	8005da6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005da4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005dca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0210 	bic.w	r2, r2, #16
 8005dda:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d108      	bne.n	8005df6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0204 	orr.w	r2, r2, #4
 8005df2:	619a      	str	r2, [r3, #24]
 8005df4:	e030      	b.n	8005e58 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d02c      	beq.n	8005e58 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d020      	beq.n	8005e48 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e14:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0210 	orr.w	r2, r2, #16
 8005e24:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d114      	bne.n	8005e58 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0220 	orr.w	r2, r2, #32
 8005e3c:	619a      	str	r2, [r3, #24]
 8005e3e:	e00b      	b.n	8005e58 <HAL_FDCAN_Init+0x234>
 8005e40:	080176a0 	.word	0x080176a0
 8005e44:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0220 	orr.w	r2, r2, #32
 8005e56:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e68:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e70:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e80:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e82:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8c:	d115      	bne.n	8005eba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005e9c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005ea6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005eb6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005eb8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	4413      	add	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d012      	beq.n	8005f0c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005eee:	f023 0107 	bic.w	r1, r3, #7
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005efc:	4413      	add	r3, r2
 8005efe:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005f1c:	f023 0107 	bic.w	r1, r3, #7
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d013      	beq.n	8005f6a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005f4a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f58:	4413      	add	r3, r2
 8005f5a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005f5e:	011a      	lsls	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d013      	beq.n	8005f9a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005f7a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f88:	4413      	add	r3, r2
 8005f8a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <HAL_FDCAN_Init+0x3c0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d107      	bne.n	8005fb4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f022 0203 	bic.w	r2, r2, #3
 8005fb2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f9af 	bl	8006330 <FDCAN_CalcultateRamBlockAddresses>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005fd8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3760      	adds	r7, #96	; 0x60
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	4000a000 	.word	0x4000a000

08005fe8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005ff8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d002      	beq.n	8006006 <HAL_FDCAN_ConfigFilter+0x1e>
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d157      	bne.n	80060b6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12b      	bne.n	8006066 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b07      	cmp	r3, #7
 8006014:	d10d      	bne.n	8006032 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006022:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006028:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800602a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e00e      	b.n	8006050 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800603e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006046:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e025      	b.n	80060b2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	075a      	lsls	r2, r3, #29
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b07      	cmp	r3, #7
 800607a:	d103      	bne.n	8006084 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	e006      	b.n	8006092 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	079a      	lsls	r2, r3, #30
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	3304      	adds	r3, #4
 80060aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e008      	b.n	80060c8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060bc:	f043 0202 	orr.w	r2, r3, #2
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d110      	bne.n	8006110 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80060f6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e008      	b.n	8006122 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006116:	f043 0204 	orr.w	r2, r3, #4
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	d111      	bne.n	8006166 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	e008      	b.n	8006178 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800616c:	f043 0204 	orr.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
  }
}
 8006178:	4618      	mov	r0, r3
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d141      	bne.n	8006220 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80061a4:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e038      	b.n	8006232 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80061c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e026      	b.n	8006232 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa1e 	bl	800663c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2101      	movs	r1, #1
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	fa01 f202 	lsl.w	r2, r1, r2
 800620c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006210:	2201      	movs	r2, #1
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	409a      	lsls	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	e008      	b.n	8006232 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006226:	f043 0208 	orr.w	r2, r3, #8
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
  }
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800624e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d002      	beq.n	800625c <HAL_FDCAN_ActivateNotification+0x20>
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d155      	bne.n	8006308 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0201 	orr.w	r2, r2, #1
 8006278:	65da      	str	r2, [r3, #92]	; 0x5c
 800627a:	e014      	b.n	80062a6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4013      	ands	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	429a      	cmp	r2, r3
 800628a:	d108      	bne.n	800629e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0202 	orr.w	r2, r2, #2
 800629a:	65da      	str	r2, [r3, #92]	; 0x5c
 800629c:	e003      	b.n	80062a6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2203      	movs	r2, #3
 80062a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	430a      	orrs	r2, r1
 80062c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	430a      	orrs	r2, r1
 80062de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <HAL_FDCAN_ActivateNotification+0xec>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	430b      	orrs	r3, r1
 80062f4:	6553      	str	r3, [r2, #84]	; 0x54
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <HAL_FDCAN_ActivateNotification+0xf0>)
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	0f9b      	lsrs	r3, r3, #30
 80062fe:	490b      	ldr	r1, [pc, #44]	; (800632c <HAL_FDCAN_ActivateNotification+0xf0>)
 8006300:	4313      	orrs	r3, r2
 8006302:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	e008      	b.n	800631a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800630e:	f043 0202 	orr.w	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	3fcfffff 	.word	0x3fcfffff
 800632c:	4000a800 	.word	0x4000a800

08006330 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006346:	4ba7      	ldr	r3, [pc, #668]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006348:	4013      	ands	r3, r2
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	0091      	lsls	r1, r2, #2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	430b      	orrs	r3, r1
 8006354:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006360:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	041a      	lsls	r2, r3, #16
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	4413      	add	r3, r2
 800637c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006386:	4b97      	ldr	r3, [pc, #604]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006388:	4013      	ands	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	0091      	lsls	r1, r2, #2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	430b      	orrs	r3, r1
 8006394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a8:	041a      	lsls	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4413      	add	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80063c8:	4b86      	ldr	r3, [pc, #536]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	0091      	lsls	r1, r2, #2
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	041a      	lsls	r2, r3, #16
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006410:	4b74      	ldr	r3, [pc, #464]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006412:	4013      	ands	r3, r2
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0091      	lsls	r1, r2, #2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	430b      	orrs	r3, r1
 800641e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800642a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006432:	041a      	lsls	r2, r3, #16
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4413      	add	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006458:	4b62      	ldr	r3, [pc, #392]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800645a:	4013      	ands	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	0091      	lsls	r1, r2, #2
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6812      	ldr	r2, [r2, #0]
 8006464:	430b      	orrs	r3, r1
 8006466:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006484:	4b57      	ldr	r3, [pc, #348]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006486:	4013      	ands	r3, r2
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	0091      	lsls	r1, r2, #2
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	430b      	orrs	r3, r1
 8006492:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800649e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	041a      	lsls	r2, r3, #16
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	4413      	add	r3, r2
 80064bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80064c6:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	0091      	lsls	r1, r2, #2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	430b      	orrs	r3, r1
 80064d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064e0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e8:	041a      	lsls	r2, r3, #16
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064fc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	061a      	lsls	r2, r3, #24
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	4b34      	ldr	r3, [pc, #208]	; (80065e8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006516:	4413      	add	r3, r2
 8006518:	009a      	lsls	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	441a      	add	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80065aa:	fb01 f303 	mul.w	r3, r1, r3
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	441a      	add	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065da:	4a04      	ldr	r2, [pc, #16]	; (80065ec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d915      	bls.n	800660c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80065e0:	e006      	b.n	80065f0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80065e2:	bf00      	nop
 80065e4:	ffff0003 	.word	0xffff0003
 80065e8:	10002b00 	.word	0x10002b00
 80065ec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2203      	movs	r2, #3
 8006604:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e010      	b.n	800662e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e005      	b.n	8006620 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3304      	adds	r3, #4
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	429a      	cmp	r2, r3
 800662a:	d3f3      	bcc.n	8006614 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	; 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800665a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006662:	4313      	orrs	r3, r2
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e00a      	b.n	800667e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006670:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006676:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006688:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800668e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006694:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	3304      	adds	r3, #4
 80066be:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	3304      	adds	r3, #4
 80066ca:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e020      	b.n	8006714 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	3303      	adds	r3, #3
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	3302      	adds	r3, #2
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	440b      	add	r3, r1
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80066ea:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	3301      	adds	r3, #1
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	440b      	add	r3, r1
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80066f8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	440a      	add	r2, r1
 8006700:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006702:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	3304      	adds	r3, #4
 800670c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	3304      	adds	r3, #4
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	4a06      	ldr	r2, [pc, #24]	; (8006734 <FDCAN_CopyMessageToRAM+0xf8>)
 800671c:	5cd3      	ldrb	r3, [r2, r3]
 800671e:	461a      	mov	r2, r3
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	4293      	cmp	r3, r2
 8006724:	d3d5      	bcc.n	80066d2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	3724      	adds	r7, #36	; 0x24
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	0801aeac 	.word	0x0801aeac

08006738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006742:	2300      	movs	r3, #0
 8006744:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006746:	4b86      	ldr	r3, [pc, #536]	; (8006960 <HAL_GPIO_Init+0x228>)
 8006748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800674a:	e18c      	b.n	8006a66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	2101      	movs	r1, #1
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	4013      	ands	r3, r2
 800675a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 817e 	beq.w	8006a60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	2b01      	cmp	r3, #1
 800676e:	d005      	beq.n	800677c <HAL_GPIO_Init+0x44>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 0303 	and.w	r3, r3, #3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d130      	bne.n	80067de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	2203      	movs	r2, #3
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43db      	mvns	r3, r3
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	4013      	ands	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067b2:	2201      	movs	r2, #1
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4013      	ands	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	091b      	lsrs	r3, r3, #4
 80067c8:	f003 0201 	and.w	r2, r3, #1
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d017      	beq.n	800681a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	2203      	movs	r2, #3
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	4313      	orrs	r3, r2
 8006812:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d123      	bne.n	800686e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	08da      	lsrs	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3208      	adds	r2, #8
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	220f      	movs	r2, #15
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	43db      	mvns	r3, r3
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	4013      	ands	r3, r2
 8006848:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	08da      	lsrs	r2, r3, #3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3208      	adds	r2, #8
 8006868:	69b9      	ldr	r1, [r7, #24]
 800686a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	2203      	movs	r2, #3
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	43db      	mvns	r3, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4013      	ands	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f003 0203 	and.w	r2, r3, #3
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	4313      	orrs	r3, r2
 800689a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80d8 	beq.w	8006a60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068b0:	4b2c      	ldr	r3, [pc, #176]	; (8006964 <HAL_GPIO_Init+0x22c>)
 80068b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068b6:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <HAL_GPIO_Init+0x22c>)
 80068b8:	f043 0302 	orr.w	r3, r3, #2
 80068bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <HAL_GPIO_Init+0x22c>)
 80068c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ce:	4a26      	ldr	r2, [pc, #152]	; (8006968 <HAL_GPIO_Init+0x230>)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	3302      	adds	r3, #2
 80068d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	220f      	movs	r2, #15
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43db      	mvns	r3, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	4013      	ands	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1d      	ldr	r2, [pc, #116]	; (800696c <HAL_GPIO_Init+0x234>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d04a      	beq.n	8006990 <HAL_GPIO_Init+0x258>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <HAL_GPIO_Init+0x238>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d02b      	beq.n	800695a <HAL_GPIO_Init+0x222>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <HAL_GPIO_Init+0x23c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d025      	beq.n	8006956 <HAL_GPIO_Init+0x21e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a1a      	ldr	r2, [pc, #104]	; (8006978 <HAL_GPIO_Init+0x240>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01f      	beq.n	8006952 <HAL_GPIO_Init+0x21a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a19      	ldr	r2, [pc, #100]	; (800697c <HAL_GPIO_Init+0x244>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d019      	beq.n	800694e <HAL_GPIO_Init+0x216>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a18      	ldr	r2, [pc, #96]	; (8006980 <HAL_GPIO_Init+0x248>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <HAL_GPIO_Init+0x212>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a17      	ldr	r2, [pc, #92]	; (8006984 <HAL_GPIO_Init+0x24c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00d      	beq.n	8006946 <HAL_GPIO_Init+0x20e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a16      	ldr	r2, [pc, #88]	; (8006988 <HAL_GPIO_Init+0x250>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d007      	beq.n	8006942 <HAL_GPIO_Init+0x20a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a15      	ldr	r2, [pc, #84]	; (800698c <HAL_GPIO_Init+0x254>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <HAL_GPIO_Init+0x206>
 800693a:	2309      	movs	r3, #9
 800693c:	e029      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 800693e:	230a      	movs	r3, #10
 8006940:	e027      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 8006942:	2307      	movs	r3, #7
 8006944:	e025      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 8006946:	2306      	movs	r3, #6
 8006948:	e023      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 800694a:	2305      	movs	r3, #5
 800694c:	e021      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 800694e:	2304      	movs	r3, #4
 8006950:	e01f      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 8006952:	2303      	movs	r3, #3
 8006954:	e01d      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 8006956:	2302      	movs	r3, #2
 8006958:	e01b      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 800695a:	2301      	movs	r3, #1
 800695c:	e019      	b.n	8006992 <HAL_GPIO_Init+0x25a>
 800695e:	bf00      	nop
 8006960:	58000080 	.word	0x58000080
 8006964:	58024400 	.word	0x58024400
 8006968:	58000400 	.word	0x58000400
 800696c:	58020000 	.word	0x58020000
 8006970:	58020400 	.word	0x58020400
 8006974:	58020800 	.word	0x58020800
 8006978:	58020c00 	.word	0x58020c00
 800697c:	58021000 	.word	0x58021000
 8006980:	58021400 	.word	0x58021400
 8006984:	58021800 	.word	0x58021800
 8006988:	58021c00 	.word	0x58021c00
 800698c:	58022400 	.word	0x58022400
 8006990:	2300      	movs	r3, #0
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	f002 0203 	and.w	r2, r2, #3
 8006998:	0092      	lsls	r2, r2, #2
 800699a:	4093      	lsls	r3, r2
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4313      	orrs	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069a2:	4938      	ldr	r1, [pc, #224]	; (8006a84 <HAL_GPIO_Init+0x34c>)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	3302      	adds	r3, #2
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	43db      	mvns	r3, r3
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4013      	ands	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	43db      	mvns	r3, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4013      	ands	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	43db      	mvns	r3, r3
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	4013      	ands	r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3301      	adds	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f47f ae6b 	bne.w	800674c <HAL_GPIO_Init+0x14>
  }
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	3724      	adds	r7, #36	; 0x24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	58000400 	.word	0x58000400

08006a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
 8006a94:	4613      	mov	r3, r2
 8006a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a98:	787b      	ldrb	r3, [r7, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006aa4:	e003      	b.n	8006aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aa6:	887b      	ldrh	r3, [r7, #2]
 8006aa8:	041a      	lsls	r2, r3, #16
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	619a      	str	r2, [r3, #24]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006acc:	887a      	ldrh	r2, [r7, #2]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	041a      	lsls	r2, r3, #16
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	43d9      	mvns	r1, r3
 8006ad8:	887b      	ldrh	r3, [r7, #2]
 8006ada:	400b      	ands	r3, r1
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	619a      	str	r2, [r3, #24]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d00a      	beq.n	8006b1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b04:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d001      	beq.n	8006b16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e01f      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e01d      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b1a:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 0207 	bic.w	r2, r3, #7
 8006b22:	490f      	ldr	r1, [pc, #60]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b2a:	f7fd f9a7 	bl	8003e7c <HAL_GetTick>
 8006b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b30:	e009      	b.n	8006b46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b32:	f7fd f9a3 	bl	8003e7c <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b40:	d901      	bls.n	8006b46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e007      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b46:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <HAL_PWREx_ConfigSupply+0x70>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b52:	d1ee      	bne.n	8006b32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	58024800 	.word	0x58024800

08006b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e397      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8087 	beq.w	8006c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b84:	4b9e      	ldr	r3, [pc, #632]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b8e:	4b9c      	ldr	r3, [pc, #624]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d007      	beq.n	8006baa <HAL_RCC_OscConfig+0x46>
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2b18      	cmp	r3, #24
 8006b9e:	d110      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x5e>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006baa:	4b95      	ldr	r3, [pc, #596]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d06c      	beq.n	8006c90 <HAL_RCC_OscConfig+0x12c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d168      	bne.n	8006c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e371      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bca:	d106      	bne.n	8006bda <HAL_RCC_OscConfig+0x76>
 8006bcc:	4b8c      	ldr	r3, [pc, #560]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a8b      	ldr	r2, [pc, #556]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e02e      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCC_OscConfig+0x98>
 8006be2:	4b87      	ldr	r3, [pc, #540]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a86      	ldr	r2, [pc, #536]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b84      	ldr	r3, [pc, #528]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a83      	ldr	r2, [pc, #524]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e01d      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCC_OscConfig+0xbc>
 8006c06:	4b7e      	ldr	r3, [pc, #504]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a7d      	ldr	r2, [pc, #500]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b7b      	ldr	r3, [pc, #492]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a7a      	ldr	r2, [pc, #488]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e00b      	b.n	8006c38 <HAL_RCC_OscConfig+0xd4>
 8006c20:	4b77      	ldr	r3, [pc, #476]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a76      	ldr	r2, [pc, #472]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	4b74      	ldr	r3, [pc, #464]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a73      	ldr	r2, [pc, #460]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fd f91c 	bl	8003e7c <HAL_GetTick>
 8006c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c48:	f7fd f918 	bl	8003e7c <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b64      	cmp	r3, #100	; 0x64
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e325      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c5a:	4b69      	ldr	r3, [pc, #420]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0f0      	beq.n	8006c48 <HAL_RCC_OscConfig+0xe4>
 8006c66:	e014      	b.n	8006c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fd f908 	bl	8003e7c <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c70:	f7fd f904 	bl	8003e7c <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b64      	cmp	r3, #100	; 0x64
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e311      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c82:	4b5f      	ldr	r3, [pc, #380]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x10c>
 8006c8e:	e000      	b.n	8006c92 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 808a 	beq.w	8006db4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ca0:	4b57      	ldr	r3, [pc, #348]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006caa:	4b55      	ldr	r3, [pc, #340]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d007      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x162>
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b18      	cmp	r3, #24
 8006cba:	d137      	bne.n	8006d2c <HAL_RCC_OscConfig+0x1c8>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d132      	bne.n	8006d2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc6:	4b4e      	ldr	r3, [pc, #312]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_RCC_OscConfig+0x17a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e2e3      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cde:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 0219 	bic.w	r2, r3, #25
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	4945      	ldr	r1, [pc, #276]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cf0:	f7fd f8c4 	bl	8003e7c <HAL_GetTick>
 8006cf4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf8:	f7fd f8c0 	bl	8003e7c <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e2cd      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d0a:	4b3d      	ldr	r3, [pc, #244]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d16:	4b3a      	ldr	r3, [pc, #232]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	061b      	lsls	r3, r3, #24
 8006d24:	4936      	ldr	r1, [pc, #216]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d2a:	e043      	b.n	8006db4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d026      	beq.n	8006d82 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d34:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f023 0219 	bic.w	r2, r3, #25
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	492f      	ldr	r1, [pc, #188]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d46:	f7fd f899 	bl	8003e7c <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4e:	f7fd f895 	bl	8003e7c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e2a2      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6c:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	061b      	lsls	r3, r3, #24
 8006d7a:	4921      	ldr	r1, [pc, #132]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	604b      	str	r3, [r1, #4]
 8006d80:	e018      	b.n	8006db4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d82:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8e:	f7fd f875 	bl	8003e7c <HAL_GetTick>
 8006d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d94:	e008      	b.n	8006da8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d96:	f7fd f871 	bl	8003e7c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e27e      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1f0      	bne.n	8006d96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06d      	beq.n	8006e9c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dca:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d007      	beq.n	8006de6 <HAL_RCC_OscConfig+0x282>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b18      	cmp	r3, #24
 8006dda:	d11e      	bne.n	8006e1a <HAL_RCC_OscConfig+0x2b6>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d119      	bne.n	8006e1a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006de6:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <HAL_RCC_OscConfig+0x29c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_RCC_OscConfig+0x2a0>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b80      	cmp	r3, #128	; 0x80
 8006df8:	d004      	beq.n	8006e04 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e253      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
 8006dfe:	bf00      	nop
 8006e00:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e04:	4ba3      	ldr	r3, [pc, #652]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	061b      	lsls	r3, r3, #24
 8006e12:	49a0      	ldr	r1, [pc, #640]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e18:	e040      	b.n	8006e9c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d023      	beq.n	8006e6a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e22:	4b9c      	ldr	r3, [pc, #624]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a9b      	ldr	r2, [pc, #620]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2e:	f7fd f825 	bl	8003e7c <HAL_GetTick>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e34:	e008      	b.n	8006e48 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e36:	f7fd f821 	bl	8003e7c <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e22e      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e48:	4b92      	ldr	r3, [pc, #584]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0f0      	beq.n	8006e36 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e54:	4b8f      	ldr	r3, [pc, #572]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	061b      	lsls	r3, r3, #24
 8006e62:	498c      	ldr	r1, [pc, #560]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60cb      	str	r3, [r1, #12]
 8006e68:	e018      	b.n	8006e9c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e6a:	4b8a      	ldr	r3, [pc, #552]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a89      	ldr	r2, [pc, #548]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e76:	f7fd f801 	bl	8003e7c <HAL_GetTick>
 8006e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e7e:	f7fc fffd 	bl	8003e7c <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e20a      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e90:	4b80      	ldr	r3, [pc, #512]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f0      	bne.n	8006e7e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d036      	beq.n	8006f16 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d019      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb0:	4b78      	ldr	r3, [pc, #480]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb4:	4a77      	ldr	r2, [pc, #476]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebc:	f7fc ffde 	bl	8003e7c <HAL_GetTick>
 8006ec0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ec4:	f7fc ffda 	bl	8003e7c <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e1e7      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ed6:	4b6f      	ldr	r3, [pc, #444]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x360>
 8006ee2:	e018      	b.n	8006f16 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee4:	4b6b      	ldr	r3, [pc, #428]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee8:	4a6a      	ldr	r2, [pc, #424]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef0:	f7fc ffc4 	bl	8003e7c <HAL_GetTick>
 8006ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef8:	f7fc ffc0 	bl	8003e7c <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e1cd      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f0a:	4b62      	ldr	r3, [pc, #392]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d036      	beq.n	8006f90 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d019      	beq.n	8006f5e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f2a:	4b5a      	ldr	r3, [pc, #360]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a59      	ldr	r2, [pc, #356]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f36:	f7fc ffa1 	bl	8003e7c <HAL_GetTick>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f3e:	f7fc ff9d 	bl	8003e7c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e1aa      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f50:	4b50      	ldr	r3, [pc, #320]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x3da>
 8006f5c:	e018      	b.n	8006f90 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f5e:	4b4d      	ldr	r3, [pc, #308]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a4c      	ldr	r2, [pc, #304]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f6a:	f7fc ff87 	bl	8003e7c <HAL_GetTick>
 8006f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f72:	f7fc ff83 	bl	8003e7c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e190      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f84:	4b43      	ldr	r3, [pc, #268]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f0      	bne.n	8006f72 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8085 	beq.w	80070a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f9e:	4b3e      	ldr	r3, [pc, #248]	; (8007098 <HAL_RCC_OscConfig+0x534>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a3d      	ldr	r2, [pc, #244]	; (8007098 <HAL_RCC_OscConfig+0x534>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006faa:	f7fc ff67 	bl	8003e7c <HAL_GetTick>
 8006fae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fb2:	f7fc ff63 	bl	8003e7c <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b64      	cmp	r3, #100	; 0x64
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e170      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc4:	4b34      	ldr	r3, [pc, #208]	; (8007098 <HAL_RCC_OscConfig+0x534>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x482>
 8006fd8:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe4:	e02d      	b.n	8007042 <HAL_RCC_OscConfig+0x4de>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x4a4>
 8006fee:	4b29      	ldr	r3, [pc, #164]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a28      	ldr	r2, [pc, #160]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffa:	4b26      	ldr	r3, [pc, #152]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffe:	4a25      	ldr	r2, [pc, #148]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6713      	str	r3, [r2, #112]	; 0x70
 8007006:	e01c      	b.n	8007042 <HAL_RCC_OscConfig+0x4de>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b05      	cmp	r3, #5
 800700e:	d10c      	bne.n	800702a <HAL_RCC_OscConfig+0x4c6>
 8007010:	4b20      	ldr	r3, [pc, #128]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	4a1f      	ldr	r2, [pc, #124]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	6713      	str	r3, [r2, #112]	; 0x70
 800701c:	4b1d      	ldr	r3, [pc, #116]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007020:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	; 0x70
 8007028:	e00b      	b.n	8007042 <HAL_RCC_OscConfig+0x4de>
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	4a19      	ldr	r2, [pc, #100]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	6713      	str	r3, [r2, #112]	; 0x70
 8007036:	4b17      	ldr	r3, [pc, #92]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a16      	ldr	r2, [pc, #88]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704a:	f7fc ff17 	bl	8003e7c <HAL_GetTick>
 800704e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007050:	e00a      	b.n	8007068 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7fc ff13 	bl	8003e7c <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e11e      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <HAL_RCC_OscConfig+0x530>)
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0ee      	beq.n	8007052 <HAL_RCC_OscConfig+0x4ee>
 8007074:	e018      	b.n	80070a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007076:	f7fc ff01 	bl	8003e7c <HAL_GetTick>
 800707a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800707c:	e00e      	b.n	800709c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fc fefd 	bl	8003e7c <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	; 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d905      	bls.n	800709c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e108      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
 8007094:	58024400 	.word	0x58024400
 8007098:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800709c:	4b84      	ldr	r3, [pc, #528]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ea      	bne.n	800707e <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 80f9 	beq.w	80072a4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070b2:	4b7f      	ldr	r3, [pc, #508]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ba:	2b18      	cmp	r3, #24
 80070bc:	f000 80b4 	beq.w	8007228 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f040 8095 	bne.w	80071f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ca:	4b79      	ldr	r3, [pc, #484]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a78      	ldr	r2, [pc, #480]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80070d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d6:	f7fc fed1 	bl	8003e7c <HAL_GetTick>
 80070da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070de:	f7fc fecd 	bl	8003e7c <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e0da      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070f0:	4b6f      	ldr	r3, [pc, #444]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f0      	bne.n	80070de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070fc:	4b6c      	ldr	r3, [pc, #432]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80070fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007100:	4b6c      	ldr	r3, [pc, #432]	; (80072b4 <HAL_RCC_OscConfig+0x750>)
 8007102:	4013      	ands	r3, r2
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800710c:	0112      	lsls	r2, r2, #4
 800710e:	430a      	orrs	r2, r1
 8007110:	4967      	ldr	r1, [pc, #412]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	628b      	str	r3, [r1, #40]	; 0x28
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	3b01      	subs	r3, #1
 800711c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	3b01      	subs	r3, #1
 8007126:	025b      	lsls	r3, r3, #9
 8007128:	b29b      	uxth	r3, r3
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	3b01      	subs	r3, #1
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713e:	3b01      	subs	r3, #1
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007146:	495a      	ldr	r1, [pc, #360]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800714c:	4b58      	ldr	r3, [pc, #352]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a57      	ldr	r2, [pc, #348]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007158:	4b55      	ldr	r3, [pc, #340]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800715a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800715c:	4b56      	ldr	r3, [pc, #344]	; (80072b8 <HAL_RCC_OscConfig+0x754>)
 800715e:	4013      	ands	r3, r2
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007164:	00d2      	lsls	r2, r2, #3
 8007166:	4952      	ldr	r1, [pc, #328]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800716c:	4b50      	ldr	r3, [pc, #320]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	f023 020c 	bic.w	r2, r3, #12
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	494d      	ldr	r1, [pc, #308]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800717e:	4b4c      	ldr	r3, [pc, #304]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f023 0202 	bic.w	r2, r3, #2
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	4949      	ldr	r1, [pc, #292]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800718c:	4313      	orrs	r3, r2
 800718e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007190:	4b47      	ldr	r3, [pc, #284]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	4a46      	ldr	r2, [pc, #280]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719c:	4b44      	ldr	r3, [pc, #272]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	4a43      	ldr	r2, [pc, #268]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071a8:	4b41      	ldr	r3, [pc, #260]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	4a40      	ldr	r2, [pc, #256]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80071b4:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a3d      	ldr	r2, [pc, #244]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c0:	4b3b      	ldr	r3, [pc, #236]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a3a      	ldr	r2, [pc, #232]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fc fe56 	bl	8003e7c <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d4:	f7fc fe52 	bl	8003e7c <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e05f      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071e6:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x670>
 80071f2:	e057      	b.n	80072a4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f4:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2d      	ldr	r2, [pc, #180]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 80071fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fc fe3c 	bl	8003e7c <HAL_GetTick>
 8007204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007208:	f7fc fe38 	bl	8003e7c <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e045      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800721a:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <HAL_RCC_OscConfig+0x6a4>
 8007226:	e03d      	b.n	80072a4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007228:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800722e:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <HAL_RCC_OscConfig+0x74c>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b01      	cmp	r3, #1
 800723a:	d031      	beq.n	80072a0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f003 0203 	and.w	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007246:	429a      	cmp	r2, r3
 8007248:	d12a      	bne.n	80072a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007256:	429a      	cmp	r2, r3
 8007258:	d122      	bne.n	80072a0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007266:	429a      	cmp	r2, r3
 8007268:	d11a      	bne.n	80072a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	0a5b      	lsrs	r3, r3, #9
 800726e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007278:	429a      	cmp	r2, r3
 800727a:	d111      	bne.n	80072a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	0c1b      	lsrs	r3, r3, #16
 8007280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800728a:	429a      	cmp	r2, r3
 800728c:	d108      	bne.n	80072a0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	0e1b      	lsrs	r3, r3, #24
 8007292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3730      	adds	r7, #48	; 0x30
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	58024400 	.word	0x58024400
 80072b4:	fffffc0c 	.word	0xfffffc0c
 80072b8:	ffff0007 	.word	0xffff0007

080072bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e19c      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d0:	4b8a      	ldr	r3, [pc, #552]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d910      	bls.n	8007300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b87      	ldr	r3, [pc, #540]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f023 020f 	bic.w	r2, r3, #15
 80072e6:	4985      	ldr	r1, [pc, #532]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ee:	4b83      	ldr	r3, [pc, #524]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d001      	beq.n	8007300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e184      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d010      	beq.n	800732e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	4b7b      	ldr	r3, [pc, #492]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007318:	429a      	cmp	r2, r3
 800731a:	d908      	bls.n	800732e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800731c:	4b78      	ldr	r3, [pc, #480]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4975      	ldr	r1, [pc, #468]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800732a:	4313      	orrs	r3, r2
 800732c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	4b70      	ldr	r3, [pc, #448]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007346:	429a      	cmp	r2, r3
 8007348:	d908      	bls.n	800735c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800734a:	4b6d      	ldr	r3, [pc, #436]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	496a      	ldr	r1, [pc, #424]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007358:	4313      	orrs	r3, r2
 800735a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	d010      	beq.n	800738a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	4b64      	ldr	r3, [pc, #400]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007374:	429a      	cmp	r2, r3
 8007376:	d908      	bls.n	800738a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007378:	4b61      	ldr	r3, [pc, #388]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	495e      	ldr	r1, [pc, #376]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007386:	4313      	orrs	r3, r2
 8007388:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d010      	beq.n	80073b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	4b59      	ldr	r3, [pc, #356]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d908      	bls.n	80073b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073a6:	4b56      	ldr	r3, [pc, #344]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	4953      	ldr	r1, [pc, #332]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d010      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	4b4d      	ldr	r3, [pc, #308]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d908      	bls.n	80073e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d4:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f023 020f 	bic.w	r2, r3, #15
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4947      	ldr	r1, [pc, #284]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d055      	beq.n	800749e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073f2:	4b43      	ldr	r3, [pc, #268]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4940      	ldr	r1, [pc, #256]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007400:	4313      	orrs	r3, r2
 8007402:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d107      	bne.n	800741c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800740c:	4b3c      	ldr	r3, [pc, #240]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d121      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0f6      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d107      	bne.n	8007434 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007424:	4b36      	ldr	r3, [pc, #216]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d115      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0ea      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800743c:	4b30      	ldr	r3, [pc, #192]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0de      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800744c:	4b2c      	ldr	r3, [pc, #176]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0d6      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800745c:	4b28      	ldr	r3, [pc, #160]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f023 0207 	bic.w	r2, r3, #7
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	4925      	ldr	r1, [pc, #148]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800746a:	4313      	orrs	r3, r2
 800746c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746e:	f7fc fd05 	bl	8003e7c <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007474:	e00a      	b.n	800748c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007476:	f7fc fd01 	bl	8003e7c <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	f241 3288 	movw	r2, #5000	; 0x1388
 8007484:	4293      	cmp	r3, r2
 8007486:	d901      	bls.n	800748c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e0be      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800748c:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	429a      	cmp	r2, r3
 800749c:	d1eb      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d010      	beq.n	80074cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	4b14      	ldr	r3, [pc, #80]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d208      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074ba:	4b11      	ldr	r3, [pc, #68]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f023 020f 	bic.w	r2, r3, #15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	490e      	ldr	r1, [pc, #56]	; (8007500 <HAL_RCC_ClockConfig+0x244>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d214      	bcs.n	8007504 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	4906      	ldr	r1, [pc, #24]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b04      	ldr	r3, [pc, #16]	; (80074fc <HAL_RCC_ClockConfig+0x240>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d005      	beq.n	8007504 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e086      	b.n	800760a <HAL_RCC_ClockConfig+0x34e>
 80074fc:	52002000 	.word	0x52002000
 8007500:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	4b3f      	ldr	r3, [pc, #252]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800751c:	429a      	cmp	r2, r3
 800751e:	d208      	bcs.n	8007532 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007520:	4b3c      	ldr	r3, [pc, #240]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4939      	ldr	r1, [pc, #228]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 800752e:	4313      	orrs	r3, r2
 8007530:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695a      	ldr	r2, [r3, #20]
 8007542:	4b34      	ldr	r3, [pc, #208]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800754a:	429a      	cmp	r2, r3
 800754c:	d208      	bcs.n	8007560 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800754e:	4b31      	ldr	r3, [pc, #196]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	492e      	ldr	r1, [pc, #184]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 800755c:	4313      	orrs	r3, r2
 800755e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	4b28      	ldr	r3, [pc, #160]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007578:	429a      	cmp	r2, r3
 800757a:	d208      	bcs.n	800758e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800757c:	4b25      	ldr	r3, [pc, #148]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	4922      	ldr	r1, [pc, #136]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 800758a:	4313      	orrs	r3, r2
 800758c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d010      	beq.n	80075bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d208      	bcs.n	80075bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075aa:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	4917      	ldr	r1, [pc, #92]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075bc:	f000 f834 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 80075c0:	4602      	mov	r2, r0
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	4912      	ldr	r1, [pc, #72]	; (8007618 <HAL_RCC_ClockConfig+0x35c>)
 80075ce:	5ccb      	ldrb	r3, [r1, r3]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	fa22 f303 	lsr.w	r3, r2, r3
 80075d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <HAL_RCC_ClockConfig+0x358>)
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	4a0d      	ldr	r2, [pc, #52]	; (8007618 <HAL_RCC_ClockConfig+0x35c>)
 80075e4:	5cd3      	ldrb	r3, [r2, r3]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	4a0a      	ldr	r2, [pc, #40]	; (800761c <HAL_RCC_ClockConfig+0x360>)
 80075f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075f4:	4a0a      	ldr	r2, [pc, #40]	; (8007620 <HAL_RCC_ClockConfig+0x364>)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80075fa:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <HAL_RCC_ClockConfig+0x368>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fc fbf2 	bl	8003de8 <HAL_InitTick>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	58024400 	.word	0x58024400
 8007618:	0801ae9c 	.word	0x0801ae9c
 800761c:	2400000c 	.word	0x2400000c
 8007620:	24000008 	.word	0x24000008
 8007624:	24000010 	.word	0x24000010

08007628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007628:	b480      	push	{r7}
 800762a:	b089      	sub	sp, #36	; 0x24
 800762c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800762e:	4bb3      	ldr	r3, [pc, #716]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007636:	2b18      	cmp	r3, #24
 8007638:	f200 8155 	bhi.w	80078e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800763c:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <HAL_RCC_GetSysClockFreq+0x1c>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	080076a9 	.word	0x080076a9
 8007648:	080078e7 	.word	0x080078e7
 800764c:	080078e7 	.word	0x080078e7
 8007650:	080078e7 	.word	0x080078e7
 8007654:	080078e7 	.word	0x080078e7
 8007658:	080078e7 	.word	0x080078e7
 800765c:	080078e7 	.word	0x080078e7
 8007660:	080078e7 	.word	0x080078e7
 8007664:	080076cf 	.word	0x080076cf
 8007668:	080078e7 	.word	0x080078e7
 800766c:	080078e7 	.word	0x080078e7
 8007670:	080078e7 	.word	0x080078e7
 8007674:	080078e7 	.word	0x080078e7
 8007678:	080078e7 	.word	0x080078e7
 800767c:	080078e7 	.word	0x080078e7
 8007680:	080078e7 	.word	0x080078e7
 8007684:	080076d5 	.word	0x080076d5
 8007688:	080078e7 	.word	0x080078e7
 800768c:	080078e7 	.word	0x080078e7
 8007690:	080078e7 	.word	0x080078e7
 8007694:	080078e7 	.word	0x080078e7
 8007698:	080078e7 	.word	0x080078e7
 800769c:	080078e7 	.word	0x080078e7
 80076a0:	080078e7 	.word	0x080078e7
 80076a4:	080076db 	.word	0x080076db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a8:	4b94      	ldr	r3, [pc, #592]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d009      	beq.n	80076c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076b4:	4b91      	ldr	r3, [pc, #580]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	4a90      	ldr	r2, [pc, #576]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076c0:	fa22 f303 	lsr.w	r3, r2, r3
 80076c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80076c6:	e111      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076c8:	4b8d      	ldr	r3, [pc, #564]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076ca:	61bb      	str	r3, [r7, #24]
    break;
 80076cc:	e10e      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80076ce:	4b8d      	ldr	r3, [pc, #564]	; (8007904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076d0:	61bb      	str	r3, [r7, #24]
    break;
 80076d2:	e10b      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80076d4:	4b8c      	ldr	r3, [pc, #560]	; (8007908 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076d6:	61bb      	str	r3, [r7, #24]
    break;
 80076d8:	e108      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076da:	4b88      	ldr	r3, [pc, #544]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076e4:	4b85      	ldr	r3, [pc, #532]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076f0:	4b82      	ldr	r3, [pc, #520]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076fa:	4b80      	ldr	r3, [pc, #512]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	08db      	lsrs	r3, r3, #3
 8007700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80e1 	beq.w	80078e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b02      	cmp	r3, #2
 8007722:	f000 8083 	beq.w	800782c <HAL_RCC_GetSysClockFreq+0x204>
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b02      	cmp	r3, #2
 800772a:	f200 80a1 	bhi.w	8007870 <HAL_RCC_GetSysClockFreq+0x248>
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_RCC_GetSysClockFreq+0x114>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d056      	beq.n	80077e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800773a:	e099      	b.n	8007870 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800773c:	4b6f      	ldr	r3, [pc, #444]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d02d      	beq.n	80077a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007748:	4b6c      	ldr	r3, [pc, #432]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	08db      	lsrs	r3, r3, #3
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	4a6b      	ldr	r2, [pc, #428]	; (8007900 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007754:	fa22 f303 	lsr.w	r3, r2, r3
 8007758:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b62      	ldr	r3, [pc, #392]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a02 	vldr	s12, [r7, #8]
 8007786:	eddf 5a61 	vldr	s11, [pc, #388]	; 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80077a2:	e087      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007910 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b51      	ldr	r3, [pc, #324]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e6:	e065      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007914 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b40      	ldr	r3, [pc, #256]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a02 	vldr	s12, [r7, #8]
 800780e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782a:	e043      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007918 <HAL_RCC_GetSysClockFreq+0x2f0>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007852:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	e021      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007914 <HAL_RCC_GetSysClockFreq+0x2ec>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a02 	vldr	s12, [r7, #8]
 8007896:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800790c <HAL_RCC_GetSysClockFreq+0x2e4>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80078b4:	4b11      	ldr	r3, [pc, #68]	; (80078fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	0a5b      	lsrs	r3, r3, #9
 80078ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078be:	3301      	adds	r3, #1
 80078c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	ee17 3a90 	vmov	r3, s15
 80078dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80078de:	e005      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    break;
 80078e4:	e002      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80078e6:	4b07      	ldr	r3, [pc, #28]	; (8007904 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078e8:	61bb      	str	r3, [r7, #24]
    break;
 80078ea:	bf00      	nop
  }

  return sysclockfreq;
 80078ec:	69bb      	ldr	r3, [r7, #24]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3724      	adds	r7, #36	; 0x24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
 8007900:	03d09000 	.word	0x03d09000
 8007904:	003d0900 	.word	0x003d0900
 8007908:	007a1200 	.word	0x007a1200
 800790c:	46000000 	.word	0x46000000
 8007910:	4c742400 	.word	0x4c742400
 8007914:	4a742400 	.word	0x4a742400
 8007918:	4af42400 	.word	0x4af42400

0800791c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007922:	f7ff fe81 	bl	8007628 <HAL_RCC_GetSysClockFreq>
 8007926:	4602      	mov	r2, r0
 8007928:	4b10      	ldr	r3, [pc, #64]	; (800796c <HAL_RCC_GetHCLKFreq+0x50>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	0a1b      	lsrs	r3, r3, #8
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	490f      	ldr	r1, [pc, #60]	; (8007970 <HAL_RCC_GetHCLKFreq+0x54>)
 8007934:	5ccb      	ldrb	r3, [r1, r3]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <HAL_RCC_GetHCLKFreq+0x50>)
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <HAL_RCC_GetHCLKFreq+0x54>)
 800794a:	5cd3      	ldrb	r3, [r2, r3]
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	4a07      	ldr	r2, [pc, #28]	; (8007974 <HAL_RCC_GetHCLKFreq+0x58>)
 8007958:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800795a:	4a07      	ldr	r2, [pc, #28]	; (8007978 <HAL_RCC_GetHCLKFreq+0x5c>)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007960:	4b04      	ldr	r3, [pc, #16]	; (8007974 <HAL_RCC_GetHCLKFreq+0x58>)
 8007962:	681b      	ldr	r3, [r3, #0]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	58024400 	.word	0x58024400
 8007970:	0801ae9c 	.word	0x0801ae9c
 8007974:	2400000c 	.word	0x2400000c
 8007978:	24000008 	.word	0x24000008

0800797c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007980:	f7ff ffcc 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8007984:	4602      	mov	r2, r0
 8007986:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	091b      	lsrs	r3, r3, #4
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4904      	ldr	r1, [pc, #16]	; (80079a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007992:	5ccb      	ldrb	r3, [r1, r3]
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	58024400 	.word	0x58024400
 80079a4:	0801ae9c 	.word	0x0801ae9c

080079a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079ac:	f7ff ffb6 	bl	800791c <HAL_RCC_GetHCLKFreq>
 80079b0:	4602      	mov	r2, r0
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	4904      	ldr	r1, [pc, #16]	; (80079d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079be:	5ccb      	ldrb	r3, [r1, r3]
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	58024400 	.word	0x58024400
 80079d0:	0801ae9c 	.word	0x0801ae9c

080079d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079dc:	2300      	movs	r3, #0
 80079de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079e0:	2300      	movs	r3, #0
 80079e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d03f      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079f8:	d02a      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079fe:	d824      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a04:	d018      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a0a:	d81e      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a14:	d007      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a16:	e018      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a18:	4bab      	ldr	r3, [pc, #684]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	4aaa      	ldr	r2, [pc, #680]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a24:	e015      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 f989 	bl	8008d44 <RCCEx_PLL2_Config>
 8007a32:	4603      	mov	r3, r0
 8007a34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a36:	e00c      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3324      	adds	r3, #36	; 0x24
 8007a3c:	2102      	movs	r1, #2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f001 fa32 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a48:	e003      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4e:	e000      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d109      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a58:	4b9b      	ldr	r3, [pc, #620]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a64:	4998      	ldr	r1, [pc, #608]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	650b      	str	r3, [r1, #80]	; 0x50
 8007a6a:	e001      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d03d      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d826      	bhi.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007aa1 	.word	0x08007aa1
 8007a90:	08007aaf 	.word	0x08007aaf
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	08007ad9 	.word	0x08007ad9
 8007a9c:	08007ad9 	.word	0x08007ad9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa0:	4b89      	ldr	r3, [pc, #548]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	4a88      	ldr	r2, [pc, #544]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aac:	e015      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 f945 	bl	8008d44 <RCCEx_PLL2_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007abe:	e00c      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3324      	adds	r3, #36	; 0x24
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 f9ee 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ad0:	e003      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad6:	e000      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ae0:	4b79      	ldr	r3, [pc, #484]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	f023 0207 	bic.w	r2, r3, #7
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	4976      	ldr	r1, [pc, #472]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	650b      	str	r3, [r1, #80]	; 0x50
 8007af2:	e001      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d051      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b0a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b0e:	d036      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b10:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007b14:	d830      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b1a:	d032      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b20:	d82a      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b26:	d02e      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007b28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b2c:	d824      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b32:	d018      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b38:	d81e      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b42:	d007      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007b44:	e018      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b46:	4b60      	ldr	r3, [pc, #384]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	4a5f      	ldr	r2, [pc, #380]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b52:	e019      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 f8f2 	bl	8008d44 <RCCEx_PLL2_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b64:	e010      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3324      	adds	r3, #36	; 0x24
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f99b 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b76:	e007      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7c:	e004      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007b7e:	bf00      	nop
 8007b80:	e002      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007b82:	bf00      	nop
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b8e:	4b4e      	ldr	r3, [pc, #312]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b92:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b9c:	494a      	ldr	r1, [pc, #296]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	658b      	str	r3, [r1, #88]	; 0x58
 8007ba2:	e001      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d051      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bbe:	d036      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007bc0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007bc4:	d830      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bca:	d032      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bd0:	d82a      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bd6:	d02e      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bdc:	d824      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be2:	d018      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be8:	d81e      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bf2:	d007      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007bf4:	e018      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf6:	4b34      	ldr	r3, [pc, #208]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	4a33      	ldr	r2, [pc, #204]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c02:	e019      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3304      	adds	r3, #4
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f89a 	bl	8008d44 <RCCEx_PLL2_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c14:	e010      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3324      	adds	r3, #36	; 0x24
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 f943 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c26:	e007      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2c:	e004      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e002      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c3e:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c42:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c4c:	491e      	ldr	r1, [pc, #120]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	658b      	str	r3, [r1, #88]	; 0x58
 8007c52:	e001      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d035      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c68:	2b30      	cmp	r3, #48	; 0x30
 8007c6a:	d01c      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007c6c:	2b30      	cmp	r3, #48	; 0x30
 8007c6e:	d817      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d00c      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d813      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d016      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007c7c:	2b10      	cmp	r3, #16
 8007c7e:	d10f      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c80:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007c8c:	e00e      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3304      	adds	r3, #4
 8007c92:	2102      	movs	r1, #2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f855 	bl	8008d44 <RCCEx_PLL2_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007c9e:	e005      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca4:	e002      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007ca6:	bf00      	nop
 8007ca8:	e000      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10c      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbe:	4902      	ldr	r1, [pc, #8]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007cc4:	e004      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007cc6:	bf00      	nop
 8007cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d047      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce4:	d030      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cea:	d82a      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cf0:	d02c      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007cf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cf6:	d824      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cfc:	d018      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d02:	d81e      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0c:	d007      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007d0e:	e018      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d10:	4bac      	ldr	r3, [pc, #688]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4aab      	ldr	r2, [pc, #684]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d1c:	e017      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3304      	adds	r3, #4
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 f80d 	bl	8008d44 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d2e:	e00e      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3324      	adds	r3, #36	; 0x24
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 f8b6 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d40:	e005      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	75fb      	strb	r3, [r7, #23]
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d48:	bf00      	nop
 8007d4a:	e000      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d54:	4b9b      	ldr	r3, [pc, #620]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d58:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	4998      	ldr	r1, [pc, #608]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	650b      	str	r3, [r1, #80]	; 0x50
 8007d66:	e001      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d049      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d80:	d02e      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d86:	d828      	bhi.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d8c:	d02a      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d92:	d822      	bhi.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007d94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d98:	d026      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d9e:	d81c      	bhi.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da4:	d010      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007daa:	d816      	bhi.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01d      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db4:	d111      	bne.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3304      	adds	r3, #4
 8007dba:	2101      	movs	r1, #1
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 ffc1 	bl	8008d44 <RCCEx_PLL2_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007dc6:	e012      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3324      	adds	r3, #36	; 0x24
 8007dcc:	2101      	movs	r1, #1
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 f86a 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007dd8:	e009      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8007dde:	e006      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007de0:	bf00      	nop
 8007de2:	e004      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007de4:	bf00      	nop
 8007de6:	e002      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007df4:	4b73      	ldr	r3, [pc, #460]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e00:	4970      	ldr	r1, [pc, #448]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	650b      	str	r3, [r1, #80]	; 0x50
 8007e06:	e001      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d04b      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e22:	d02e      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e28:	d828      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2e:	d02a      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e34:	d822      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e3a:	d026      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e40:	d81c      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e46:	d010      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4c:	d816      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01d      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e56:	d111      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 ff70 	bl	8008d44 <RCCEx_PLL2_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e68:	e012      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3324      	adds	r3, #36	; 0x24
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f819 	bl	8008ea8 <RCCEx_PLL3_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e7a:	e009      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e80:	e006      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e82:	bf00      	nop
 8007e84:	e004      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e86:	bf00      	nop
 8007e88:	e002      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e8a:	bf00      	nop
 8007e8c:	e000      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e96:	4b4b      	ldr	r3, [pc, #300]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ea4:	4947      	ldr	r1, [pc, #284]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	658b      	str	r3, [r1, #88]	; 0x58
 8007eaa:	e001      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d02f      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eca:	d814      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d015      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ed4:	d10f      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed6:	4b3b      	ldr	r3, [pc, #236]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	4a3a      	ldr	r2, [pc, #232]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ee2:	e00c      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	2101      	movs	r1, #1
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 ff2a 	bl	8008d44 <RCCEx_PLL2_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ef4:	e003      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8007efa:	e000      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f04:	4b2f      	ldr	r3, [pc, #188]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f10:	492c      	ldr	r1, [pc, #176]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	650b      	str	r3, [r1, #80]	; 0x50
 8007f16:	e001      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d032      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d81b      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f6f 	.word	0x08007f6f
 8007f3c:	08007f49 	.word	0x08007f49
 8007f40:	08007f57 	.word	0x08007f57
 8007f44:	08007f6f 	.word	0x08007f6f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f48:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f54:	e00c      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fef1 	bl	8008d44 <RCCEx_PLL2_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007f66:	e003      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6c:	e000      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d109      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f76:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f7a:	f023 0203 	bic.w	r2, r3, #3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	4910      	ldr	r1, [pc, #64]	; (8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f88:	e001      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 808a 	beq.w	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fa8:	f7fb ff68 	bl	8003e7c <HAL_GetTick>
 8007fac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fae:	e00d      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb0:	f7fb ff64 	bl	8003e7c <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b64      	cmp	r3, #100	; 0x64
 8007fbc:	d906      	bls.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	75fb      	strb	r3, [r7, #23]
        break;
 8007fc2:	e009      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007fc4:	58024400 	.word	0x58024400
 8007fc8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fcc:	4bb9      	ldr	r3, [pc, #740]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0eb      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d166      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007fde:	4bb6      	ldr	r3, [pc, #728]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007fe0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fe8:	4053      	eors	r3, r2
 8007fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d013      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ff2:	4bb1      	ldr	r3, [pc, #708]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ffc:	4bae      	ldr	r3, [pc, #696]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008000:	4aad      	ldr	r2, [pc, #692]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008006:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008008:	4bab      	ldr	r3, [pc, #684]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800800a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800c:	4aaa      	ldr	r2, [pc, #680]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800800e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008012:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008014:	4aa8      	ldr	r2, [pc, #672]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008024:	d115      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008026:	f7fb ff29 	bl	8003e7c <HAL_GetTick>
 800802a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800802c:	e00b      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800802e:	f7fb ff25 	bl	8003e7c <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	f241 3288 	movw	r2, #5000	; 0x1388
 800803c:	4293      	cmp	r3, r2
 800803e:	d902      	bls.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	75fb      	strb	r3, [r7, #23]
            break;
 8008044:	e005      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008046:	4b9c      	ldr	r3, [pc, #624]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0ed      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d126      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800805e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008066:	d10d      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8008068:	4b93      	ldr	r3, [pc, #588]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008076:	0919      	lsrs	r1, r3, #4
 8008078:	4b90      	ldr	r3, [pc, #576]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800807a:	400b      	ands	r3, r1
 800807c:	498e      	ldr	r1, [pc, #568]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800807e:	4313      	orrs	r3, r2
 8008080:	610b      	str	r3, [r1, #16]
 8008082:	e005      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008084:	4b8c      	ldr	r3, [pc, #560]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	4a8b      	ldr	r2, [pc, #556]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800808a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800808e:	6113      	str	r3, [r2, #16]
 8008090:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800809a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800809e:	4986      	ldr	r1, [pc, #536]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	670b      	str	r3, [r1, #112]	; 0x70
 80080a4:	e004      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	75bb      	strb	r3, [r7, #22]
 80080aa:	e001      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d07e      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080c0:	2b28      	cmp	r3, #40	; 0x28
 80080c2:	d867      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80080c4:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	0800819b 	.word	0x0800819b
 80080d0:	08008195 	.word	0x08008195
 80080d4:	08008195 	.word	0x08008195
 80080d8:	08008195 	.word	0x08008195
 80080dc:	08008195 	.word	0x08008195
 80080e0:	08008195 	.word	0x08008195
 80080e4:	08008195 	.word	0x08008195
 80080e8:	08008195 	.word	0x08008195
 80080ec:	08008171 	.word	0x08008171
 80080f0:	08008195 	.word	0x08008195
 80080f4:	08008195 	.word	0x08008195
 80080f8:	08008195 	.word	0x08008195
 80080fc:	08008195 	.word	0x08008195
 8008100:	08008195 	.word	0x08008195
 8008104:	08008195 	.word	0x08008195
 8008108:	08008195 	.word	0x08008195
 800810c:	08008183 	.word	0x08008183
 8008110:	08008195 	.word	0x08008195
 8008114:	08008195 	.word	0x08008195
 8008118:	08008195 	.word	0x08008195
 800811c:	08008195 	.word	0x08008195
 8008120:	08008195 	.word	0x08008195
 8008124:	08008195 	.word	0x08008195
 8008128:	08008195 	.word	0x08008195
 800812c:	0800819b 	.word	0x0800819b
 8008130:	08008195 	.word	0x08008195
 8008134:	08008195 	.word	0x08008195
 8008138:	08008195 	.word	0x08008195
 800813c:	08008195 	.word	0x08008195
 8008140:	08008195 	.word	0x08008195
 8008144:	08008195 	.word	0x08008195
 8008148:	08008195 	.word	0x08008195
 800814c:	0800819b 	.word	0x0800819b
 8008150:	08008195 	.word	0x08008195
 8008154:	08008195 	.word	0x08008195
 8008158:	08008195 	.word	0x08008195
 800815c:	08008195 	.word	0x08008195
 8008160:	08008195 	.word	0x08008195
 8008164:	08008195 	.word	0x08008195
 8008168:	08008195 	.word	0x08008195
 800816c:	0800819b 	.word	0x0800819b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3304      	adds	r3, #4
 8008174:	2101      	movs	r1, #1
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fde4 	bl	8008d44 <RCCEx_PLL2_Config>
 800817c:	4603      	mov	r3, r0
 800817e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008180:	e00c      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3324      	adds	r3, #36	; 0x24
 8008186:	2101      	movs	r1, #1
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fe8d 	bl	8008ea8 <RCCEx_PLL3_Config>
 800818e:	4603      	mov	r3, r0
 8008190:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008192:	e003      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800819a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081a2:	4b45      	ldr	r3, [pc, #276]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ae:	4942      	ldr	r1, [pc, #264]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	654b      	str	r3, [r1, #84]	; 0x54
 80081b4:	e001      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d037      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d820      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	08008217 	.word	0x08008217
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	080081ff 	.word	0x080081ff
 80081e0:	08008217 	.word	0x08008217
 80081e4:	08008217 	.word	0x08008217
 80081e8:	08008217 	.word	0x08008217
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3304      	adds	r3, #4
 80081f0:	2101      	movs	r1, #1
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fda6 	bl	8008d44 <RCCEx_PLL2_Config>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80081fc:	e00c      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	2101      	movs	r1, #1
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fe4f 	bl	8008ea8 <RCCEx_PLL3_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800820e:	e003      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
      break;
 8008214:	e000      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800821e:	4b26      	ldr	r3, [pc, #152]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008222:	f023 0207 	bic.w	r2, r3, #7
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822a:	4923      	ldr	r1, [pc, #140]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800822c:	4313      	orrs	r3, r2
 800822e:	654b      	str	r3, [r1, #84]	; 0x54
 8008230:	e001      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d040      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008248:	2b05      	cmp	r3, #5
 800824a:	d821      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	08008297 	.word	0x08008297
 8008258:	0800826d 	.word	0x0800826d
 800825c:	0800827f 	.word	0x0800827f
 8008260:	08008297 	.word	0x08008297
 8008264:	08008297 	.word	0x08008297
 8008268:	08008297 	.word	0x08008297
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	2101      	movs	r1, #1
 8008272:	4618      	mov	r0, r3
 8008274:	f000 fd66 	bl	8008d44 <RCCEx_PLL2_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800827c:	e00c      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3324      	adds	r3, #36	; 0x24
 8008282:	2101      	movs	r1, #1
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fe0f 	bl	8008ea8 <RCCEx_PLL3_Config>
 800828a:	4603      	mov	r3, r0
 800828c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800828e:	e003      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
      break;
 8008294:	e000      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d110      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	f023 0207 	bic.w	r2, r3, #7
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ac:	4902      	ldr	r1, [pc, #8]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	658b      	str	r3, [r1, #88]	; 0x58
 80082b2:	e007      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80082b4:	58024800 	.word	0x58024800
 80082b8:	58024400 	.word	0x58024400
 80082bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d04b      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082da:	d02e      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80082dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082e0:	d828      	bhi.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e6:	d02a      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ec:	d822      	bhi.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80082ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082f2:	d026      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80082f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082f8:	d81c      	bhi.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80082fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fe:	d010      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008304:	d816      	bhi.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01d      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800830a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830e:	d111      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	2100      	movs	r1, #0
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fd14 	bl	8008d44 <RCCEx_PLL2_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008320:	e012      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3324      	adds	r3, #36	; 0x24
 8008326:	2102      	movs	r1, #2
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fdbd 	bl	8008ea8 <RCCEx_PLL3_Config>
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008332:	e009      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
      break;
 8008338:	e006      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800833a:	bf00      	nop
 800833c:	e004      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10a      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800834e:	4bb2      	ldr	r3, [pc, #712]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	49ae      	ldr	r1, [pc, #696]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800835e:	4313      	orrs	r3, r2
 8008360:	654b      	str	r3, [r1, #84]	; 0x54
 8008362:	e001      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d04b      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800837a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800837e:	d02e      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008380:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008384:	d828      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838a:	d02a      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800838c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008390:	d822      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008396:	d026      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800839c:	d81c      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800839e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a2:	d010      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80083a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a8:	d816      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01d      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80083ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b2:	d111      	bne.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fcc2 	bl	8008d44 <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083c4:	e012      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3324      	adds	r3, #36	; 0x24
 80083ca:	2102      	movs	r1, #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fd6b 	bl	8008ea8 <RCCEx_PLL3_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80083d6:	e009      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
      break;
 80083dc:	e006      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083de:	bf00      	nop
 80083e0:	e004      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083e2:	bf00      	nop
 80083e4:	e002      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083e6:	bf00      	nop
 80083e8:	e000      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80083ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083f2:	4b89      	ldr	r3, [pc, #548]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008400:	4985      	ldr	r1, [pc, #532]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008402:	4313      	orrs	r3, r2
 8008404:	658b      	str	r3, [r1, #88]	; 0x58
 8008406:	e001      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008414:	2b00      	cmp	r3, #0
 8008416:	d04b      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800841e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008422:	d02e      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008424:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008428:	d828      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800842a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800842e:	d02a      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008434:	d822      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008436:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800843a:	d026      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800843c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008440:	d81c      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008446:	d010      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800844c:	d816      	bhi.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01d      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008456:	d111      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3304      	adds	r3, #4
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fc70 	bl	8008d44 <RCCEx_PLL2_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008468:	e012      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3324      	adds	r3, #36	; 0x24
 800846e:	2102      	movs	r1, #2
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fd19 	bl	8008ea8 <RCCEx_PLL3_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800847a:	e009      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
      break;
 8008480:	e006      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008482:	bf00      	nop
 8008484:	e004      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008486:	bf00      	nop
 8008488:	e002      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800848e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008496:	4b60      	ldr	r3, [pc, #384]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084a4:	495c      	ldr	r1, [pc, #368]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	658b      	str	r3, [r1, #88]	; 0x58
 80084aa:	e001      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d018      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d10a      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3324      	adds	r3, #36	; 0x24
 80084ca:	2102      	movs	r1, #2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fceb 	bl	8008ea8 <RCCEx_PLL3_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80084dc:	4b4e      	ldr	r3, [pc, #312]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084e8:	494b      	ldr	r1, [pc, #300]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0310 	and.w	r3, r3, #16
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01a      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008504:	d10a      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	2102      	movs	r1, #2
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fccb 	bl	8008ea8 <RCCEx_PLL3_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800851c:	4b3e      	ldr	r3, [pc, #248]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852a:	493b      	ldr	r1, [pc, #236]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800852c:	4313      	orrs	r3, r2
 800852e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d034      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008546:	d01d      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800854c:	d817      	bhi.n	800857e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d009      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008558:	e011      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3304      	adds	r3, #4
 800855e:	2100      	movs	r1, #0
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fbef 	bl	8008d44 <RCCEx_PLL2_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800856a:	e00c      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3324      	adds	r3, #36	; 0x24
 8008570:	2102      	movs	r1, #2
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fc98 	bl	8008ea8 <RCCEx_PLL3_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800857c:	e003      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	75fb      	strb	r3, [r7, #23]
      break;
 8008582:	e000      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800859a:	491f      	ldr	r1, [pc, #124]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800859c:	4313      	orrs	r3, r2
 800859e:	658b      	str	r3, [r1, #88]	; 0x58
 80085a0:	e001      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d036      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085bc:	d01c      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80085be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085c2:	d816      	bhi.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80085c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c8:	d003      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80085ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ce:	d007      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80085d0:	e00f      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d6:	4a10      	ldr	r2, [pc, #64]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80085d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80085de:	e00c      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3324      	adds	r3, #36	; 0x24
 80085e4:	2101      	movs	r1, #1
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fc5e 	bl	8008ea8 <RCCEx_PLL3_Config>
 80085ec:	4603      	mov	r3, r0
 80085ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80085f0:	e003      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	75fb      	strb	r3, [r7, #23]
      break;
 80085f6:	e000      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80085f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800860e:	4902      	ldr	r1, [pc, #8]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008610:	4313      	orrs	r3, r2
 8008612:	654b      	str	r3, [r1, #84]	; 0x54
 8008614:	e004      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008616:	bf00      	nop
 8008618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d029      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008638:	d007      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800863a:	e00f      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863c:	4b61      	ldr	r3, [pc, #388]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	4a60      	ldr	r2, [pc, #384]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008648:	e00b      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3304      	adds	r3, #4
 800864e:	2102      	movs	r1, #2
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fb77 	bl	8008d44 <RCCEx_PLL2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800865a:	e002      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]
      break;
 8008660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008668:	4b56      	ldr	r3, [pc, #344]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800866a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008674:	4953      	ldr	r1, [pc, #332]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008676:	4313      	orrs	r3, r2
 8008678:	64cb      	str	r3, [r1, #76]	; 0x4c
 800867a:	e001      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3324      	adds	r3, #36	; 0x24
 8008690:	2102      	movs	r1, #2
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fc08 	bl	8008ea8 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d030      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086b6:	d017      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80086b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086bc:	d811      	bhi.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80086be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c2:	d013      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80086c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c8:	d80b      	bhi.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d010      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80086ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d2:	d106      	bne.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d4:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	4a3a      	ldr	r2, [pc, #232]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80086e0:	e007      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]
      break;
 80086e6:	e004      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80086e8:	bf00      	nop
 80086ea:	e002      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80086ec:	bf00      	nop
 80086ee:	e000      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80086f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086f8:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008704:	492f      	ldr	r1, [pc, #188]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008706:	4313      	orrs	r3, r2
 8008708:	654b      	str	r3, [r1, #84]	; 0x54
 800870a:	e001      	b.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800871c:	4b29      	ldr	r3, [pc, #164]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800871e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	4926      	ldr	r1, [pc, #152]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800872a:	4313      	orrs	r3, r2
 800872c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d008      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800873a:	4b22      	ldr	r3, [pc, #136]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800873c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008746:	491f      	ldr	r1, [pc, #124]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008748:	4313      	orrs	r3, r2
 800874a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00d      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800875e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008762:	6113      	str	r3, [r2, #16]
 8008764:	4b17      	ldr	r3, [pc, #92]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800876e:	4915      	ldr	r1, [pc, #84]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008770:	4313      	orrs	r3, r2
 8008772:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	da08      	bge.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800877c:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800877e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008780:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008788:	490e      	ldr	r1, [pc, #56]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800878a:	4313      	orrs	r3, r2
 800878c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800879c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a8:	4906      	ldr	r1, [pc, #24]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80087ae:	7dbb      	ldrb	r3, [r7, #22]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e000      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	58024400 	.word	0x58024400

080087c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087cc:	f7ff f8a6 	bl	800791c <HAL_RCC_GetHCLKFreq>
 80087d0:	4602      	mov	r2, r0
 80087d2:	4b06      	ldr	r3, [pc, #24]	; (80087ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	091b      	lsrs	r3, r3, #4
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087de:	5ccb      	ldrb	r3, [r1, r3]
 80087e0:	f003 031f 	and.w	r3, r3, #31
 80087e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	58024400 	.word	0x58024400
 80087f0:	0801ae9c 	.word	0x0801ae9c

080087f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b089      	sub	sp, #36	; 0x24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087fc:	4ba1      	ldr	r3, [pc, #644]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008806:	4b9f      	ldr	r3, [pc, #636]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	0b1b      	lsrs	r3, r3, #12
 800880c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008810:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008812:	4b9c      	ldr	r3, [pc, #624]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	091b      	lsrs	r3, r3, #4
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800881e:	4b99      	ldr	r3, [pc, #612]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	08db      	lsrs	r3, r3, #3
 8008824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	fb02 f303 	mul.w	r3, r2, r3
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 8111 	beq.w	8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b02      	cmp	r3, #2
 8008846:	f000 8083 	beq.w	8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b02      	cmp	r3, #2
 800884e:	f200 80a1 	bhi.w	8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d056      	beq.n	800890c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800885e:	e099      	b.n	8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008860:	4b88      	ldr	r3, [pc, #544]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d02d      	beq.n	80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800886c:	4b85      	ldr	r3, [pc, #532]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	08db      	lsrs	r3, r3, #3
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	4a84      	ldr	r2, [pc, #528]	; (8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
 800887c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008896:	4b7b      	ldr	r3, [pc, #492]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088c6:	e087      	b.n	80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088da:	4b6a      	ldr	r3, [pc, #424]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800890a:	e065      	b.n	80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800891a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891e:	4b59      	ldr	r3, [pc, #356]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008932:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800894e:	e043      	b.n	80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800895e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008962:	4b48      	ldr	r3, [pc, #288]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008972:	ed97 6a03 	vldr	s12, [r7, #12]
 8008976:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800897a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008992:	e021      	b.n	80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a6:	4b37      	ldr	r3, [pc, #220]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80089d8:	4b2a      	ldr	r3, [pc, #168]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	0a5b      	lsrs	r3, r3, #9
 80089de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089fe:	ee17 2a90 	vmov	r2, s15
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008a06:	4b1f      	ldr	r3, [pc, #124]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	0c1b      	lsrs	r3, r3, #16
 8008a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2c:	ee17 2a90 	vmov	r2, s15
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008a34:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	0e1b      	lsrs	r3, r3, #24
 8008a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5a:	ee17 2a90 	vmov	r2, s15
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a62:	e008      	b.n	8008a76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	609a      	str	r2, [r3, #8]
}
 8008a76:	bf00      	nop
 8008a78:	3724      	adds	r7, #36	; 0x24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	58024400 	.word	0x58024400
 8008a88:	03d09000 	.word	0x03d09000
 8008a8c:	46000000 	.word	0x46000000
 8008a90:	4c742400 	.word	0x4c742400
 8008a94:	4a742400 	.word	0x4a742400
 8008a98:	4af42400 	.word	0x4af42400

08008a9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b089      	sub	sp, #36	; 0x24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aa4:	4ba1      	ldr	r3, [pc, #644]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008aae:	4b9f      	ldr	r3, [pc, #636]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab2:	0d1b      	lsrs	r3, r3, #20
 8008ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008aba:	4b9c      	ldr	r3, [pc, #624]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	0a1b      	lsrs	r3, r3, #8
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008ac6:	4b99      	ldr	r3, [pc, #612]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aca:	08db      	lsrs	r3, r3, #3
 8008acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	fb02 f303 	mul.w	r3, r2, r3
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8111 	beq.w	8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	f000 8083 	beq.w	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f200 80a1 	bhi.w	8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d056      	beq.n	8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b06:	e099      	b.n	8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b08:	4b88      	ldr	r3, [pc, #544]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d02d      	beq.n	8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b14:	4b85      	ldr	r3, [pc, #532]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	08db      	lsrs	r3, r3, #3
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	4a84      	ldr	r2, [pc, #528]	; (8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b20:	fa22 f303 	lsr.w	r3, r2, r3
 8008b24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	ee07 3a90 	vmov	s15, r3
 8008b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3e:	4b7b      	ldr	r3, [pc, #492]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b6e:	e087      	b.n	8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b82:	4b6a      	ldr	r3, [pc, #424]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8a:	ee07 3a90 	vmov	s15, r3
 8008b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bb2:	e065      	b.n	8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc6:	4b59      	ldr	r3, [pc, #356]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bf6:	e043      	b.n	8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0a:	4b48      	ldr	r3, [pc, #288]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c3a:	e021      	b.n	8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4e:	4b37      	ldr	r3, [pc, #220]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c80:	4b2a      	ldr	r3, [pc, #168]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c84:	0a5b      	lsrs	r3, r3, #9
 8008c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca6:	ee17 2a90 	vmov	r2, s15
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008cae:	4b1f      	ldr	r3, [pc, #124]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	0c1b      	lsrs	r3, r3, #16
 8008cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd4:	ee17 2a90 	vmov	r2, s15
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008cdc:	4b13      	ldr	r3, [pc, #76]	; (8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce0:	0e1b      	lsrs	r3, r3, #24
 8008ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d02:	ee17 2a90 	vmov	r2, s15
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d0a:	e008      	b.n	8008d1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	609a      	str	r2, [r3, #8]
}
 8008d1e:	bf00      	nop
 8008d20:	3724      	adds	r7, #36	; 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	58024400 	.word	0x58024400
 8008d30:	03d09000 	.word	0x03d09000
 8008d34:	46000000 	.word	0x46000000
 8008d38:	4c742400 	.word	0x4c742400
 8008d3c:	4a742400 	.word	0x4a742400
 8008d40:	4af42400 	.word	0x4af42400

08008d44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d52:	4b53      	ldr	r3, [pc, #332]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d101      	bne.n	8008d62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e099      	b.n	8008e96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d62:	4b4f      	ldr	r3, [pc, #316]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a4e      	ldr	r2, [pc, #312]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008d68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d6e:	f7fb f885 	bl	8003e7c <HAL_GetTick>
 8008d72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d74:	e008      	b.n	8008d88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d76:	f7fb f881 	bl	8003e7c <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d901      	bls.n	8008d88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e086      	b.n	8008e96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d88:	4b45      	ldr	r3, [pc, #276]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1f0      	bne.n	8008d76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d94:	4b42      	ldr	r3, [pc, #264]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	031b      	lsls	r3, r3, #12
 8008da2:	493f      	ldr	r1, [pc, #252]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	628b      	str	r3, [r1, #40]	; 0x28
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	025b      	lsls	r3, r3, #9
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	041b      	lsls	r3, r3, #16
 8008dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	061b      	lsls	r3, r3, #24
 8008dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dd8:	4931      	ldr	r1, [pc, #196]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008dde:	4b30      	ldr	r3, [pc, #192]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	492d      	ldr	r1, [pc, #180]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008df0:	4b2b      	ldr	r3, [pc, #172]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	f023 0220 	bic.w	r2, r3, #32
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	4928      	ldr	r1, [pc, #160]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e02:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	4a26      	ldr	r2, [pc, #152]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	f023 0310 	bic.w	r3, r3, #16
 8008e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e0e:	4b24      	ldr	r3, [pc, #144]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e12:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <RCCEx_PLL2_Config+0x160>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	69d2      	ldr	r2, [r2, #28]
 8008e1a:	00d2      	lsls	r2, r2, #3
 8008e1c:	4920      	ldr	r1, [pc, #128]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e22:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e26:	4a1e      	ldr	r2, [pc, #120]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e28:	f043 0310 	orr.w	r3, r3, #16
 8008e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e34:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	4a19      	ldr	r2, [pc, #100]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e40:	e00f      	b.n	8008e62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d106      	bne.n	8008e56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a14      	ldr	r2, [pc, #80]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e54:	e005      	b.n	8008e62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e56:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a11      	ldr	r2, [pc, #68]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e62:	4b0f      	ldr	r3, [pc, #60]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a0e      	ldr	r2, [pc, #56]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e6e:	f7fb f805 	bl	8003e7c <HAL_GetTick>
 8008e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e74:	e008      	b.n	8008e88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e76:	f7fb f801 	bl	8003e7c <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d901      	bls.n	8008e88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e006      	b.n	8008e96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e88:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <RCCEx_PLL2_Config+0x15c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0f0      	beq.n	8008e76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	58024400 	.word	0x58024400
 8008ea4:	ffff0007 	.word	0xffff0007

08008ea8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eb6:	4b53      	ldr	r3, [pc, #332]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d101      	bne.n	8008ec6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e099      	b.n	8008ffa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ec6:	4b4f      	ldr	r3, [pc, #316]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a4e      	ldr	r2, [pc, #312]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed2:	f7fa ffd3 	bl	8003e7c <HAL_GetTick>
 8008ed6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ed8:	e008      	b.n	8008eec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008eda:	f7fa ffcf 	bl	8003e7c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e086      	b.n	8008ffa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008eec:	4b45      	ldr	r3, [pc, #276]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1f0      	bne.n	8008eda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ef8:	4b42      	ldr	r3, [pc, #264]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	051b      	lsls	r3, r3, #20
 8008f06:	493f      	ldr	r1, [pc, #252]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	025b      	lsls	r3, r3, #9
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	061b      	lsls	r3, r3, #24
 8008f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f3c:	4931      	ldr	r1, [pc, #196]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f42:	4b30      	ldr	r3, [pc, #192]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	492d      	ldr	r1, [pc, #180]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f54:	4b2b      	ldr	r3, [pc, #172]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	4928      	ldr	r1, [pc, #160]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f66:	4b27      	ldr	r3, [pc, #156]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a26      	ldr	r2, [pc, #152]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f72:	4b24      	ldr	r3, [pc, #144]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <RCCEx_PLL3_Config+0x160>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	69d2      	ldr	r2, [r2, #28]
 8008f7e:	00d2      	lsls	r2, r2, #3
 8008f80:	4920      	ldr	r1, [pc, #128]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f86:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f98:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	4a19      	ldr	r2, [pc, #100]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fa4:	e00f      	b.n	8008fc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d106      	bne.n	8008fba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008fac:	4b15      	ldr	r3, [pc, #84]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	4a14      	ldr	r2, [pc, #80]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fb8:	e005      	b.n	8008fc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008fba:	4b12      	ldr	r3, [pc, #72]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	4a11      	ldr	r2, [pc, #68]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fc6:	4b0f      	ldr	r3, [pc, #60]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a0e      	ldr	r2, [pc, #56]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fd2:	f7fa ff53 	bl	8003e7c <HAL_GetTick>
 8008fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fd8:	e008      	b.n	8008fec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008fda:	f7fa ff4f 	bl	8003e7c <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d901      	bls.n	8008fec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e006      	b.n	8008ffa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fec:	4b05      	ldr	r3, [pc, #20]	; (8009004 <RCCEx_PLL3_Config+0x15c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0f0      	beq.n	8008fda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	58024400 	.word	0x58024400
 8009008:	ffff0007 	.word	0xffff0007

0800900c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e0f1      	b.n	8009202 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a78      	ldr	r2, [pc, #480]	; (800920c <HAL_SPI_Init+0x200>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00f      	beq.n	800904e <HAL_SPI_Init+0x42>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a77      	ldr	r2, [pc, #476]	; (8009210 <HAL_SPI_Init+0x204>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00a      	beq.n	800904e <HAL_SPI_Init+0x42>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a75      	ldr	r2, [pc, #468]	; (8009214 <HAL_SPI_Init+0x208>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d005      	beq.n	800904e <HAL_SPI_Init+0x42>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d901      	bls.n	800904e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e0d9      	b.n	8009202 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fba2 	bl	8009798 <SPI_GetPacketSize>
 8009054:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a6c      	ldr	r2, [pc, #432]	; (800920c <HAL_SPI_Init+0x200>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00c      	beq.n	800907a <HAL_SPI_Init+0x6e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a6a      	ldr	r2, [pc, #424]	; (8009210 <HAL_SPI_Init+0x204>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d007      	beq.n	800907a <HAL_SPI_Init+0x6e>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a69      	ldr	r2, [pc, #420]	; (8009214 <HAL_SPI_Init+0x208>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d002      	beq.n	800907a <HAL_SPI_Init+0x6e>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b08      	cmp	r3, #8
 8009078:	d811      	bhi.n	800909e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800907e:	4a63      	ldr	r2, [pc, #396]	; (800920c <HAL_SPI_Init+0x200>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d009      	beq.n	8009098 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a61      	ldr	r2, [pc, #388]	; (8009210 <HAL_SPI_Init+0x204>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d004      	beq.n	8009098 <HAL_SPI_Init+0x8c>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a60      	ldr	r2, [pc, #384]	; (8009214 <HAL_SPI_Init+0x208>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d104      	bne.n	80090a2 <HAL_SPI_Init+0x96>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b10      	cmp	r3, #16
 800909c:	d901      	bls.n	80090a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e0af      	b.n	8009202 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7f9 ffda 	bl	8003070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0201 	bic.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80090de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090e8:	d119      	bne.n	800911e <HAL_SPI_Init+0x112>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090f2:	d103      	bne.n	80090fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d008      	beq.n	800910e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10c      	bne.n	800911e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800910c:	d107      	bne.n	800911e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800911c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	69da      	ldr	r2, [r3, #28]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	431a      	orrs	r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	ea42 0103 	orr.w	r1, r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	430a      	orrs	r2, r1
 800913e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	431a      	orrs	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917e:	ea42 0103 	orr.w	r1, r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d113      	bne.n	80091be <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0201 	bic.w	r2, r2, #1
 80091cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	40013000 	.word	0x40013000
 8009210:	40003800 	.word	0x40003800
 8009214:	40003c00 	.word	0x40003c00

08009218 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af02      	add	r7, sp, #8
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	4613      	mov	r3, r2
 8009226:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3320      	adds	r3, #32
 800922e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_SPI_Transmit+0x2a>
 800923e:	2302      	movs	r3, #2
 8009240:	e1d7      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800924a:	f7fa fe17 	bl	8003e7c <HAL_GetTick>
 800924e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b01      	cmp	r3, #1
 800925a:	d007      	beq.n	800926c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800925c:	2302      	movs	r3, #2
 800925e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009268:	7efb      	ldrb	r3, [r7, #27]
 800926a:	e1c2      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_SPI_Transmit+0x60>
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d107      	bne.n	8009288 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009284:	7efb      	ldrb	r3, [r7, #27]
 8009286:	e1b4      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2203      	movs	r2, #3
 800928c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	88fa      	ldrh	r2, [r7, #6]
 80092a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	88fa      	ldrh	r2, [r7, #6]
 80092aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80092d8:	d107      	bne.n	80092ea <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	4b96      	ldr	r3, [pc, #600]	; (800954c <HAL_SPI_Transmit+0x334>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	88f9      	ldrh	r1, [r7, #6]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	430b      	orrs	r3, r1
 80092fc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009316:	d107      	bne.n	8009328 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b0f      	cmp	r3, #15
 800932e:	d947      	bls.n	80093c0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009330:	e03f      	b.n	80093b2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b02      	cmp	r3, #2
 800933e:	d114      	bne.n	800936a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009350:	1d1a      	adds	r2, r3, #4
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b01      	subs	r3, #1
 8009360:	b29a      	uxth	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009368:	e023      	b.n	80093b2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800936a:	f7fa fd87 	bl	8003e7c <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d803      	bhi.n	8009382 <HAL_SPI_Transmit+0x16a>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009380:	d102      	bne.n	8009388 <HAL_SPI_Transmit+0x170>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d114      	bne.n	80093b2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 f937 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e11f      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1b9      	bne.n	8009332 <HAL_SPI_Transmit+0x11a>
 80093be:	e0f2      	b.n	80095a6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	2b07      	cmp	r3, #7
 80093c6:	f240 80e7 	bls.w	8009598 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80093ca:	e05d      	b.n	8009488 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d132      	bne.n	8009440 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d918      	bls.n	8009418 <HAL_SPI_Transmit+0x200>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d014      	beq.n	8009418 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fe:	1d1a      	adds	r2, r3, #4
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b02      	subs	r3, #2
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009416:	e037      	b.n	8009488 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941c:	881a      	ldrh	r2, [r3, #0]
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009426:	1c9a      	adds	r2, r3, #2
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009432:	b29b      	uxth	r3, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	b29a      	uxth	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800943e:	e023      	b.n	8009488 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009440:	f7fa fd1c 	bl	8003e7c <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d803      	bhi.n	8009458 <HAL_SPI_Transmit+0x240>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d102      	bne.n	800945e <HAL_SPI_Transmit+0x246>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d114      	bne.n	8009488 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f8cc 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e0b4      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800948e:	b29b      	uxth	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d19b      	bne.n	80093cc <HAL_SPI_Transmit+0x1b4>
 8009494:	e087      	b.n	80095a6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d155      	bne.n	8009550 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d918      	bls.n	80094e2 <HAL_SPI_Transmit+0x2ca>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	d914      	bls.n	80094e2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6812      	ldr	r2, [r2, #0]
 80094c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c8:	1d1a      	adds	r2, r3, #4
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b04      	subs	r3, #4
 80094d8:	b29a      	uxth	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80094e0:	e05a      	b.n	8009598 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d917      	bls.n	800951e <HAL_SPI_Transmit+0x306>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d013      	beq.n	800951e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fa:	881a      	ldrh	r2, [r3, #0]
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009504:	1c9a      	adds	r2, r3, #2
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b02      	subs	r3, #2
 8009514:	b29a      	uxth	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800951c:	e03c      	b.n	8009598 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3320      	adds	r3, #32
 8009528:	7812      	ldrb	r2, [r2, #0]
 800952a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009548:	e026      	b.n	8009598 <HAL_SPI_Transmit+0x380>
 800954a:	bf00      	nop
 800954c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009550:	f7fa fc94 	bl	8003e7c <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	429a      	cmp	r2, r3
 800955e:	d803      	bhi.n	8009568 <HAL_SPI_Transmit+0x350>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009566:	d102      	bne.n	800956e <HAL_SPI_Transmit+0x356>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d114      	bne.n	8009598 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f844 	bl	80095fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e02c      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800959e:	b29b      	uxth	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f47f af78 	bne.w	8009496 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2200      	movs	r2, #0
 80095ae:	2108      	movs	r1, #8
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f8c3 	bl	800973c <SPI_WaitOnFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c2:	f043 0220 	orr.w	r2, r3, #32
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f815 	bl	80095fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e000      	b.n	80095f2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80095f0:	7efb      	ldrb	r3, [r7, #27]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop

080095fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0208 	orr.w	r2, r2, #8
 800961a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699a      	ldr	r2, [r3, #24]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0210 	orr.w	r2, r2, #16
 800962a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0201 	bic.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6919      	ldr	r1, [r3, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b3c      	ldr	r3, [pc, #240]	; (8009738 <SPI_CloseTransfer+0x13c>)
 8009648:	400b      	ands	r3, r1
 800964a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800965a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b04      	cmp	r3, #4
 8009666:	d014      	beq.n	8009692 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00f      	beq.n	8009692 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009678:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f042 0220 	orr.w	r2, r2, #32
 8009690:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d014      	beq.n	80096c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00f      	beq.n	80096c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ae:	f043 0204 	orr.w	r2, r3, #4
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d8:	f043 0201 	orr.w	r2, r3, #1
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00f      	beq.n	800971c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009702:	f043 0208 	orr.w	r2, r3, #8
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800971a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800972c:	bf00      	nop
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	fffffc90 	.word	0xfffffc90

0800973c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800974c:	e010      	b.n	8009770 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800974e:	f7fa fb95 	bl	8003e7c <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	429a      	cmp	r2, r3
 800975c:	d803      	bhi.n	8009766 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d102      	bne.n	800976c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e00f      	b.n	8009790 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4013      	ands	r3, r2
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	bf0c      	ite	eq
 8009780:	2301      	moveq	r3, #1
 8009782:	2300      	movne	r3, #0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	429a      	cmp	r2, r3
 800978c:	d0df      	beq.n	800974e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	3301      	adds	r3, #1
 80097a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	3301      	adds	r3, #1
 80097b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	3307      	adds	r3, #7
 80097b6:	08db      	lsrs	r3, r3, #3
 80097b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	fb02 f303 	mul.w	r3, r2, r3
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e049      	b.n	8009874 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d106      	bne.n	80097fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7f9 fcc5 	bl	8003184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2202      	movs	r2, #2
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3304      	adds	r3, #4
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f000 f8b3 	bl	8009978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	d001      	beq.n	8009894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e056      	b.n	8009942 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a2b      	ldr	r2, [pc, #172]	; (8009950 <HAL_TIM_Base_Start+0xd4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d02c      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	d027      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a27      	ldr	r2, [pc, #156]	; (8009954 <HAL_TIM_Base_Start+0xd8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d022      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a26      	ldr	r2, [pc, #152]	; (8009958 <HAL_TIM_Base_Start+0xdc>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d01d      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a24      	ldr	r2, [pc, #144]	; (800995c <HAL_TIM_Base_Start+0xe0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d018      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a23      	ldr	r2, [pc, #140]	; (8009960 <HAL_TIM_Base_Start+0xe4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d013      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a21      	ldr	r2, [pc, #132]	; (8009964 <HAL_TIM_Base_Start+0xe8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d00e      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a20      	ldr	r2, [pc, #128]	; (8009968 <HAL_TIM_Base_Start+0xec>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d009      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a1e      	ldr	r2, [pc, #120]	; (800996c <HAL_TIM_Base_Start+0xf0>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d004      	beq.n	8009900 <HAL_TIM_Base_Start+0x84>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a1d      	ldr	r2, [pc, #116]	; (8009970 <HAL_TIM_Base_Start+0xf4>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d115      	bne.n	800992c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <HAL_TIM_Base_Start+0xf8>)
 8009908:	4013      	ands	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b06      	cmp	r3, #6
 8009910:	d015      	beq.n	800993e <HAL_TIM_Base_Start+0xc2>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009918:	d011      	beq.n	800993e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f042 0201 	orr.w	r2, r2, #1
 8009928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800992a:	e008      	b.n	800993e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0201 	orr.w	r2, r2, #1
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	e000      	b.n	8009940 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40010000 	.word	0x40010000
 8009954:	40000400 	.word	0x40000400
 8009958:	40000800 	.word	0x40000800
 800995c:	40000c00 	.word	0x40000c00
 8009960:	40010400 	.word	0x40010400
 8009964:	40001800 	.word	0x40001800
 8009968:	40014000 	.word	0x40014000
 800996c:	4000e000 	.word	0x4000e000
 8009970:	4000e400 	.word	0x4000e400
 8009974:	00010007 	.word	0x00010007

08009978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a44      	ldr	r2, [pc, #272]	; (8009a9c <TIM_Base_SetConfig+0x124>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d013      	beq.n	80099b8 <TIM_Base_SetConfig+0x40>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009996:	d00f      	beq.n	80099b8 <TIM_Base_SetConfig+0x40>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a41      	ldr	r2, [pc, #260]	; (8009aa0 <TIM_Base_SetConfig+0x128>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d00b      	beq.n	80099b8 <TIM_Base_SetConfig+0x40>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a40      	ldr	r2, [pc, #256]	; (8009aa4 <TIM_Base_SetConfig+0x12c>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d007      	beq.n	80099b8 <TIM_Base_SetConfig+0x40>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a3f      	ldr	r2, [pc, #252]	; (8009aa8 <TIM_Base_SetConfig+0x130>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d003      	beq.n	80099b8 <TIM_Base_SetConfig+0x40>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a3e      	ldr	r2, [pc, #248]	; (8009aac <TIM_Base_SetConfig+0x134>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d108      	bne.n	80099ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a33      	ldr	r2, [pc, #204]	; (8009a9c <TIM_Base_SetConfig+0x124>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d027      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d023      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a30      	ldr	r2, [pc, #192]	; (8009aa0 <TIM_Base_SetConfig+0x128>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d01f      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a2f      	ldr	r2, [pc, #188]	; (8009aa4 <TIM_Base_SetConfig+0x12c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d01b      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a2e      	ldr	r2, [pc, #184]	; (8009aa8 <TIM_Base_SetConfig+0x130>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d017      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a2d      	ldr	r2, [pc, #180]	; (8009aac <TIM_Base_SetConfig+0x134>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d013      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a2c      	ldr	r2, [pc, #176]	; (8009ab0 <TIM_Base_SetConfig+0x138>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00f      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a2b      	ldr	r2, [pc, #172]	; (8009ab4 <TIM_Base_SetConfig+0x13c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d00b      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <TIM_Base_SetConfig+0x140>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d007      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a29      	ldr	r2, [pc, #164]	; (8009abc <TIM_Base_SetConfig+0x144>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d003      	beq.n	8009a22 <TIM_Base_SetConfig+0xaa>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a28      	ldr	r2, [pc, #160]	; (8009ac0 <TIM_Base_SetConfig+0x148>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d108      	bne.n	8009a34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a10      	ldr	r2, [pc, #64]	; (8009a9c <TIM_Base_SetConfig+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00f      	beq.n	8009a80 <TIM_Base_SetConfig+0x108>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a12      	ldr	r2, [pc, #72]	; (8009aac <TIM_Base_SetConfig+0x134>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00b      	beq.n	8009a80 <TIM_Base_SetConfig+0x108>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a11      	ldr	r2, [pc, #68]	; (8009ab0 <TIM_Base_SetConfig+0x138>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d007      	beq.n	8009a80 <TIM_Base_SetConfig+0x108>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a10      	ldr	r2, [pc, #64]	; (8009ab4 <TIM_Base_SetConfig+0x13c>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_Base_SetConfig+0x108>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a0f      	ldr	r2, [pc, #60]	; (8009ab8 <TIM_Base_SetConfig+0x140>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d103      	bne.n	8009a88 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	615a      	str	r2, [r3, #20]
}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	40010000 	.word	0x40010000
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40000800 	.word	0x40000800
 8009aa8:	40000c00 	.word	0x40000c00
 8009aac:	40010400 	.word	0x40010400
 8009ab0:	40014000 	.word	0x40014000
 8009ab4:	40014400 	.word	0x40014400
 8009ab8:	40014800 	.word	0x40014800
 8009abc:	4000e000 	.word	0x4000e000
 8009ac0:	4000e400 	.word	0x4000e400

08009ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d101      	bne.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ad8:	2302      	movs	r3, #2
 8009ada:	e077      	b.n	8009bcc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a35      	ldr	r2, [pc, #212]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d004      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a34      	ldr	r2, [pc, #208]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d108      	bne.n	8009b22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a25      	ldr	r2, [pc, #148]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d02c      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4e:	d027      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a22      	ldr	r2, [pc, #136]	; (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d022      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a21      	ldr	r2, [pc, #132]	; (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d01d      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a1f      	ldr	r2, [pc, #124]	; (8009be8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d018      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a1a      	ldr	r2, [pc, #104]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d013      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00e      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1a      	ldr	r2, [pc, #104]	; (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d009      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a18      	ldr	r2, [pc, #96]	; (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a17      	ldr	r2, [pc, #92]	; (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10c      	bne.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40010400 	.word	0x40010400
 8009be0:	40000400 	.word	0x40000400
 8009be4:	40000800 	.word	0x40000800
 8009be8:	40000c00 	.word	0x40000c00
 8009bec:	40001800 	.word	0x40001800
 8009bf0:	40014000 	.word	0x40014000
 8009bf4:	4000e000 	.word	0x4000e000
 8009bf8:	4000e400 	.word	0x4000e400

08009bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e042      	b.n	8009c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f9 fad1 	bl	80031c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2224      	movs	r2, #36	; 0x24
 8009c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f8c2 	bl	8009dc8 <UART_SetConfig>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e022      	b.n	8009c94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 ff14 	bl	800aa84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689a      	ldr	r2, [r3, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 ff9b 	bl	800abc8 <UART_CheckIdleState>
 8009c92:	4603      	mov	r3, r0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	603b      	str	r3, [r7, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	f040 8083 	bne.w	8009dbe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <HAL_UART_Transmit+0x28>
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e07b      	b.n	8009dc0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <HAL_UART_Transmit+0x3a>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e074      	b.n	8009dc0 <HAL_UART_Transmit+0x124>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2221      	movs	r2, #33	; 0x21
 8009cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cee:	f7fa f8c5 	bl	8003e7c <HAL_GetTick>
 8009cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	88fa      	ldrh	r2, [r7, #6]
 8009cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	88fa      	ldrh	r2, [r7, #6]
 8009d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0c:	d108      	bne.n	8009d20 <HAL_UART_Transmit+0x84>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d104      	bne.n	8009d20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	61bb      	str	r3, [r7, #24]
 8009d1e:	e003      	b.n	8009d28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009d30:	e02c      	b.n	8009d8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2180      	movs	r1, #128	; 0x80
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 ff8e 	bl	800ac5e <UART_WaitOnFlagUntilTimeout>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e039      	b.n	8009dc0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	3302      	adds	r3, #2
 8009d66:	61bb      	str	r3, [r7, #24]
 8009d68:	e007      	b.n	8009d7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	781a      	ldrb	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	3b01      	subs	r3, #1
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1cc      	bne.n	8009d32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2140      	movs	r1, #64	; 0x40
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 ff5b 	bl	800ac5e <UART_WaitOnFlagUntilTimeout>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e006      	b.n	8009dc0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e000      	b.n	8009dc0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009dbe:	2302      	movs	r3, #2
  }
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dc8:	b5b0      	push	{r4, r5, r7, lr}
 8009dca:	b08e      	sub	sp, #56	; 0x38
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	689a      	ldr	r2, [r3, #8]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4bbf      	ldr	r3, [pc, #764]	; (800a0f4 <UART_SetConfig+0x32c>)
 8009df6:	4013      	ands	r3, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6812      	ldr	r2, [r2, #0]
 8009dfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4ab5      	ldr	r2, [pc, #724]	; (800a0f8 <UART_SetConfig+0x330>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d004      	beq.n	8009e32 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	4bb0      	ldr	r3, [pc, #704]	; (800a0fc <UART_SetConfig+0x334>)
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e42:	430b      	orrs	r3, r1
 8009e44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	f023 010f 	bic.w	r1, r3, #15
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4aa7      	ldr	r2, [pc, #668]	; (800a100 <UART_SetConfig+0x338>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d176      	bne.n	8009f54 <UART_SetConfig+0x18c>
 8009e66:	4ba7      	ldr	r3, [pc, #668]	; (800a104 <UART_SetConfig+0x33c>)
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e6e:	2b28      	cmp	r3, #40	; 0x28
 8009e70:	d86c      	bhi.n	8009f4c <UART_SetConfig+0x184>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0xb0>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009f1d 	.word	0x08009f1d
 8009e7c:	08009f4d 	.word	0x08009f4d
 8009e80:	08009f4d 	.word	0x08009f4d
 8009e84:	08009f4d 	.word	0x08009f4d
 8009e88:	08009f4d 	.word	0x08009f4d
 8009e8c:	08009f4d 	.word	0x08009f4d
 8009e90:	08009f4d 	.word	0x08009f4d
 8009e94:	08009f4d 	.word	0x08009f4d
 8009e98:	08009f25 	.word	0x08009f25
 8009e9c:	08009f4d 	.word	0x08009f4d
 8009ea0:	08009f4d 	.word	0x08009f4d
 8009ea4:	08009f4d 	.word	0x08009f4d
 8009ea8:	08009f4d 	.word	0x08009f4d
 8009eac:	08009f4d 	.word	0x08009f4d
 8009eb0:	08009f4d 	.word	0x08009f4d
 8009eb4:	08009f4d 	.word	0x08009f4d
 8009eb8:	08009f2d 	.word	0x08009f2d
 8009ebc:	08009f4d 	.word	0x08009f4d
 8009ec0:	08009f4d 	.word	0x08009f4d
 8009ec4:	08009f4d 	.word	0x08009f4d
 8009ec8:	08009f4d 	.word	0x08009f4d
 8009ecc:	08009f4d 	.word	0x08009f4d
 8009ed0:	08009f4d 	.word	0x08009f4d
 8009ed4:	08009f4d 	.word	0x08009f4d
 8009ed8:	08009f35 	.word	0x08009f35
 8009edc:	08009f4d 	.word	0x08009f4d
 8009ee0:	08009f4d 	.word	0x08009f4d
 8009ee4:	08009f4d 	.word	0x08009f4d
 8009ee8:	08009f4d 	.word	0x08009f4d
 8009eec:	08009f4d 	.word	0x08009f4d
 8009ef0:	08009f4d 	.word	0x08009f4d
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f3d 	.word	0x08009f3d
 8009efc:	08009f4d 	.word	0x08009f4d
 8009f00:	08009f4d 	.word	0x08009f4d
 8009f04:	08009f4d 	.word	0x08009f4d
 8009f08:	08009f4d 	.word	0x08009f4d
 8009f0c:	08009f4d 	.word	0x08009f4d
 8009f10:	08009f4d 	.word	0x08009f4d
 8009f14:	08009f4d 	.word	0x08009f4d
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e326      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f24:	2304      	movs	r3, #4
 8009f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2a:	e322      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e31e      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f34:	2310      	movs	r3, #16
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e31a      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e316      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f44:	2340      	movs	r3, #64	; 0x40
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e312      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f4c:	2380      	movs	r3, #128	; 0x80
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e30e      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a6b      	ldr	r2, [pc, #428]	; (800a108 <UART_SetConfig+0x340>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d130      	bne.n	8009fc0 <UART_SetConfig+0x1f8>
 8009f5e:	4b69      	ldr	r3, [pc, #420]	; (800a104 <UART_SetConfig+0x33c>)
 8009f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d826      	bhi.n	8009fb8 <UART_SetConfig+0x1f0>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x1a8>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f91 	.word	0x08009f91
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009fa1 	.word	0x08009fa1
 8009f80:	08009fa9 	.word	0x08009fa9
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e2f0      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e2ec      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e2e8      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e2e4      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009fa8:	2320      	movs	r3, #32
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e2e0      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e2dc      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e2d8      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a51      	ldr	r2, [pc, #324]	; (800a10c <UART_SetConfig+0x344>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d130      	bne.n	800a02c <UART_SetConfig+0x264>
 8009fca:	4b4e      	ldr	r3, [pc, #312]	; (800a104 <UART_SetConfig+0x33c>)
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	2b05      	cmp	r3, #5
 8009fd4:	d826      	bhi.n	800a024 <UART_SetConfig+0x25c>
 8009fd6:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <UART_SetConfig+0x214>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	08009ffd 	.word	0x08009ffd
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a015 	.word	0x0800a015
 8009ff0:	0800a01d 	.word	0x0800a01d
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffa:	e2ba      	b.n	800a572 <UART_SetConfig+0x7aa>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e2b6      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a004:	2308      	movs	r3, #8
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e2b2      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a00c:	2310      	movs	r3, #16
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	e2ae      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a014:	2320      	movs	r3, #32
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e2aa      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e2a6      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a024:	2380      	movs	r3, #128	; 0x80
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e2a2      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a37      	ldr	r2, [pc, #220]	; (800a110 <UART_SetConfig+0x348>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d130      	bne.n	800a098 <UART_SetConfig+0x2d0>
 800a036:	4b33      	ldr	r3, [pc, #204]	; (800a104 <UART_SetConfig+0x33c>)
 800a038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b05      	cmp	r3, #5
 800a040:	d826      	bhi.n	800a090 <UART_SetConfig+0x2c8>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <UART_SetConfig+0x280>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a061 	.word	0x0800a061
 800a04c:	0800a069 	.word	0x0800a069
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a081 	.word	0x0800a081
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	e284      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a068:	2304      	movs	r3, #4
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e280      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a070:	2308      	movs	r3, #8
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	e27c      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07e:	e278      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a080:	2320      	movs	r3, #32
 800a082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a086:	e274      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08e:	e270      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a090:	2380      	movs	r3, #128	; 0x80
 800a092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a096:	e26c      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <UART_SetConfig+0x34c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d142      	bne.n	800a128 <UART_SetConfig+0x360>
 800a0a2:	4b18      	ldr	r3, [pc, #96]	; (800a104 <UART_SetConfig+0x33c>)
 800a0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b05      	cmp	r3, #5
 800a0ac:	d838      	bhi.n	800a120 <UART_SetConfig+0x358>
 800a0ae:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <UART_SetConfig+0x2ec>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a0cd 	.word	0x0800a0cd
 800a0b8:	0800a0d5 	.word	0x0800a0d5
 800a0bc:	0800a0dd 	.word	0x0800a0dd
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a119 	.word	0x0800a119
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d2:	e24e      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0da:	e24a      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a0dc:	2308      	movs	r3, #8
 800a0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e2:	e246      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ea:	e242      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a0ec:	2320      	movs	r3, #32
 800a0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f2:	e23e      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a0f4:	cfff69f3 	.word	0xcfff69f3
 800a0f8:	58000c00 	.word	0x58000c00
 800a0fc:	11fff4ff 	.word	0x11fff4ff
 800a100:	40011000 	.word	0x40011000
 800a104:	58024400 	.word	0x58024400
 800a108:	40004400 	.word	0x40004400
 800a10c:	40004800 	.word	0x40004800
 800a110:	40004c00 	.word	0x40004c00
 800a114:	40005000 	.word	0x40005000
 800a118:	2340      	movs	r3, #64	; 0x40
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11e:	e228      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a120:	2380      	movs	r3, #128	; 0x80
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e224      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4ab1      	ldr	r2, [pc, #708]	; (800a3f4 <UART_SetConfig+0x62c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d176      	bne.n	800a220 <UART_SetConfig+0x458>
 800a132:	4bb1      	ldr	r3, [pc, #708]	; (800a3f8 <UART_SetConfig+0x630>)
 800a134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a13a:	2b28      	cmp	r3, #40	; 0x28
 800a13c:	d86c      	bhi.n	800a218 <UART_SetConfig+0x450>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <UART_SetConfig+0x37c>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a1e9 	.word	0x0800a1e9
 800a148:	0800a219 	.word	0x0800a219
 800a14c:	0800a219 	.word	0x0800a219
 800a150:	0800a219 	.word	0x0800a219
 800a154:	0800a219 	.word	0x0800a219
 800a158:	0800a219 	.word	0x0800a219
 800a15c:	0800a219 	.word	0x0800a219
 800a160:	0800a219 	.word	0x0800a219
 800a164:	0800a1f1 	.word	0x0800a1f1
 800a168:	0800a219 	.word	0x0800a219
 800a16c:	0800a219 	.word	0x0800a219
 800a170:	0800a219 	.word	0x0800a219
 800a174:	0800a219 	.word	0x0800a219
 800a178:	0800a219 	.word	0x0800a219
 800a17c:	0800a219 	.word	0x0800a219
 800a180:	0800a219 	.word	0x0800a219
 800a184:	0800a1f9 	.word	0x0800a1f9
 800a188:	0800a219 	.word	0x0800a219
 800a18c:	0800a219 	.word	0x0800a219
 800a190:	0800a219 	.word	0x0800a219
 800a194:	0800a219 	.word	0x0800a219
 800a198:	0800a219 	.word	0x0800a219
 800a19c:	0800a219 	.word	0x0800a219
 800a1a0:	0800a219 	.word	0x0800a219
 800a1a4:	0800a201 	.word	0x0800a201
 800a1a8:	0800a219 	.word	0x0800a219
 800a1ac:	0800a219 	.word	0x0800a219
 800a1b0:	0800a219 	.word	0x0800a219
 800a1b4:	0800a219 	.word	0x0800a219
 800a1b8:	0800a219 	.word	0x0800a219
 800a1bc:	0800a219 	.word	0x0800a219
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a209 	.word	0x0800a209
 800a1c8:	0800a219 	.word	0x0800a219
 800a1cc:	0800a219 	.word	0x0800a219
 800a1d0:	0800a219 	.word	0x0800a219
 800a1d4:	0800a219 	.word	0x0800a219
 800a1d8:	0800a219 	.word	0x0800a219
 800a1dc:	0800a219 	.word	0x0800a219
 800a1e0:	0800a219 	.word	0x0800a219
 800a1e4:	0800a211 	.word	0x0800a211
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ee:	e1c0      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f6:	e1bc      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fe:	e1b8      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a200:	2310      	movs	r3, #16
 800a202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a206:	e1b4      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a208:	2320      	movs	r3, #32
 800a20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20e:	e1b0      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a210:	2340      	movs	r3, #64	; 0x40
 800a212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a216:	e1ac      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a218:	2380      	movs	r3, #128	; 0x80
 800a21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21e:	e1a8      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a75      	ldr	r2, [pc, #468]	; (800a3fc <UART_SetConfig+0x634>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d130      	bne.n	800a28c <UART_SetConfig+0x4c4>
 800a22a:	4b73      	ldr	r3, [pc, #460]	; (800a3f8 <UART_SetConfig+0x630>)
 800a22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	2b05      	cmp	r3, #5
 800a234:	d826      	bhi.n	800a284 <UART_SetConfig+0x4bc>
 800a236:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <UART_SetConfig+0x474>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a255 	.word	0x0800a255
 800a240:	0800a25d 	.word	0x0800a25d
 800a244:	0800a265 	.word	0x0800a265
 800a248:	0800a26d 	.word	0x0800a26d
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a27d 	.word	0x0800a27d
 800a254:	2300      	movs	r3, #0
 800a256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25a:	e18a      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a262:	e186      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a26a:	e182      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a272:	e17e      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a274:	2320      	movs	r3, #32
 800a276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a27a:	e17a      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a282:	e176      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a284:	2380      	movs	r3, #128	; 0x80
 800a286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28a:	e172      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a5b      	ldr	r2, [pc, #364]	; (800a400 <UART_SetConfig+0x638>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d130      	bne.n	800a2f8 <UART_SetConfig+0x530>
 800a296:	4b58      	ldr	r3, [pc, #352]	; (800a3f8 <UART_SetConfig+0x630>)
 800a298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	d826      	bhi.n	800a2f0 <UART_SetConfig+0x528>
 800a2a2:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <UART_SetConfig+0x4e0>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2c1 	.word	0x0800a2c1
 800a2ac:	0800a2c9 	.word	0x0800a2c9
 800a2b0:	0800a2d1 	.word	0x0800a2d1
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2e1 	.word	0x0800a2e1
 800a2bc:	0800a2e9 	.word	0x0800a2e9
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e154      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e150      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e14c      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2d8:	2310      	movs	r3, #16
 800a2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2de:	e148      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e6:	e144      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2e8:	2340      	movs	r3, #64	; 0x40
 800a2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ee:	e140      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2f0:	2380      	movs	r3, #128	; 0x80
 800a2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f6:	e13c      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a41      	ldr	r2, [pc, #260]	; (800a404 <UART_SetConfig+0x63c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	f040 8082 	bne.w	800a408 <UART_SetConfig+0x640>
 800a304:	4b3c      	ldr	r3, [pc, #240]	; (800a3f8 <UART_SetConfig+0x630>)
 800a306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a30c:	2b28      	cmp	r3, #40	; 0x28
 800a30e:	d86d      	bhi.n	800a3ec <UART_SetConfig+0x624>
 800a310:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <UART_SetConfig+0x550>)
 800a312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a316:	bf00      	nop
 800a318:	0800a3bd 	.word	0x0800a3bd
 800a31c:	0800a3ed 	.word	0x0800a3ed
 800a320:	0800a3ed 	.word	0x0800a3ed
 800a324:	0800a3ed 	.word	0x0800a3ed
 800a328:	0800a3ed 	.word	0x0800a3ed
 800a32c:	0800a3ed 	.word	0x0800a3ed
 800a330:	0800a3ed 	.word	0x0800a3ed
 800a334:	0800a3ed 	.word	0x0800a3ed
 800a338:	0800a3c5 	.word	0x0800a3c5
 800a33c:	0800a3ed 	.word	0x0800a3ed
 800a340:	0800a3ed 	.word	0x0800a3ed
 800a344:	0800a3ed 	.word	0x0800a3ed
 800a348:	0800a3ed 	.word	0x0800a3ed
 800a34c:	0800a3ed 	.word	0x0800a3ed
 800a350:	0800a3ed 	.word	0x0800a3ed
 800a354:	0800a3ed 	.word	0x0800a3ed
 800a358:	0800a3cd 	.word	0x0800a3cd
 800a35c:	0800a3ed 	.word	0x0800a3ed
 800a360:	0800a3ed 	.word	0x0800a3ed
 800a364:	0800a3ed 	.word	0x0800a3ed
 800a368:	0800a3ed 	.word	0x0800a3ed
 800a36c:	0800a3ed 	.word	0x0800a3ed
 800a370:	0800a3ed 	.word	0x0800a3ed
 800a374:	0800a3ed 	.word	0x0800a3ed
 800a378:	0800a3d5 	.word	0x0800a3d5
 800a37c:	0800a3ed 	.word	0x0800a3ed
 800a380:	0800a3ed 	.word	0x0800a3ed
 800a384:	0800a3ed 	.word	0x0800a3ed
 800a388:	0800a3ed 	.word	0x0800a3ed
 800a38c:	0800a3ed 	.word	0x0800a3ed
 800a390:	0800a3ed 	.word	0x0800a3ed
 800a394:	0800a3ed 	.word	0x0800a3ed
 800a398:	0800a3dd 	.word	0x0800a3dd
 800a39c:	0800a3ed 	.word	0x0800a3ed
 800a3a0:	0800a3ed 	.word	0x0800a3ed
 800a3a4:	0800a3ed 	.word	0x0800a3ed
 800a3a8:	0800a3ed 	.word	0x0800a3ed
 800a3ac:	0800a3ed 	.word	0x0800a3ed
 800a3b0:	0800a3ed 	.word	0x0800a3ed
 800a3b4:	0800a3ed 	.word	0x0800a3ed
 800a3b8:	0800a3e5 	.word	0x0800a3e5
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c2:	e0d6      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ca:	e0d2      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3cc:	2308      	movs	r3, #8
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e0ce      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3d4:	2310      	movs	r3, #16
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e0ca      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3dc:	2320      	movs	r3, #32
 800a3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e2:	e0c6      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3e4:	2340      	movs	r3, #64	; 0x40
 800a3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ea:	e0c2      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3f2:	e0be      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a3f4:	40011400 	.word	0x40011400
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	40007800 	.word	0x40007800
 800a400:	40007c00 	.word	0x40007c00
 800a404:	40011800 	.word	0x40011800
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4aad      	ldr	r2, [pc, #692]	; (800a6c4 <UART_SetConfig+0x8fc>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d176      	bne.n	800a500 <UART_SetConfig+0x738>
 800a412:	4bad      	ldr	r3, [pc, #692]	; (800a6c8 <UART_SetConfig+0x900>)
 800a414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a41a:	2b28      	cmp	r3, #40	; 0x28
 800a41c:	d86c      	bhi.n	800a4f8 <UART_SetConfig+0x730>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0x65c>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a4c9 	.word	0x0800a4c9
 800a428:	0800a4f9 	.word	0x0800a4f9
 800a42c:	0800a4f9 	.word	0x0800a4f9
 800a430:	0800a4f9 	.word	0x0800a4f9
 800a434:	0800a4f9 	.word	0x0800a4f9
 800a438:	0800a4f9 	.word	0x0800a4f9
 800a43c:	0800a4f9 	.word	0x0800a4f9
 800a440:	0800a4f9 	.word	0x0800a4f9
 800a444:	0800a4d1 	.word	0x0800a4d1
 800a448:	0800a4f9 	.word	0x0800a4f9
 800a44c:	0800a4f9 	.word	0x0800a4f9
 800a450:	0800a4f9 	.word	0x0800a4f9
 800a454:	0800a4f9 	.word	0x0800a4f9
 800a458:	0800a4f9 	.word	0x0800a4f9
 800a45c:	0800a4f9 	.word	0x0800a4f9
 800a460:	0800a4f9 	.word	0x0800a4f9
 800a464:	0800a4d9 	.word	0x0800a4d9
 800a468:	0800a4f9 	.word	0x0800a4f9
 800a46c:	0800a4f9 	.word	0x0800a4f9
 800a470:	0800a4f9 	.word	0x0800a4f9
 800a474:	0800a4f9 	.word	0x0800a4f9
 800a478:	0800a4f9 	.word	0x0800a4f9
 800a47c:	0800a4f9 	.word	0x0800a4f9
 800a480:	0800a4f9 	.word	0x0800a4f9
 800a484:	0800a4e1 	.word	0x0800a4e1
 800a488:	0800a4f9 	.word	0x0800a4f9
 800a48c:	0800a4f9 	.word	0x0800a4f9
 800a490:	0800a4f9 	.word	0x0800a4f9
 800a494:	0800a4f9 	.word	0x0800a4f9
 800a498:	0800a4f9 	.word	0x0800a4f9
 800a49c:	0800a4f9 	.word	0x0800a4f9
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	0800a4e9 	.word	0x0800a4e9
 800a4a8:	0800a4f9 	.word	0x0800a4f9
 800a4ac:	0800a4f9 	.word	0x0800a4f9
 800a4b0:	0800a4f9 	.word	0x0800a4f9
 800a4b4:	0800a4f9 	.word	0x0800a4f9
 800a4b8:	0800a4f9 	.word	0x0800a4f9
 800a4bc:	0800a4f9 	.word	0x0800a4f9
 800a4c0:	0800a4f9 	.word	0x0800a4f9
 800a4c4:	0800a4f1 	.word	0x0800a4f1
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ce:	e050      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a4d0:	2304      	movs	r3, #4
 800a4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d6:	e04c      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a4d8:	2308      	movs	r3, #8
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e048      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e044      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a4e8:	2320      	movs	r3, #32
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e040      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e03c      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a4f8:	2380      	movs	r3, #128	; 0x80
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e038      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a71      	ldr	r2, [pc, #452]	; (800a6cc <UART_SetConfig+0x904>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d130      	bne.n	800a56c <UART_SetConfig+0x7a4>
 800a50a:	4b6f      	ldr	r3, [pc, #444]	; (800a6c8 <UART_SetConfig+0x900>)
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	f003 0307 	and.w	r3, r3, #7
 800a512:	2b05      	cmp	r3, #5
 800a514:	d826      	bhi.n	800a564 <UART_SetConfig+0x79c>
 800a516:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <UART_SetConfig+0x754>)
 800a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51c:	0800a535 	.word	0x0800a535
 800a520:	0800a53d 	.word	0x0800a53d
 800a524:	0800a545 	.word	0x0800a545
 800a528:	0800a54d 	.word	0x0800a54d
 800a52c:	0800a555 	.word	0x0800a555
 800a530:	0800a55d 	.word	0x0800a55d
 800a534:	2302      	movs	r3, #2
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e01a      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a53c:	2304      	movs	r3, #4
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e016      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a544:	2308      	movs	r3, #8
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e012      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a54c:	2310      	movs	r3, #16
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e00e      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a554:	2320      	movs	r3, #32
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e00a      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a55c:	2340      	movs	r3, #64	; 0x40
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e006      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a564:	2380      	movs	r3, #128	; 0x80
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e002      	b.n	800a572 <UART_SetConfig+0x7aa>
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a55      	ldr	r2, [pc, #340]	; (800a6cc <UART_SetConfig+0x904>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	f040 80f0 	bne.w	800a75e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a57e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a582:	2b20      	cmp	r3, #32
 800a584:	dc46      	bgt.n	800a614 <UART_SetConfig+0x84c>
 800a586:	2b02      	cmp	r3, #2
 800a588:	db75      	blt.n	800a676 <UART_SetConfig+0x8ae>
 800a58a:	3b02      	subs	r3, #2
 800a58c:	2b1e      	cmp	r3, #30
 800a58e:	d872      	bhi.n	800a676 <UART_SetConfig+0x8ae>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <UART_SetConfig+0x7d0>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a61b 	.word	0x0800a61b
 800a59c:	0800a677 	.word	0x0800a677
 800a5a0:	0800a623 	.word	0x0800a623
 800a5a4:	0800a677 	.word	0x0800a677
 800a5a8:	0800a677 	.word	0x0800a677
 800a5ac:	0800a677 	.word	0x0800a677
 800a5b0:	0800a633 	.word	0x0800a633
 800a5b4:	0800a677 	.word	0x0800a677
 800a5b8:	0800a677 	.word	0x0800a677
 800a5bc:	0800a677 	.word	0x0800a677
 800a5c0:	0800a677 	.word	0x0800a677
 800a5c4:	0800a677 	.word	0x0800a677
 800a5c8:	0800a677 	.word	0x0800a677
 800a5cc:	0800a677 	.word	0x0800a677
 800a5d0:	0800a643 	.word	0x0800a643
 800a5d4:	0800a677 	.word	0x0800a677
 800a5d8:	0800a677 	.word	0x0800a677
 800a5dc:	0800a677 	.word	0x0800a677
 800a5e0:	0800a677 	.word	0x0800a677
 800a5e4:	0800a677 	.word	0x0800a677
 800a5e8:	0800a677 	.word	0x0800a677
 800a5ec:	0800a677 	.word	0x0800a677
 800a5f0:	0800a677 	.word	0x0800a677
 800a5f4:	0800a677 	.word	0x0800a677
 800a5f8:	0800a677 	.word	0x0800a677
 800a5fc:	0800a677 	.word	0x0800a677
 800a600:	0800a677 	.word	0x0800a677
 800a604:	0800a677 	.word	0x0800a677
 800a608:	0800a677 	.word	0x0800a677
 800a60c:	0800a677 	.word	0x0800a677
 800a610:	0800a669 	.word	0x0800a669
 800a614:	2b40      	cmp	r3, #64	; 0x40
 800a616:	d02a      	beq.n	800a66e <UART_SetConfig+0x8a6>
 800a618:	e02d      	b.n	800a676 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a61a:	f7fe f8d5 	bl	80087c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a61e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a620:	e02f      	b.n	800a682 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe f8e4 	bl	80087f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a630:	e027      	b.n	800a682 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a632:	f107 0308 	add.w	r3, r7, #8
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fa30 	bl	8008a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a640:	e01f      	b.n	800a682 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a642:	4b21      	ldr	r3, [pc, #132]	; (800a6c8 <UART_SetConfig+0x900>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a64e:	4b1e      	ldr	r3, [pc, #120]	; (800a6c8 <UART_SetConfig+0x900>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	08db      	lsrs	r3, r3, #3
 800a654:	f003 0303 	and.w	r3, r3, #3
 800a658:	4a1d      	ldr	r2, [pc, #116]	; (800a6d0 <UART_SetConfig+0x908>)
 800a65a:	fa22 f303 	lsr.w	r3, r2, r3
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a660:	e00f      	b.n	800a682 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a662:	4b1b      	ldr	r3, [pc, #108]	; (800a6d0 <UART_SetConfig+0x908>)
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a666:	e00c      	b.n	800a682 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a668:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <UART_SetConfig+0x90c>)
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a66c:	e009      	b.n	800a682 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a66e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a674:	e005      	b.n	800a682 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a680:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 81e6 	beq.w	800aa56 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	4a12      	ldr	r2, [pc, #72]	; (800a6d8 <UART_SetConfig+0x910>)
 800a690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a694:	461a      	mov	r2, r3
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	fbb3 f3f2 	udiv	r3, r3, r2
 800a69c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	4413      	add	r3, r2
 800a6a8:	6a3a      	ldr	r2, [r7, #32]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d305      	bcc.n	800a6ba <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6b4:	6a3a      	ldr	r2, [r7, #32]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d910      	bls.n	800a6dc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a6c0:	e1c9      	b.n	800aa56 <UART_SetConfig+0xc8e>
 800a6c2:	bf00      	nop
 800a6c4:	40011c00 	.word	0x40011c00
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	58000c00 	.word	0x58000c00
 800a6d0:	03d09000 	.word	0x03d09000
 800a6d4:	003d0900 	.word	0x003d0900
 800a6d8:	0801aebc 	.word	0x0801aebc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f04f 0100 	mov.w	r1, #0
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	4ac1      	ldr	r2, [pc, #772]	; (800a9f0 <UART_SetConfig+0xc28>)
 800a6ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	f04f 0300 	mov.w	r3, #0
 800a6f4:	f7f5 fe64 	bl	80003c0 <__aeabi_uldivmod>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	4619      	mov	r1, r3
 800a700:	f04f 0200 	mov.w	r2, #0
 800a704:	f04f 0300 	mov.w	r3, #0
 800a708:	020b      	lsls	r3, r1, #8
 800a70a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a70e:	0202      	lsls	r2, r0, #8
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	6849      	ldr	r1, [r1, #4]
 800a714:	0849      	lsrs	r1, r1, #1
 800a716:	4608      	mov	r0, r1
 800a718:	f04f 0100 	mov.w	r1, #0
 800a71c:	1814      	adds	r4, r2, r0
 800a71e:	eb43 0501 	adc.w	r5, r3, r1
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	461a      	mov	r2, r3
 800a728:	f04f 0300 	mov.w	r3, #0
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f5 fe46 	bl	80003c0 <__aeabi_uldivmod>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4613      	mov	r3, r2
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a742:	d308      	bcc.n	800a756 <UART_SetConfig+0x98e>
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a74a:	d204      	bcs.n	800a756 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a752:	60da      	str	r2, [r3, #12]
 800a754:	e17f      	b.n	800aa56 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a75c:	e17b      	b.n	800aa56 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a766:	f040 80bd 	bne.w	800a8e4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a76a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a76e:	2b20      	cmp	r3, #32
 800a770:	dc48      	bgt.n	800a804 <UART_SetConfig+0xa3c>
 800a772:	2b00      	cmp	r3, #0
 800a774:	db7b      	blt.n	800a86e <UART_SetConfig+0xaa6>
 800a776:	2b20      	cmp	r3, #32
 800a778:	d879      	bhi.n	800a86e <UART_SetConfig+0xaa6>
 800a77a:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <UART_SetConfig+0x9b8>)
 800a77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a780:	0800a80b 	.word	0x0800a80b
 800a784:	0800a813 	.word	0x0800a813
 800a788:	0800a86f 	.word	0x0800a86f
 800a78c:	0800a86f 	.word	0x0800a86f
 800a790:	0800a81b 	.word	0x0800a81b
 800a794:	0800a86f 	.word	0x0800a86f
 800a798:	0800a86f 	.word	0x0800a86f
 800a79c:	0800a86f 	.word	0x0800a86f
 800a7a0:	0800a82b 	.word	0x0800a82b
 800a7a4:	0800a86f 	.word	0x0800a86f
 800a7a8:	0800a86f 	.word	0x0800a86f
 800a7ac:	0800a86f 	.word	0x0800a86f
 800a7b0:	0800a86f 	.word	0x0800a86f
 800a7b4:	0800a86f 	.word	0x0800a86f
 800a7b8:	0800a86f 	.word	0x0800a86f
 800a7bc:	0800a86f 	.word	0x0800a86f
 800a7c0:	0800a83b 	.word	0x0800a83b
 800a7c4:	0800a86f 	.word	0x0800a86f
 800a7c8:	0800a86f 	.word	0x0800a86f
 800a7cc:	0800a86f 	.word	0x0800a86f
 800a7d0:	0800a86f 	.word	0x0800a86f
 800a7d4:	0800a86f 	.word	0x0800a86f
 800a7d8:	0800a86f 	.word	0x0800a86f
 800a7dc:	0800a86f 	.word	0x0800a86f
 800a7e0:	0800a86f 	.word	0x0800a86f
 800a7e4:	0800a86f 	.word	0x0800a86f
 800a7e8:	0800a86f 	.word	0x0800a86f
 800a7ec:	0800a86f 	.word	0x0800a86f
 800a7f0:	0800a86f 	.word	0x0800a86f
 800a7f4:	0800a86f 	.word	0x0800a86f
 800a7f8:	0800a86f 	.word	0x0800a86f
 800a7fc:	0800a86f 	.word	0x0800a86f
 800a800:	0800a861 	.word	0x0800a861
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d02e      	beq.n	800a866 <UART_SetConfig+0xa9e>
 800a808:	e031      	b.n	800a86e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a80a:	f7fd f8b7 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 800a80e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a810:	e033      	b.n	800a87a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a812:	f7fd f8c9 	bl	80079a8 <HAL_RCC_GetPCLK2Freq>
 800a816:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a818:	e02f      	b.n	800a87a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a81a:	f107 0314 	add.w	r3, r7, #20
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fd ffe8 	bl	80087f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a828:	e027      	b.n	800a87a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a82a:	f107 0308 	add.w	r3, r7, #8
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe f934 	bl	8008a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a838:	e01f      	b.n	800a87a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a83a:	4b6e      	ldr	r3, [pc, #440]	; (800a9f4 <UART_SetConfig+0xc2c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d009      	beq.n	800a85a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a846:	4b6b      	ldr	r3, [pc, #428]	; (800a9f4 <UART_SetConfig+0xc2c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	08db      	lsrs	r3, r3, #3
 800a84c:	f003 0303 	and.w	r3, r3, #3
 800a850:	4a69      	ldr	r2, [pc, #420]	; (800a9f8 <UART_SetConfig+0xc30>)
 800a852:	fa22 f303 	lsr.w	r3, r2, r3
 800a856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a858:	e00f      	b.n	800a87a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a85a:	4b67      	ldr	r3, [pc, #412]	; (800a9f8 <UART_SetConfig+0xc30>)
 800a85c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a85e:	e00c      	b.n	800a87a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a860:	4b66      	ldr	r3, [pc, #408]	; (800a9fc <UART_SetConfig+0xc34>)
 800a862:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a864:	e009      	b.n	800a87a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a86c:	e005      	b.n	800a87a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80ea 	beq.w	800aa56 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	4a5a      	ldr	r2, [pc, #360]	; (800a9f0 <UART_SetConfig+0xc28>)
 800a888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a88c:	461a      	mov	r2, r3
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	fbb3 f3f2 	udiv	r3, r3, r2
 800a894:	005a      	lsls	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	441a      	add	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	2b0f      	cmp	r3, #15
 800a8ac:	d916      	bls.n	800a8dc <UART_SetConfig+0xb14>
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b4:	d212      	bcs.n	800a8dc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f023 030f 	bic.w	r3, r3, #15
 800a8be:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	085b      	lsrs	r3, r3, #1
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8d8:	60da      	str	r2, [r3, #12]
 800a8da:	e0bc      	b.n	800aa56 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a8e2:	e0b8      	b.n	800aa56 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	dc4b      	bgt.n	800a984 <UART_SetConfig+0xbbc>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f2c0 8087 	blt.w	800aa00 <UART_SetConfig+0xc38>
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	f200 8084 	bhi.w	800aa00 <UART_SetConfig+0xc38>
 800a8f8:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <UART_SetConfig+0xb38>)
 800a8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fe:	bf00      	nop
 800a900:	0800a98b 	.word	0x0800a98b
 800a904:	0800a993 	.word	0x0800a993
 800a908:	0800aa01 	.word	0x0800aa01
 800a90c:	0800aa01 	.word	0x0800aa01
 800a910:	0800a99b 	.word	0x0800a99b
 800a914:	0800aa01 	.word	0x0800aa01
 800a918:	0800aa01 	.word	0x0800aa01
 800a91c:	0800aa01 	.word	0x0800aa01
 800a920:	0800a9ab 	.word	0x0800a9ab
 800a924:	0800aa01 	.word	0x0800aa01
 800a928:	0800aa01 	.word	0x0800aa01
 800a92c:	0800aa01 	.word	0x0800aa01
 800a930:	0800aa01 	.word	0x0800aa01
 800a934:	0800aa01 	.word	0x0800aa01
 800a938:	0800aa01 	.word	0x0800aa01
 800a93c:	0800aa01 	.word	0x0800aa01
 800a940:	0800a9bb 	.word	0x0800a9bb
 800a944:	0800aa01 	.word	0x0800aa01
 800a948:	0800aa01 	.word	0x0800aa01
 800a94c:	0800aa01 	.word	0x0800aa01
 800a950:	0800aa01 	.word	0x0800aa01
 800a954:	0800aa01 	.word	0x0800aa01
 800a958:	0800aa01 	.word	0x0800aa01
 800a95c:	0800aa01 	.word	0x0800aa01
 800a960:	0800aa01 	.word	0x0800aa01
 800a964:	0800aa01 	.word	0x0800aa01
 800a968:	0800aa01 	.word	0x0800aa01
 800a96c:	0800aa01 	.word	0x0800aa01
 800a970:	0800aa01 	.word	0x0800aa01
 800a974:	0800aa01 	.word	0x0800aa01
 800a978:	0800aa01 	.word	0x0800aa01
 800a97c:	0800aa01 	.word	0x0800aa01
 800a980:	0800a9e1 	.word	0x0800a9e1
 800a984:	2b40      	cmp	r3, #64	; 0x40
 800a986:	d02e      	beq.n	800a9e6 <UART_SetConfig+0xc1e>
 800a988:	e03a      	b.n	800aa00 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a98a:	f7fc fff7 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 800a98e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a990:	e03c      	b.n	800aa0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a992:	f7fd f809 	bl	80079a8 <HAL_RCC_GetPCLK2Freq>
 800a996:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a998:	e038      	b.n	800aa0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99a:	f107 0314 	add.w	r3, r7, #20
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fd ff28 	bl	80087f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9a8:	e030      	b.n	800aa0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe f874 	bl	8008a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9b8:	e028      	b.n	800aa0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ba:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <UART_SetConfig+0xc2c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0320 	and.w	r3, r3, #32
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <UART_SetConfig+0xc2c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	08db      	lsrs	r3, r3, #3
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	4a09      	ldr	r2, [pc, #36]	; (800a9f8 <UART_SetConfig+0xc30>)
 800a9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9d8:	e018      	b.n	800aa0c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a9da:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <UART_SetConfig+0xc30>)
 800a9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9de:	e015      	b.n	800aa0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <UART_SetConfig+0xc34>)
 800a9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9e4:	e012      	b.n	800aa0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9ec:	e00e      	b.n	800aa0c <UART_SetConfig+0xc44>
 800a9ee:	bf00      	nop
 800a9f0:	0801aebc 	.word	0x0801aebc
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	03d09000 	.word	0x03d09000
 800a9fc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa0a:	bf00      	nop
    }

    if (pclk != 0U)
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d021      	beq.n	800aa56 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	4a1a      	ldr	r2, [pc, #104]	; (800aa80 <UART_SetConfig+0xcb8>)
 800aa18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	085b      	lsrs	r3, r3, #1
 800aa2a:	441a      	add	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	2b0f      	cmp	r3, #15
 800aa3a:	d909      	bls.n	800aa50 <UART_SetConfig+0xc88>
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa42:	d205      	bcs.n	800aa50 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	60da      	str	r2, [r3, #12]
 800aa4e:	e002      	b.n	800aa56 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aa72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3738      	adds	r7, #56	; 0x38
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bdb0      	pop	{r4, r5, r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	0801aebc 	.word	0x0801aebc

0800aa84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00a      	beq.n	800ab36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01a      	beq.n	800ab9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab82:	d10a      	bne.n	800ab9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	605a      	str	r2, [r3, #4]
  }
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af02      	add	r7, sp, #8
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abd8:	f7f9 f950 	bl	8003e7c <HAL_GetTick>
 800abdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0308 	and.w	r3, r3, #8
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d10e      	bne.n	800ac0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f82f 	bl	800ac5e <UART_WaitOnFlagUntilTimeout>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e025      	b.n	800ac56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	d10e      	bne.n	800ac36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f819 	bl	800ac5e <UART_WaitOnFlagUntilTimeout>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e00f      	b.n	800ac56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2220      	movs	r2, #32
 800ac42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b09c      	sub	sp, #112	; 0x70
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	603b      	str	r3, [r7, #0]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac6e:	e0a9      	b.n	800adc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac76:	f000 80a5 	beq.w	800adc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac7a:	f7f9 f8ff 	bl	8003e7c <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d302      	bcc.n	800ac90 <UART_WaitOnFlagUntilTimeout+0x32>
 800ac8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d140      	bne.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aca4:	667b      	str	r3, [r7, #100]	; 0x64
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800acbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e6      	bne.n	800ac90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd4:	f023 0301 	bic.w	r3, r3, #1
 800acd8:	663b      	str	r3, [r7, #96]	; 0x60
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3308      	adds	r3, #8
 800ace0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ace2:	64ba      	str	r2, [r7, #72]	; 0x48
 800ace4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ace8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800acf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e069      	b.n	800ade6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d051      	beq.n	800adc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad2e:	d149      	bne.n	800adc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
 800ad5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e6      	bne.n	800ad3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3308      	adds	r3, #8
 800ad72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f023 0301 	bic.w	r3, r3, #1
 800ad82:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3308      	adds	r3, #8
 800ad8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad8c:	623a      	str	r2, [r7, #32]
 800ad8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	69f9      	ldr	r1, [r7, #28]
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e5      	bne.n	800ad6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2220      	movs	r2, #32
 800ada4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2220      	movs	r2, #32
 800adac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e010      	b.n	800ade6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69da      	ldr	r2, [r3, #28]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	4013      	ands	r3, r2
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	429a      	cmp	r2, r3
 800add2:	bf0c      	ite	eq
 800add4:	2301      	moveq	r3, #1
 800add6:	2300      	movne	r3, #0
 800add8:	b2db      	uxtb	r3, r3
 800adda:	461a      	mov	r2, r3
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	429a      	cmp	r2, r3
 800ade0:	f43f af46 	beq.w	800ac70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3770      	adds	r7, #112	; 0x70
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d101      	bne.n	800ae04 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae00:	2302      	movs	r3, #2
 800ae02:	e027      	b.n	800ae54 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2224      	movs	r2, #36	; 0x24
 800ae10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f022 0201 	bic.w	r2, r2, #1
 800ae2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d101      	bne.n	800ae78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae74:	2302      	movs	r3, #2
 800ae76:	e02d      	b.n	800aed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2224      	movs	r2, #36	; 0x24
 800ae84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0201 	bic.w	r2, r2, #1
 800ae9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f84f 	bl	800af58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2220      	movs	r2, #32
 800aec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d101      	bne.n	800aef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aef0:	2302      	movs	r3, #2
 800aef2:	e02d      	b.n	800af50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2224      	movs	r2, #36	; 0x24
 800af00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0201 	bic.w	r2, r2, #1
 800af1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f811 	bl	800af58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af64:	2b00      	cmp	r3, #0
 800af66:	d108      	bne.n	800af7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af78:	e031      	b.n	800afde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af7a:	2310      	movs	r3, #16
 800af7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af7e:	2310      	movs	r3, #16
 800af80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	0e5b      	lsrs	r3, r3, #25
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	0f5b      	lsrs	r3, r3, #29
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 0307 	and.w	r3, r3, #7
 800afa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	7b3a      	ldrb	r2, [r7, #12]
 800afa6:	4911      	ldr	r1, [pc, #68]	; (800afec <UARTEx_SetNbDataToProcess+0x94>)
 800afa8:	5c8a      	ldrb	r2, [r1, r2]
 800afaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800afae:	7b3a      	ldrb	r2, [r7, #12]
 800afb0:	490f      	ldr	r1, [pc, #60]	; (800aff0 <UARTEx_SetNbDataToProcess+0x98>)
 800afb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
 800afc2:	7b7a      	ldrb	r2, [r7, #13]
 800afc4:	4909      	ldr	r1, [pc, #36]	; (800afec <UARTEx_SetNbDataToProcess+0x94>)
 800afc6:	5c8a      	ldrb	r2, [r1, r2]
 800afc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afcc:	7b7a      	ldrb	r2, [r7, #13]
 800afce:	4908      	ldr	r1, [pc, #32]	; (800aff0 <UARTEx_SetNbDataToProcess+0x98>)
 800afd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800afde:	bf00      	nop
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	0801aed4 	.word	0x0801aed4
 800aff0:	0801aedc 	.word	0x0801aedc

0800aff4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800affa:	4b8d      	ldr	r3, [pc, #564]	; (800b230 <MX_LWIP_Init+0x23c>)
 800affc:	22c0      	movs	r2, #192	; 0xc0
 800affe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b000:	4b8b      	ldr	r3, [pc, #556]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b002:	22a8      	movs	r2, #168	; 0xa8
 800b004:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b006:	4b8a      	ldr	r3, [pc, #552]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b008:	2201      	movs	r2, #1
 800b00a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800b00c:	4b88      	ldr	r3, [pc, #544]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b00e:	22c8      	movs	r2, #200	; 0xc8
 800b010:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b012:	4b88      	ldr	r3, [pc, #544]	; (800b234 <MX_LWIP_Init+0x240>)
 800b014:	22ff      	movs	r2, #255	; 0xff
 800b016:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b018:	4b86      	ldr	r3, [pc, #536]	; (800b234 <MX_LWIP_Init+0x240>)
 800b01a:	22ff      	movs	r2, #255	; 0xff
 800b01c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b01e:	4b85      	ldr	r3, [pc, #532]	; (800b234 <MX_LWIP_Init+0x240>)
 800b020:	22ff      	movs	r2, #255	; 0xff
 800b022:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b024:	4b83      	ldr	r3, [pc, #524]	; (800b234 <MX_LWIP_Init+0x240>)
 800b026:	2200      	movs	r2, #0
 800b028:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b02a:	4b83      	ldr	r3, [pc, #524]	; (800b238 <MX_LWIP_Init+0x244>)
 800b02c:	22c0      	movs	r2, #192	; 0xc0
 800b02e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b030:	4b81      	ldr	r3, [pc, #516]	; (800b238 <MX_LWIP_Init+0x244>)
 800b032:	22a8      	movs	r2, #168	; 0xa8
 800b034:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b036:	4b80      	ldr	r3, [pc, #512]	; (800b238 <MX_LWIP_Init+0x244>)
 800b038:	2201      	movs	r2, #1
 800b03a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b03c:	4b7e      	ldr	r3, [pc, #504]	; (800b238 <MX_LWIP_Init+0x244>)
 800b03e:	2201      	movs	r2, #1
 800b040:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800b042:	f000 fdb9 	bl	800bbb8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b046:	4b7a      	ldr	r3, [pc, #488]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	061a      	lsls	r2, r3, #24
 800b04c:	4b78      	ldr	r3, [pc, #480]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b04e:	785b      	ldrb	r3, [r3, #1]
 800b050:	041b      	lsls	r3, r3, #16
 800b052:	431a      	orrs	r2, r3
 800b054:	4b76      	ldr	r3, [pc, #472]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b056:	789b      	ldrb	r3, [r3, #2]
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	4313      	orrs	r3, r2
 800b05c:	4a74      	ldr	r2, [pc, #464]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b05e:	78d2      	ldrb	r2, [r2, #3]
 800b060:	4313      	orrs	r3, r2
 800b062:	061a      	lsls	r2, r3, #24
 800b064:	4b72      	ldr	r3, [pc, #456]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	0619      	lsls	r1, r3, #24
 800b06a:	4b71      	ldr	r3, [pc, #452]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b06c:	785b      	ldrb	r3, [r3, #1]
 800b06e:	041b      	lsls	r3, r3, #16
 800b070:	4319      	orrs	r1, r3
 800b072:	4b6f      	ldr	r3, [pc, #444]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b074:	789b      	ldrb	r3, [r3, #2]
 800b076:	021b      	lsls	r3, r3, #8
 800b078:	430b      	orrs	r3, r1
 800b07a:	496d      	ldr	r1, [pc, #436]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b07c:	78c9      	ldrb	r1, [r1, #3]
 800b07e:	430b      	orrs	r3, r1
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b086:	431a      	orrs	r2, r3
 800b088:	4b69      	ldr	r3, [pc, #420]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	0619      	lsls	r1, r3, #24
 800b08e:	4b68      	ldr	r3, [pc, #416]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b090:	785b      	ldrb	r3, [r3, #1]
 800b092:	041b      	lsls	r3, r3, #16
 800b094:	4319      	orrs	r1, r3
 800b096:	4b66      	ldr	r3, [pc, #408]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b098:	789b      	ldrb	r3, [r3, #2]
 800b09a:	021b      	lsls	r3, r3, #8
 800b09c:	430b      	orrs	r3, r1
 800b09e:	4964      	ldr	r1, [pc, #400]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b0a0:	78c9      	ldrb	r1, [r1, #3]
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	0a1b      	lsrs	r3, r3, #8
 800b0a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	4b60      	ldr	r3, [pc, #384]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	0619      	lsls	r1, r3, #24
 800b0b2:	4b5f      	ldr	r3, [pc, #380]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	041b      	lsls	r3, r3, #16
 800b0b8:	4319      	orrs	r1, r3
 800b0ba:	4b5d      	ldr	r3, [pc, #372]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b0bc:	789b      	ldrb	r3, [r3, #2]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	495b      	ldr	r1, [pc, #364]	; (800b230 <MX_LWIP_Init+0x23c>)
 800b0c4:	78c9      	ldrb	r1, [r1, #3]
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	0e1b      	lsrs	r3, r3, #24
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	4a5b      	ldr	r2, [pc, #364]	; (800b23c <MX_LWIP_Init+0x248>)
 800b0ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b0d0:	4b58      	ldr	r3, [pc, #352]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	061a      	lsls	r2, r3, #24
 800b0d6:	4b57      	ldr	r3, [pc, #348]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	4b55      	ldr	r3, [pc, #340]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0e0:	789b      	ldrb	r3, [r3, #2]
 800b0e2:	021b      	lsls	r3, r3, #8
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	4a53      	ldr	r2, [pc, #332]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0e8:	78d2      	ldrb	r2, [r2, #3]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	061a      	lsls	r2, r3, #24
 800b0ee:	4b51      	ldr	r3, [pc, #324]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	0619      	lsls	r1, r3, #24
 800b0f4:	4b4f      	ldr	r3, [pc, #316]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0f6:	785b      	ldrb	r3, [r3, #1]
 800b0f8:	041b      	lsls	r3, r3, #16
 800b0fa:	4319      	orrs	r1, r3
 800b0fc:	4b4d      	ldr	r3, [pc, #308]	; (800b234 <MX_LWIP_Init+0x240>)
 800b0fe:	789b      	ldrb	r3, [r3, #2]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	430b      	orrs	r3, r1
 800b104:	494b      	ldr	r1, [pc, #300]	; (800b234 <MX_LWIP_Init+0x240>)
 800b106:	78c9      	ldrb	r1, [r1, #3]
 800b108:	430b      	orrs	r3, r1
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b110:	431a      	orrs	r2, r3
 800b112:	4b48      	ldr	r3, [pc, #288]	; (800b234 <MX_LWIP_Init+0x240>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	0619      	lsls	r1, r3, #24
 800b118:	4b46      	ldr	r3, [pc, #280]	; (800b234 <MX_LWIP_Init+0x240>)
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	041b      	lsls	r3, r3, #16
 800b11e:	4319      	orrs	r1, r3
 800b120:	4b44      	ldr	r3, [pc, #272]	; (800b234 <MX_LWIP_Init+0x240>)
 800b122:	789b      	ldrb	r3, [r3, #2]
 800b124:	021b      	lsls	r3, r3, #8
 800b126:	430b      	orrs	r3, r1
 800b128:	4942      	ldr	r1, [pc, #264]	; (800b234 <MX_LWIP_Init+0x240>)
 800b12a:	78c9      	ldrb	r1, [r1, #3]
 800b12c:	430b      	orrs	r3, r1
 800b12e:	0a1b      	lsrs	r3, r3, #8
 800b130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b134:	431a      	orrs	r2, r3
 800b136:	4b3f      	ldr	r3, [pc, #252]	; (800b234 <MX_LWIP_Init+0x240>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	0619      	lsls	r1, r3, #24
 800b13c:	4b3d      	ldr	r3, [pc, #244]	; (800b234 <MX_LWIP_Init+0x240>)
 800b13e:	785b      	ldrb	r3, [r3, #1]
 800b140:	041b      	lsls	r3, r3, #16
 800b142:	4319      	orrs	r1, r3
 800b144:	4b3b      	ldr	r3, [pc, #236]	; (800b234 <MX_LWIP_Init+0x240>)
 800b146:	789b      	ldrb	r3, [r3, #2]
 800b148:	021b      	lsls	r3, r3, #8
 800b14a:	430b      	orrs	r3, r1
 800b14c:	4939      	ldr	r1, [pc, #228]	; (800b234 <MX_LWIP_Init+0x240>)
 800b14e:	78c9      	ldrb	r1, [r1, #3]
 800b150:	430b      	orrs	r3, r1
 800b152:	0e1b      	lsrs	r3, r3, #24
 800b154:	4313      	orrs	r3, r2
 800b156:	4a3a      	ldr	r2, [pc, #232]	; (800b240 <MX_LWIP_Init+0x24c>)
 800b158:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b15a:	4b37      	ldr	r3, [pc, #220]	; (800b238 <MX_LWIP_Init+0x244>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	061a      	lsls	r2, r3, #24
 800b160:	4b35      	ldr	r3, [pc, #212]	; (800b238 <MX_LWIP_Init+0x244>)
 800b162:	785b      	ldrb	r3, [r3, #1]
 800b164:	041b      	lsls	r3, r3, #16
 800b166:	431a      	orrs	r2, r3
 800b168:	4b33      	ldr	r3, [pc, #204]	; (800b238 <MX_LWIP_Init+0x244>)
 800b16a:	789b      	ldrb	r3, [r3, #2]
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	4313      	orrs	r3, r2
 800b170:	4a31      	ldr	r2, [pc, #196]	; (800b238 <MX_LWIP_Init+0x244>)
 800b172:	78d2      	ldrb	r2, [r2, #3]
 800b174:	4313      	orrs	r3, r2
 800b176:	061a      	lsls	r2, r3, #24
 800b178:	4b2f      	ldr	r3, [pc, #188]	; (800b238 <MX_LWIP_Init+0x244>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	0619      	lsls	r1, r3, #24
 800b17e:	4b2e      	ldr	r3, [pc, #184]	; (800b238 <MX_LWIP_Init+0x244>)
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	4319      	orrs	r1, r3
 800b186:	4b2c      	ldr	r3, [pc, #176]	; (800b238 <MX_LWIP_Init+0x244>)
 800b188:	789b      	ldrb	r3, [r3, #2]
 800b18a:	021b      	lsls	r3, r3, #8
 800b18c:	430b      	orrs	r3, r1
 800b18e:	492a      	ldr	r1, [pc, #168]	; (800b238 <MX_LWIP_Init+0x244>)
 800b190:	78c9      	ldrb	r1, [r1, #3]
 800b192:	430b      	orrs	r3, r1
 800b194:	021b      	lsls	r3, r3, #8
 800b196:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b19a:	431a      	orrs	r2, r3
 800b19c:	4b26      	ldr	r3, [pc, #152]	; (800b238 <MX_LWIP_Init+0x244>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	0619      	lsls	r1, r3, #24
 800b1a2:	4b25      	ldr	r3, [pc, #148]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	041b      	lsls	r3, r3, #16
 800b1a8:	4319      	orrs	r1, r3
 800b1aa:	4b23      	ldr	r3, [pc, #140]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1ac:	789b      	ldrb	r3, [r3, #2]
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	4921      	ldr	r1, [pc, #132]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1b4:	78c9      	ldrb	r1, [r1, #3]
 800b1b6:	430b      	orrs	r3, r1
 800b1b8:	0a1b      	lsrs	r3, r3, #8
 800b1ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	0619      	lsls	r1, r3, #24
 800b1c6:	4b1c      	ldr	r3, [pc, #112]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	041b      	lsls	r3, r3, #16
 800b1cc:	4319      	orrs	r1, r3
 800b1ce:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1d0:	789b      	ldrb	r3, [r3, #2]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	4918      	ldr	r1, [pc, #96]	; (800b238 <MX_LWIP_Init+0x244>)
 800b1d8:	78c9      	ldrb	r1, [r1, #3]
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	0e1b      	lsrs	r3, r3, #24
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	4a18      	ldr	r2, [pc, #96]	; (800b244 <MX_LWIP_Init+0x250>)
 800b1e2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b1e4:	4b18      	ldr	r3, [pc, #96]	; (800b248 <MX_LWIP_Init+0x254>)
 800b1e6:	9302      	str	r3, [sp, #8]
 800b1e8:	4b18      	ldr	r3, [pc, #96]	; (800b24c <MX_LWIP_Init+0x258>)
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	4b14      	ldr	r3, [pc, #80]	; (800b244 <MX_LWIP_Init+0x250>)
 800b1f2:	4a13      	ldr	r2, [pc, #76]	; (800b240 <MX_LWIP_Init+0x24c>)
 800b1f4:	4911      	ldr	r1, [pc, #68]	; (800b23c <MX_LWIP_Init+0x248>)
 800b1f6:	4816      	ldr	r0, [pc, #88]	; (800b250 <MX_LWIP_Init+0x25c>)
 800b1f8:	f001 f9c6 	bl	800c588 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b1fc:	4814      	ldr	r0, [pc, #80]	; (800b250 <MX_LWIP_Init+0x25c>)
 800b1fe:	f001 fb75 	bl	800c8ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b202:	4b13      	ldr	r3, [pc, #76]	; (800b250 <MX_LWIP_Init+0x25c>)
 800b204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b208:	089b      	lsrs	r3, r3, #2
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b214:	480e      	ldr	r0, [pc, #56]	; (800b250 <MX_LWIP_Init+0x25c>)
 800b216:	f001 fb79 	bl	800c90c <netif_set_up>
 800b21a:	e002      	b.n	800b222 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b21c:	480c      	ldr	r0, [pc, #48]	; (800b250 <MX_LWIP_Init+0x25c>)
 800b21e:	f001 fbe1 	bl	800c9e4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b222:	490c      	ldr	r1, [pc, #48]	; (800b254 <MX_LWIP_Init+0x260>)
 800b224:	480a      	ldr	r0, [pc, #40]	; (800b250 <MX_LWIP_Init+0x25c>)
 800b226:	f001 fc73 	bl	800cb10 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b22a:	bf00      	nop
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	24000570 	.word	0x24000570
 800b234:	2400056c 	.word	0x2400056c
 800b238:	2400052c 	.word	0x2400052c
 800b23c:	24000564 	.word	0x24000564
 800b240:	24000574 	.word	0x24000574
 800b244:	24000578 	.word	0x24000578
 800b248:	08016339 	.word	0x08016339
 800b24c:	0800b7b5 	.word	0x0800b7b5
 800b250:	24000530 	.word	0x24000530
 800b254:	0800b259 	.word	0x0800b259

0800b258 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08e      	sub	sp, #56	; 0x38
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	605a      	str	r2, [r3, #4]
 800b27e:	609a      	str	r2, [r3, #8]
 800b280:	60da      	str	r2, [r3, #12]
 800b282:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a59      	ldr	r2, [pc, #356]	; (800b3f0 <HAL_ETH_MspInit+0x184>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	f040 80ab 	bne.w	800b3e6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b290:	4b58      	ldr	r3, [pc, #352]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b296:	4a57      	ldr	r2, [pc, #348]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b29c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b2a0:	4b54      	ldr	r3, [pc, #336]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2aa:	623b      	str	r3, [r7, #32]
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b2ae:	4b51      	ldr	r3, [pc, #324]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2b4:	4a4f      	ldr	r2, [pc, #316]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b2be:	4b4d      	ldr	r3, [pc, #308]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2c8:	61fb      	str	r3, [r7, #28]
 800b2ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b2cc:	4b49      	ldr	r3, [pc, #292]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2d2:	4a48      	ldr	r2, [pc, #288]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b2dc:	4b45      	ldr	r3, [pc, #276]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b2ea:	4b42      	ldr	r3, [pc, #264]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b2f0:	4a40      	ldr	r2, [pc, #256]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2f2:	f043 0304 	orr.w	r3, r3, #4
 800b2f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b2fa:	4b3e      	ldr	r3, [pc, #248]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b2fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b308:	4b3a      	ldr	r3, [pc, #232]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b30a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b30e:	4a39      	ldr	r2, [pc, #228]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b310:	f043 0301 	orr.w	r3, r3, #1
 800b314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b318:	4b36      	ldr	r3, [pc, #216]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b31a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	613b      	str	r3, [r7, #16]
 800b324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b326:	4b33      	ldr	r3, [pc, #204]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b32c:	4a31      	ldr	r2, [pc, #196]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b32e:	f043 0302 	orr.w	r3, r3, #2
 800b332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b336:	4b2f      	ldr	r3, [pc, #188]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	60fb      	str	r3, [r7, #12]
 800b342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b344:	4b2b      	ldr	r3, [pc, #172]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b34a:	4a2a      	ldr	r2, [pc, #168]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b354:	4b27      	ldr	r3, [pc, #156]	; (800b3f4 <HAL_ETH_MspInit+0x188>)
 800b356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	60bb      	str	r3, [r7, #8]
 800b360:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b362:	2332      	movs	r3, #50	; 0x32
 800b364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b366:	2302      	movs	r3, #2
 800b368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b36e:	2300      	movs	r3, #0
 800b370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b372:	230b      	movs	r3, #11
 800b374:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b37a:	4619      	mov	r1, r3
 800b37c:	481e      	ldr	r0, [pc, #120]	; (800b3f8 <HAL_ETH_MspInit+0x18c>)
 800b37e:	f7fb f9db 	bl	8006738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b382:	2386      	movs	r3, #134	; 0x86
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b386:	2302      	movs	r3, #2
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b38a:	2300      	movs	r3, #0
 800b38c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b38e:	2300      	movs	r3, #0
 800b390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b392:	230b      	movs	r3, #11
 800b394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b39a:	4619      	mov	r1, r3
 800b39c:	4817      	ldr	r0, [pc, #92]	; (800b3fc <HAL_ETH_MspInit+0x190>)
 800b39e:	f7fb f9cb 	bl	8006738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b3a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b3b4:	230b      	movs	r3, #11
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b3b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4810      	ldr	r0, [pc, #64]	; (800b400 <HAL_ETH_MspInit+0x194>)
 800b3c0:	f7fb f9ba 	bl	8006738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b3c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b3d6:	230b      	movs	r3, #11
 800b3d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b3da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4808      	ldr	r0, [pc, #32]	; (800b404 <HAL_ETH_MspInit+0x198>)
 800b3e2:	f7fb f9a9 	bl	8006738 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b3e6:	bf00      	nop
 800b3e8:	3738      	adds	r7, #56	; 0x38
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	40028000 	.word	0x40028000
 800b3f4:	58024400 	.word	0x58024400
 800b3f8:	58020800 	.word	0x58020800
 800b3fc:	58020000 	.word	0x58020000
 800b400:	58020400 	.word	0x58020400
 800b404:	58021800 	.word	0x58021800

0800b408 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b410:	2300      	movs	r3, #0
 800b412:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b418:	4b4a      	ldr	r3, [pc, #296]	; (800b544 <low_level_init+0x13c>)
 800b41a:	4a4b      	ldr	r2, [pc, #300]	; (800b548 <low_level_init+0x140>)
 800b41c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b41e:	2300      	movs	r3, #0
 800b420:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800b422:	2380      	movs	r3, #128	; 0x80
 800b424:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800b426:	23e1      	movs	r3, #225	; 0xe1
 800b428:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800b42a:	2300      	movs	r3, #0
 800b42c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800b42e:	2300      	movs	r3, #0
 800b430:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800b432:	2300      	movs	r3, #0
 800b434:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800b436:	4a43      	ldr	r2, [pc, #268]	; (800b544 <low_level_init+0x13c>)
 800b438:	f107 030c 	add.w	r3, r7, #12
 800b43c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b43e:	4b41      	ldr	r3, [pc, #260]	; (800b544 <low_level_init+0x13c>)
 800b440:	2201      	movs	r2, #1
 800b442:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b444:	4b3f      	ldr	r3, [pc, #252]	; (800b544 <low_level_init+0x13c>)
 800b446:	4a41      	ldr	r2, [pc, #260]	; (800b54c <low_level_init+0x144>)
 800b448:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b44a:	4b3e      	ldr	r3, [pc, #248]	; (800b544 <low_level_init+0x13c>)
 800b44c:	4a40      	ldr	r2, [pc, #256]	; (800b550 <low_level_init+0x148>)
 800b44e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b450:	4b3c      	ldr	r3, [pc, #240]	; (800b544 <low_level_init+0x13c>)
 800b452:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b456:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b458:	483a      	ldr	r0, [pc, #232]	; (800b544 <low_level_init+0x13c>)
 800b45a:	f7f8 feb3 	bl	80041c4 <HAL_ETH_Init>
 800b45e:	4603      	mov	r3, r0
 800b460:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b462:	2234      	movs	r2, #52	; 0x34
 800b464:	2100      	movs	r1, #0
 800b466:	483b      	ldr	r0, [pc, #236]	; (800b554 <low_level_init+0x14c>)
 800b468:	f00b f87c 	bl	8016564 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b46c:	4b39      	ldr	r3, [pc, #228]	; (800b554 <low_level_init+0x14c>)
 800b46e:	2221      	movs	r2, #33	; 0x21
 800b470:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b472:	4b38      	ldr	r3, [pc, #224]	; (800b554 <low_level_init+0x14c>)
 800b474:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b478:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b47a:	4b36      	ldr	r3, [pc, #216]	; (800b554 <low_level_init+0x14c>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b480:	4835      	ldr	r0, [pc, #212]	; (800b558 <low_level_init+0x150>)
 800b482:	f000 ff49 	bl	800c318 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2206      	movs	r2, #6
 800b48a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b48e:	4b2d      	ldr	r3, [pc, #180]	; (800b544 <low_level_init+0x13c>)
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	781a      	ldrb	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b49a:	4b2a      	ldr	r3, [pc, #168]	; (800b544 <low_level_init+0x13c>)
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	785a      	ldrb	r2, [r3, #1]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b4a6:	4b27      	ldr	r3, [pc, #156]	; (800b544 <low_level_init+0x13c>)
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	789a      	ldrb	r2, [r3, #2]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b4b2:	4b24      	ldr	r3, [pc, #144]	; (800b544 <low_level_init+0x13c>)
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	78da      	ldrb	r2, [r3, #3]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b4be:	4b21      	ldr	r3, [pc, #132]	; (800b544 <low_level_init+0x13c>)
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	791a      	ldrb	r2, [r3, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b4ca:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <low_level_init+0x13c>)
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	795a      	ldrb	r2, [r3, #5]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b4dc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4e4:	f043 030a 	orr.w	r3, r3, #10
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e00e      	b.n	800b514 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	4413      	add	r3, r2
 800b4fe:	025b      	lsls	r3, r3, #9
 800b500:	4a16      	ldr	r2, [pc, #88]	; (800b55c <low_level_init+0x154>)
 800b502:	441a      	add	r2, r3
 800b504:	2300      	movs	r3, #0
 800b506:	6979      	ldr	r1, [r7, #20]
 800b508:	480e      	ldr	r0, [pc, #56]	; (800b544 <low_level_init+0x13c>)
 800b50a:	f7f8 ff35 	bl	8004378 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	3301      	adds	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2b03      	cmp	r3, #3
 800b518:	d9ed      	bls.n	800b4f6 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b51a:	4911      	ldr	r1, [pc, #68]	; (800b560 <low_level_init+0x158>)
 800b51c:	4811      	ldr	r0, [pc, #68]	; (800b564 <low_level_init+0x15c>)
 800b51e:	f7f8 fac6 	bl	8003aae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b522:	4810      	ldr	r0, [pc, #64]	; (800b564 <low_level_init+0x15c>)
 800b524:	f7f8 faf5 	bl	8003b12 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b528:	7cfb      	ldrb	r3, [r7, #19]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d103      	bne.n	800b536 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f9d4 	bl	800b8dc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b534:	e001      	b.n	800b53a <low_level_init+0x132>
    Error_Handler();
 800b536:	f7f7 fd06 	bl	8002f46 <Error_Handler>
}
 800b53a:	bf00      	nop
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	24000668 	.word	0x24000668
 800b548:	40028000 	.word	0x40028000
 800b54c:	30000080 	.word	0x30000080
 800b550:	30000000 	.word	0x30000000
 800b554:	240006f0 	.word	0x240006f0
 800b558:	0801aee4 	.word	0x0801aee4
 800b55c:	30000100 	.word	0x30000100
 800b560:	24000018 	.word	0x24000018
 800b564:	24000648 	.word	0x24000648

0800b568 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b092      	sub	sp, #72	; 0x48
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800b572:	2300      	movs	r3, #0
 800b574:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	2230      	movs	r2, #48	; 0x30
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f00a ffed 	bl	8016564 <memset>

  for(q = p; q != NULL; q = q->next)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	643b      	str	r3, [r7, #64]	; 0x40
 800b58e:	e049      	b.n	800b624 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b592:	2b03      	cmp	r3, #3
 800b594:	d902      	bls.n	800b59c <low_level_output+0x34>
      return ERR_IF;
 800b596:	f06f 030b 	mvn.w	r3, #11
 800b59a:	e056      	b.n	800b64a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800b59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b59e:	6859      	ldr	r1, [r3, #4]
 800b5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5ae:	4413      	add	r3, r2
 800b5b0:	3b3c      	subs	r3, #60	; 0x3c
 800b5b2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b6:	895b      	ldrh	r3, [r3, #10]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5bc:	4613      	mov	r3, r2
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3b38      	subs	r3, #56	; 0x38
 800b5cc:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d012      	beq.n	800b5fa <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d6:	1e5a      	subs	r2, r3, #1
 800b5d8:	f107 000c 	add.w	r0, r7, #12
 800b5dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5de:	460b      	mov	r3, r1
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	440b      	add	r3, r1
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	18c1      	adds	r1, r0, r3
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	005b      	lsls	r3, r3, #1
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3b34      	subs	r3, #52	; 0x34
 800b5f8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10a      	bne.n	800b618 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800b602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b604:	4613      	mov	r3, r2
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	4413      	add	r3, r2
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b610:	4413      	add	r3, r2
 800b612:	3b34      	subs	r3, #52	; 0x34
 800b614:	2200      	movs	r2, #0
 800b616:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61a:	3301      	adds	r3, #1
 800b61c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	643b      	str	r3, [r7, #64]	; 0x40
 800b624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1b2      	bne.n	800b590 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	891b      	ldrh	r3, [r3, #8]
 800b62e:	461a      	mov	r2, r3
 800b630:	4b08      	ldr	r3, [pc, #32]	; (800b654 <low_level_output+0xec>)
 800b632:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b634:	4a07      	ldr	r2, [pc, #28]	; (800b654 <low_level_output+0xec>)
 800b636:	f107 030c 	add.w	r3, r7, #12
 800b63a:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b63c:	2214      	movs	r2, #20
 800b63e:	4905      	ldr	r1, [pc, #20]	; (800b654 <low_level_output+0xec>)
 800b640:	4805      	ldr	r0, [pc, #20]	; (800b658 <low_level_output+0xf0>)
 800b642:	f7f8 ff86 	bl	8004552 <HAL_ETH_Transmit>

  return errval;
 800b646:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3748      	adds	r7, #72	; 0x48
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	240006f0 	.word	0x240006f0
 800b658:	24000668 	.word	0x24000668

0800b65c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b098      	sub	sp, #96	; 0x60
 800b660:	af02      	add	r7, sp, #8
 800b662:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b664:	2300      	movs	r3, #0
 800b666:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	60bb      	str	r3, [r7, #8]
 800b66c:	2300      	movs	r3, #0
 800b66e:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b670:	f107 030c 	add.w	r3, r7, #12
 800b674:	2230      	movs	r2, #48	; 0x30
 800b676:	2100      	movs	r1, #0
 800b678:	4618      	mov	r0, r3
 800b67a:	f00a ff73 	bl	8016564 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b67e:	2300      	movs	r3, #0
 800b680:	657b      	str	r3, [r7, #84]	; 0x54
 800b682:	e015      	b.n	800b6b0 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800b684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	f107 010c 	add.w	r1, r7, #12
 800b68c:	4613      	mov	r3, r2
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4419      	add	r1, r3
 800b696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b698:	4613      	mov	r3, r2
 800b69a:	005b      	lsls	r3, r3, #1
 800b69c:	4413      	add	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3b44      	subs	r3, #68	; 0x44
 800b6a8:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b6aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	657b      	str	r3, [r7, #84]	; 0x54
 800b6b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d9e6      	bls.n	800b684 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 800b6b6:	482b      	ldr	r0, [pc, #172]	; (800b764 <low_level_input+0x108>)
 800b6b8:	f7f8 ffd4 	bl	8004664 <HAL_ETH_IsRxDataAvailable>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d04a      	beq.n	800b758 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 800b6c2:	f107 030c 	add.w	r3, r7, #12
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4826      	ldr	r0, [pc, #152]	; (800b764 <low_level_input+0x108>)
 800b6ca:	f7f9 f8bb 	bl	8004844 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800b6ce:	f107 0308 	add.w	r3, r7, #8
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4823      	ldr	r0, [pc, #140]	; (800b764 <low_level_input+0x108>)
 800b6d6:	f7f9 f953 	bl	8004980 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800b6da:	4822      	ldr	r0, [pc, #136]	; (800b764 <low_level_input+0x108>)
 800b6dc:	f7f9 f983 	bl	80049e6 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6e6:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 800b6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd1d      	ble.n	800b72a <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f0:	f003 021f 	and.w	r2, r3, #31
 800b6f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f6:	4413      	add	r3, r2
 800b6f8:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b6fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800b6fe:	f3bf 8f4f 	dsb	sy
}
 800b702:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b704:	4a18      	ldr	r2, [pc, #96]	; (800b768 <low_level_input+0x10c>)
 800b706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b708:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70e:	3320      	adds	r3, #32
 800b710:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b714:	3b20      	subs	r3, #32
 800b716:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800b718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dcf2      	bgt.n	800b704 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 800b71e:	f3bf 8f4f 	dsb	sy
}
 800b722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b724:	f3bf 8f6f 	isb	sy
}
 800b728:	bf00      	nop
}
 800b72a:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b72c:	480f      	ldr	r0, [pc, #60]	; (800b76c <low_level_input+0x110>)
 800b72e:	f000 fe67 	bl	800c400 <memp_malloc_pool>
 800b732:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800b734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b736:	4a0e      	ldr	r2, [pc, #56]	; (800b770 <low_level_input+0x114>)
 800b738:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	b299      	uxth	r1, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	b292      	uxth	r2, r2
 800b744:	9201      	str	r2, [sp, #4]
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74a:	2241      	movs	r2, #65	; 0x41
 800b74c:	2000      	movs	r0, #0
 800b74e:	f001 fba5 	bl	800ce9c <pbuf_alloced_custom>
 800b752:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 800b754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b756:	e000      	b.n	800b75a <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 800b758:	2300      	movs	r3, #0
  }
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3758      	adds	r7, #88	; 0x58
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	24000668 	.word	0x24000668
 800b768:	e000ed00 	.word	0xe000ed00
 800b76c:	0801aee4 	.word	0x0801aee4
 800b770:	0800b811 	.word	0x0800b811

0800b774 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7ff ff6d 	bl	800b65c <low_level_input>
 800b782:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d010      	beq.n	800b7ac <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	4798      	blx	r3
 800b794:	4603      	mov	r3, r0
 800b796:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800b798:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d006      	beq.n	800b7ae <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f001 fd35 	bl	800d210 <pbuf_free>
    p = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60fb      	str	r3, [r7, #12]
 800b7aa:	e000      	b.n	800b7ae <ethernetif_input+0x3a>
  if (p == NULL) return;
 800b7ac:	bf00      	nop
  }

}
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <ethernetif_init+0x1c>
 800b7c2:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <ethernetif_init+0x48>)
 800b7c4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b7c8:	490d      	ldr	r1, [pc, #52]	; (800b800 <ethernetif_init+0x4c>)
 800b7ca:	480e      	ldr	r0, [pc, #56]	; (800b804 <ethernetif_init+0x50>)
 800b7cc:	f00a fed2 	bl	8016574 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2273      	movs	r2, #115	; 0x73
 800b7d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2274      	movs	r2, #116	; 0x74
 800b7dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a09      	ldr	r2, [pc, #36]	; (800b808 <ethernetif_init+0x54>)
 800b7e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a08      	ldr	r2, [pc, #32]	; (800b80c <ethernetif_init+0x58>)
 800b7ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff fe0b 	bl	800b408 <low_level_init>

  return ERR_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	080176ec 	.word	0x080176ec
 800b800:	08017708 	.word	0x08017708
 800b804:	08017718 	.word	0x08017718
 800b808:	0801468d 	.word	0x0801468d
 800b80c:	0800b569 	.word	0x0800b569

0800b810 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b81c:	68f9      	ldr	r1, [r7, #12]
 800b81e:	4803      	ldr	r0, [pc, #12]	; (800b82c <pbuf_free_custom+0x1c>)
 800b820:	f000 fe5c 	bl	800c4dc <memp_free_pool>
}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	0801aee4 	.word	0x0801aee4

0800b830 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b834:	f7f8 fb22 	bl	8003e7c <HAL_GetTick>
 800b838:	4603      	mov	r3, r0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b844:	4802      	ldr	r0, [pc, #8]	; (800b850 <ETH_PHY_IO_Init+0x10>)
 800b846:	f7f9 fbdb 	bl	8005000 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	24000668 	.word	0x24000668

0800b854 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
  return 0;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	68f9      	ldr	r1, [r7, #12]
 800b876:	4807      	ldr	r0, [pc, #28]	; (800b894 <ETH_PHY_IO_ReadReg+0x30>)
 800b878:	f7f9 f92b 	bl	8004ad2 <HAL_ETH_ReadPHYRegister>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b882:	f04f 33ff 	mov.w	r3, #4294967295
 800b886:	e000      	b.n	800b88a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	24000668 	.word	0x24000668

0800b898 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68ba      	ldr	r2, [r7, #8]
 800b8a8:	68f9      	ldr	r1, [r7, #12]
 800b8aa:	4807      	ldr	r0, [pc, #28]	; (800b8c8 <ETH_PHY_IO_WriteReg+0x30>)
 800b8ac:	f7f9 f966 	bl	8004b7c <HAL_ETH_WritePHYRegister>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ba:	e000      	b.n	800b8be <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	24000668 	.word	0x24000668

0800b8cc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b8d0:	f7f8 fad4 	bl	8003e7c <HAL_GetTick>
 800b8d4:	4603      	mov	r3, r0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b0a0      	sub	sp, #128	; 0x80
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b8f0:	483a      	ldr	r0, [pc, #232]	; (800b9dc <ethernet_link_check_state+0x100>)
 800b8f2:	f7f8 f9b6 	bl	8003c62 <LAN8742_GetLinkState>
 800b8f6:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8fe:	089b      	lsrs	r3, r3, #2
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00c      	beq.n	800b924 <ethernet_link_check_state+0x48>
 800b90a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	dc09      	bgt.n	800b924 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 800b910:	4833      	ldr	r0, [pc, #204]	; (800b9e0 <ethernet_link_check_state+0x104>)
 800b912:	f7f8 fdce 	bl	80044b2 <HAL_ETH_Stop>
    netif_set_down(netif);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f001 f864 	bl	800c9e4 <netif_set_down>
    netif_set_link_down(netif);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f001 f8c7 	bl	800cab0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800b922:	e056      	b.n	800b9d2 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d14f      	bne.n	800b9d2 <ethernet_link_check_state+0xf6>
 800b932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b934:	2b01      	cmp	r3, #1
 800b936:	dd4c      	ble.n	800b9d2 <ethernet_link_check_state+0xf6>
 800b938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b93a:	3b02      	subs	r3, #2
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d82b      	bhi.n	800b998 <ethernet_link_check_state+0xbc>
 800b940:	a201      	add	r2, pc, #4	; (adr r2, 800b948 <ethernet_link_check_state+0x6c>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800b959 	.word	0x0800b959
 800b94c:	0800b96b 	.word	0x0800b96b
 800b950:	0800b97b 	.word	0x0800b97b
 800b954:	0800b98b 	.word	0x0800b98b
      duplex = ETH_FULLDUPLEX_MODE;
 800b958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b95c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b95e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b962:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b964:	2301      	movs	r3, #1
 800b966:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b968:	e017      	b.n	800b99a <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b96e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b972:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b974:	2301      	movs	r3, #1
 800b976:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b978:	e00f      	b.n	800b99a <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800b97a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b97e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b980:	2300      	movs	r3, #0
 800b982:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b984:	2301      	movs	r3, #1
 800b986:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b988:	e007      	b.n	800b99a <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800b98a:	2300      	movs	r3, #0
 800b98c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b98e:	2300      	movs	r3, #0
 800b990:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b992:	2301      	movs	r3, #1
 800b994:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b996:	e000      	b.n	800b99a <ethernet_link_check_state+0xbe>
      break;
 800b998:	bf00      	nop
    if(linkchanged)
 800b99a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d018      	beq.n	800b9d2 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b9a0:	f107 030c 	add.w	r3, r7, #12
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	480e      	ldr	r0, [pc, #56]	; (800b9e0 <ethernet_link_check_state+0x104>)
 800b9a8:	f7f9 f93c 	bl	8004c24 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b9ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800b9b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9b2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b9b4:	f107 030c 	add.w	r3, r7, #12
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4809      	ldr	r0, [pc, #36]	; (800b9e0 <ethernet_link_check_state+0x104>)
 800b9bc:	f7f9 fb06 	bl	8004fcc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b9c0:	4807      	ldr	r0, [pc, #28]	; (800b9e0 <ethernet_link_check_state+0x104>)
 800b9c2:	f7f8 fd1a 	bl	80043fa <HAL_ETH_Start>
      netif_set_up(netif);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 ffa0 	bl	800c90c <netif_set_up>
      netif_set_link_up(netif);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 f83b 	bl	800ca48 <netif_set_link_up>
}
 800b9d2:	bf00      	nop
 800b9d4:	3780      	adds	r7, #128	; 0x80
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	24000648 	.word	0x24000648
 800b9e0:	24000668 	.word	0x24000668

0800b9e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b9ee:	88fb      	ldrh	r3, [r7, #6]
 800b9f0:	021b      	lsls	r3, r3, #8
 800b9f2:	b21a      	sxth	r2, r3
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	0a1b      	lsrs	r3, r3, #8
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	b21b      	sxth	r3, r3
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	b21b      	sxth	r3, r3
 800ba00:	b29b      	uxth	r3, r3
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	061a      	lsls	r2, r3, #24
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	021b      	lsls	r3, r3, #8
 800ba1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba22:	431a      	orrs	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	0a1b      	lsrs	r3, r3, #8
 800ba28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	0e1b      	lsrs	r3, r3, #24
 800ba32:	4313      	orrs	r3, r2
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b089      	sub	sp, #36	; 0x24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00d      	beq.n	800ba80 <lwip_standard_chksum+0x40>
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	dd0a      	ble.n	800ba80 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	1c53      	adds	r3, r2, #1
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	f107 030e 	add.w	r3, r7, #14
 800ba74:	3301      	adds	r3, #1
 800ba76:	7812      	ldrb	r2, [r2, #0]
 800ba78:	701a      	strb	r2, [r3, #0]
    len--;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ba84:	e00a      	b.n	800ba9c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	1c9a      	adds	r2, r3, #2
 800ba8a:	61ba      	str	r2, [r7, #24]
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	4413      	add	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	3b02      	subs	r3, #2
 800ba9a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	dcf1      	bgt.n	800ba86 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	dd04      	ble.n	800bab2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800baa8:	f107 030e 	add.w	r3, r7, #14
 800baac:	69ba      	ldr	r2, [r7, #24]
 800baae:	7812      	ldrb	r2, [r2, #0]
 800bab0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800bab2:	89fb      	ldrh	r3, [r7, #14]
 800bab4:	461a      	mov	r2, r3
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	0c1a      	lsrs	r2, r3, #16
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	4413      	add	r3, r2
 800bac6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	0c1a      	lsrs	r2, r3, #16
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	4413      	add	r3, r2
 800bad2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d007      	beq.n	800baea <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	b29a      	uxth	r2, r3
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	0a1b      	lsrs	r3, r3, #8
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	b29b      	uxth	r3, r3
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3724      	adds	r7, #36	; 0x24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800bb06:	887b      	ldrh	r3, [r7, #2]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7ff ff98 	bl	800ba40 <lwip_standard_chksum>
 800bb10:	4603      	mov	r3, r0
 800bb12:	43db      	mvns	r3, r3
 800bb14:	b29b      	uxth	r3, r3
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b086      	sub	sp, #24
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	613b      	str	r3, [r7, #16]
 800bb32:	e02b      	b.n	800bb8c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	895b      	ldrh	r3, [r3, #10]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4610      	mov	r0, r2
 800bb40:	f7ff ff7e 	bl	800ba40 <lwip_standard_chksum>
 800bb44:	4603      	mov	r3, r0
 800bb46:	461a      	mov	r2, r3
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	0c1a      	lsrs	r2, r3, #16
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4413      	add	r3, r2
 800bb58:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	895b      	ldrh	r3, [r3, #10]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00e      	beq.n	800bb86 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	bf0c      	ite	eq
 800bb6e:	2301      	moveq	r3, #1
 800bb70:	2300      	movne	r3, #0
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	021b      	lsls	r3, r3, #8
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	4313      	orrs	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	613b      	str	r3, [r7, #16]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1d0      	bne.n	800bb34 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	021b      	lsls	r3, r3, #8
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	0a1b      	lsrs	r3, r3, #8
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	4313      	orrs	r3, r2
 800bba6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	43db      	mvns	r3, r3
 800bbae:	b29b      	uxth	r3, r3
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3718      	adds	r7, #24
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800bbc2:	f000 f8d5 	bl	800bd70 <mem_init>
  memp_init();
 800bbc6:	f000 fbd7 	bl	800c378 <memp_init>
  pbuf_init();
  netif_init();
 800bbca:	f000 fcd5 	bl	800c578 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bbce:	f007 ff57 	bl	8013a80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bbd2:	f001 fdbb 	bl	800d74c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bbd6:	f007 fec9 	bl	801396c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bbee:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <ptr_to_mem+0x20>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	4413      	add	r3, r2
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	240000c0 	.word	0x240000c0

0800bc08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bc10:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <mem_to_ptr+0x20>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	b29b      	uxth	r3, r3
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	240000c0 	.word	0x240000c0

0800bc2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bc34:	4b45      	ldr	r3, [pc, #276]	; (800bd4c <plug_holes+0x120>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d206      	bcs.n	800bc4c <plug_holes+0x20>
 800bc3e:	4b44      	ldr	r3, [pc, #272]	; (800bd50 <plug_holes+0x124>)
 800bc40:	f240 12df 	movw	r2, #479	; 0x1df
 800bc44:	4943      	ldr	r1, [pc, #268]	; (800bd54 <plug_holes+0x128>)
 800bc46:	4844      	ldr	r0, [pc, #272]	; (800bd58 <plug_holes+0x12c>)
 800bc48:	f00a fc94 	bl	8016574 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bc4c:	4b43      	ldr	r3, [pc, #268]	; (800bd5c <plug_holes+0x130>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d306      	bcc.n	800bc64 <plug_holes+0x38>
 800bc56:	4b3e      	ldr	r3, [pc, #248]	; (800bd50 <plug_holes+0x124>)
 800bc58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bc5c:	4940      	ldr	r1, [pc, #256]	; (800bd60 <plug_holes+0x134>)
 800bc5e:	483e      	ldr	r0, [pc, #248]	; (800bd58 <plug_holes+0x12c>)
 800bc60:	f00a fc88 	bl	8016574 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	791b      	ldrb	r3, [r3, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d006      	beq.n	800bc7a <plug_holes+0x4e>
 800bc6c:	4b38      	ldr	r3, [pc, #224]	; (800bd50 <plug_holes+0x124>)
 800bc6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bc72:	493c      	ldr	r1, [pc, #240]	; (800bd64 <plug_holes+0x138>)
 800bc74:	4838      	ldr	r0, [pc, #224]	; (800bd58 <plug_holes+0x12c>)
 800bc76:	f00a fc7d 	bl	8016574 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bc82:	d906      	bls.n	800bc92 <plug_holes+0x66>
 800bc84:	4b32      	ldr	r3, [pc, #200]	; (800bd50 <plug_holes+0x124>)
 800bc86:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bc8a:	4937      	ldr	r1, [pc, #220]	; (800bd68 <plug_holes+0x13c>)
 800bc8c:	4832      	ldr	r0, [pc, #200]	; (800bd58 <plug_holes+0x12c>)
 800bc8e:	f00a fc71 	bl	8016574 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff ffa4 	bl	800bbe4 <ptr_to_mem>
 800bc9c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d024      	beq.n	800bcf0 <plug_holes+0xc4>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	791b      	ldrb	r3, [r3, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d120      	bne.n	800bcf0 <plug_holes+0xc4>
 800bcae:	4b2b      	ldr	r3, [pc, #172]	; (800bd5c <plug_holes+0x130>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d01b      	beq.n	800bcf0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bcb8:	4b2c      	ldr	r3, [pc, #176]	; (800bd6c <plug_holes+0x140>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d102      	bne.n	800bcc8 <plug_holes+0x9c>
      lfree = mem;
 800bcc2:	4a2a      	ldr	r2, [pc, #168]	; (800bd6c <plug_holes+0x140>)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	881a      	ldrh	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bcd8:	d00a      	beq.n	800bcf0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff ff80 	bl	800bbe4 <ptr_to_mem>
 800bce4:	4604      	mov	r4, r0
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff ff8e 	bl	800bc08 <mem_to_ptr>
 800bcec:	4603      	mov	r3, r0
 800bcee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7ff ff75 	bl	800bbe4 <ptr_to_mem>
 800bcfa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d01f      	beq.n	800bd44 <plug_holes+0x118>
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	791b      	ldrb	r3, [r3, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d11b      	bne.n	800bd44 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bd0c:	4b17      	ldr	r3, [pc, #92]	; (800bd6c <plug_holes+0x140>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d102      	bne.n	800bd1c <plug_holes+0xf0>
      lfree = pmem;
 800bd16:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <plug_holes+0x140>)
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	881a      	ldrh	r2, [r3, #0]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd2c:	d00a      	beq.n	800bd44 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff ff56 	bl	800bbe4 <ptr_to_mem>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	68b8      	ldr	r0, [r7, #8]
 800bd3c:	f7ff ff64 	bl	800bc08 <mem_to_ptr>
 800bd40:	4603      	mov	r3, r0
 800bd42:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bd44:	bf00      	nop
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd90      	pop	{r4, r7, pc}
 800bd4c:	240000c0 	.word	0x240000c0
 800bd50:	08017740 	.word	0x08017740
 800bd54:	08017770 	.word	0x08017770
 800bd58:	08017788 	.word	0x08017788
 800bd5c:	240000c4 	.word	0x240000c4
 800bd60:	080177b0 	.word	0x080177b0
 800bd64:	080177cc 	.word	0x080177cc
 800bd68:	080177e8 	.word	0x080177e8
 800bd6c:	240000c8 	.word	0x240000c8

0800bd70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bd76:	4b16      	ldr	r3, [pc, #88]	; (800bdd0 <mem_init+0x60>)
 800bd78:	4a16      	ldr	r2, [pc, #88]	; (800bdd4 <mem_init+0x64>)
 800bd7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bd7c:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <mem_init+0x60>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bd88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bd96:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800bd9a:	f7ff ff23 	bl	800bbe4 <ptr_to_mem>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	4a0d      	ldr	r2, [pc, #52]	; (800bdd8 <mem_init+0x68>)
 800bda2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bda4:	4b0c      	ldr	r3, [pc, #48]	; (800bdd8 <mem_init+0x68>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bdac:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <mem_init+0x68>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bdb4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bdb6:	4b08      	ldr	r3, [pc, #32]	; (800bdd8 <mem_init+0x68>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bdbe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bdc0:	4b03      	ldr	r3, [pc, #12]	; (800bdd0 <mem_init+0x60>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a05      	ldr	r2, [pc, #20]	; (800bddc <mem_init+0x6c>)
 800bdc6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	240000c0 	.word	0x240000c0
 800bdd4:	30002000 	.word	0x30002000
 800bdd8:	240000c4 	.word	0x240000c4
 800bddc:	240000c8 	.word	0x240000c8

0800bde0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff ff0d 	bl	800bc08 <mem_to_ptr>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fef4 	bl	800bbe4 <ptr_to_mem>
 800bdfc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff feee 	bl	800bbe4 <ptr_to_mem>
 800be08:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be12:	d818      	bhi.n	800be46 <mem_link_valid+0x66>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	885b      	ldrh	r3, [r3, #2]
 800be18:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be1c:	d813      	bhi.n	800be46 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800be22:	8afa      	ldrh	r2, [r7, #22]
 800be24:	429a      	cmp	r2, r3
 800be26:	d004      	beq.n	800be32 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	8afa      	ldrh	r2, [r7, #22]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d109      	bne.n	800be46 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be32:	4b08      	ldr	r3, [pc, #32]	; (800be54 <mem_link_valid+0x74>)
 800be34:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d006      	beq.n	800be4a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	885b      	ldrh	r3, [r3, #2]
 800be40:	8afa      	ldrh	r2, [r7, #22]
 800be42:	429a      	cmp	r2, r3
 800be44:	d001      	beq.n	800be4a <mem_link_valid+0x6a>
    return 0;
 800be46:	2300      	movs	r3, #0
 800be48:	e000      	b.n	800be4c <mem_link_valid+0x6c>
  }
  return 1;
 800be4a:	2301      	movs	r3, #1
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	240000c4 	.word	0x240000c4

0800be58 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d04c      	beq.n	800bf00 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d007      	beq.n	800be80 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800be70:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <mem_free+0xb0>)
 800be72:	f240 2273 	movw	r2, #627	; 0x273
 800be76:	4925      	ldr	r1, [pc, #148]	; (800bf0c <mem_free+0xb4>)
 800be78:	4825      	ldr	r0, [pc, #148]	; (800bf10 <mem_free+0xb8>)
 800be7a:	f00a fb7b 	bl	8016574 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800be7e:	e040      	b.n	800bf02 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3b08      	subs	r3, #8
 800be84:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800be86:	4b23      	ldr	r3, [pc, #140]	; (800bf14 <mem_free+0xbc>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d306      	bcc.n	800be9e <mem_free+0x46>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f103 020c 	add.w	r2, r3, #12
 800be96:	4b20      	ldr	r3, [pc, #128]	; (800bf18 <mem_free+0xc0>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d907      	bls.n	800beae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800be9e:	4b1a      	ldr	r3, [pc, #104]	; (800bf08 <mem_free+0xb0>)
 800bea0:	f240 227f 	movw	r2, #639	; 0x27f
 800bea4:	491d      	ldr	r1, [pc, #116]	; (800bf1c <mem_free+0xc4>)
 800bea6:	481a      	ldr	r0, [pc, #104]	; (800bf10 <mem_free+0xb8>)
 800bea8:	f00a fb64 	bl	8016574 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800beac:	e029      	b.n	800bf02 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	791b      	ldrb	r3, [r3, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d107      	bne.n	800bec6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800beb6:	4b14      	ldr	r3, [pc, #80]	; (800bf08 <mem_free+0xb0>)
 800beb8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bebc:	4918      	ldr	r1, [pc, #96]	; (800bf20 <mem_free+0xc8>)
 800bebe:	4814      	ldr	r0, [pc, #80]	; (800bf10 <mem_free+0xb8>)
 800bec0:	f00a fb58 	bl	8016574 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bec4:	e01d      	b.n	800bf02 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff ff8a 	bl	800bde0 <mem_link_valid>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d107      	bne.n	800bee2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bed2:	4b0d      	ldr	r3, [pc, #52]	; (800bf08 <mem_free+0xb0>)
 800bed4:	f240 2295 	movw	r2, #661	; 0x295
 800bed8:	4912      	ldr	r1, [pc, #72]	; (800bf24 <mem_free+0xcc>)
 800beda:	480d      	ldr	r0, [pc, #52]	; (800bf10 <mem_free+0xb8>)
 800bedc:	f00a fb4a 	bl	8016574 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bee0:	e00f      	b.n	800bf02 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bee8:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <mem_free+0xd0>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d202      	bcs.n	800bef8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bef2:	4a0d      	ldr	r2, [pc, #52]	; (800bf28 <mem_free+0xd0>)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f7ff fe97 	bl	800bc2c <plug_holes>
 800befe:	e000      	b.n	800bf02 <mem_free+0xaa>
    return;
 800bf00:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	08017740 	.word	0x08017740
 800bf0c:	08017814 	.word	0x08017814
 800bf10:	08017788 	.word	0x08017788
 800bf14:	240000c0 	.word	0x240000c0
 800bf18:	240000c4 	.word	0x240000c4
 800bf1c:	08017838 	.word	0x08017838
 800bf20:	08017854 	.word	0x08017854
 800bf24:	0801787c 	.word	0x0801787c
 800bf28:	240000c8 	.word	0x240000c8

0800bf2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bf38:	887b      	ldrh	r3, [r7, #2]
 800bf3a:	3303      	adds	r3, #3
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bf44:	8bfb      	ldrh	r3, [r7, #30]
 800bf46:	2b0b      	cmp	r3, #11
 800bf48:	d801      	bhi.n	800bf4e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf4e:	8bfb      	ldrh	r3, [r7, #30]
 800bf50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bf54:	d803      	bhi.n	800bf5e <mem_trim+0x32>
 800bf56:	8bfa      	ldrh	r2, [r7, #30]
 800bf58:	887b      	ldrh	r3, [r7, #2]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d201      	bcs.n	800bf62 <mem_trim+0x36>
    return NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e0cc      	b.n	800c0fc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf62:	4b68      	ldr	r3, [pc, #416]	; (800c104 <mem_trim+0x1d8>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d304      	bcc.n	800bf76 <mem_trim+0x4a>
 800bf6c:	4b66      	ldr	r3, [pc, #408]	; (800c108 <mem_trim+0x1dc>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d306      	bcc.n	800bf84 <mem_trim+0x58>
 800bf76:	4b65      	ldr	r3, [pc, #404]	; (800c10c <mem_trim+0x1e0>)
 800bf78:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bf7c:	4964      	ldr	r1, [pc, #400]	; (800c110 <mem_trim+0x1e4>)
 800bf7e:	4865      	ldr	r0, [pc, #404]	; (800c114 <mem_trim+0x1e8>)
 800bf80:	f00a faf8 	bl	8016574 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf84:	4b5f      	ldr	r3, [pc, #380]	; (800c104 <mem_trim+0x1d8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d304      	bcc.n	800bf98 <mem_trim+0x6c>
 800bf8e:	4b5e      	ldr	r3, [pc, #376]	; (800c108 <mem_trim+0x1dc>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d301      	bcc.n	800bf9c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	e0af      	b.n	800c0fc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3b08      	subs	r3, #8
 800bfa0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bfa2:	69b8      	ldr	r0, [r7, #24]
 800bfa4:	f7ff fe30 	bl	800bc08 <mem_to_ptr>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	881a      	ldrh	r2, [r3, #0]
 800bfb0:	8afb      	ldrh	r3, [r7, #22]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	3b08      	subs	r3, #8
 800bfb8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bfba:	8bfa      	ldrh	r2, [r7, #30]
 800bfbc:	8abb      	ldrh	r3, [r7, #20]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d906      	bls.n	800bfd0 <mem_trim+0xa4>
 800bfc2:	4b52      	ldr	r3, [pc, #328]	; (800c10c <mem_trim+0x1e0>)
 800bfc4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bfc8:	4953      	ldr	r1, [pc, #332]	; (800c118 <mem_trim+0x1ec>)
 800bfca:	4852      	ldr	r0, [pc, #328]	; (800c114 <mem_trim+0x1e8>)
 800bfcc:	f00a fad2 	bl	8016574 <iprintf>
  if (newsize > size) {
 800bfd0:	8bfa      	ldrh	r2, [r7, #30]
 800bfd2:	8abb      	ldrh	r3, [r7, #20]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d901      	bls.n	800bfdc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e08f      	b.n	800c0fc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800bfdc:	8bfa      	ldrh	r2, [r7, #30]
 800bfde:	8abb      	ldrh	r3, [r7, #20]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d101      	bne.n	800bfe8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	e089      	b.n	800c0fc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fdf9 	bl	800bbe4 <ptr_to_mem>
 800bff2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	791b      	ldrb	r3, [r3, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d13f      	bne.n	800c07c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c004:	d106      	bne.n	800c014 <mem_trim+0xe8>
 800c006:	4b41      	ldr	r3, [pc, #260]	; (800c10c <mem_trim+0x1e0>)
 800c008:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c00c:	4943      	ldr	r1, [pc, #268]	; (800c11c <mem_trim+0x1f0>)
 800c00e:	4841      	ldr	r0, [pc, #260]	; (800c114 <mem_trim+0x1e8>)
 800c010:	f00a fab0 	bl	8016574 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c01a:	8afa      	ldrh	r2, [r7, #22]
 800c01c:	8bfb      	ldrh	r3, [r7, #30]
 800c01e:	4413      	add	r3, r2
 800c020:	b29b      	uxth	r3, r3
 800c022:	3308      	adds	r3, #8
 800c024:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c026:	4b3e      	ldr	r3, [pc, #248]	; (800c120 <mem_trim+0x1f4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d106      	bne.n	800c03e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c030:	89fb      	ldrh	r3, [r7, #14]
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff fdd6 	bl	800bbe4 <ptr_to_mem>
 800c038:	4603      	mov	r3, r0
 800c03a:	4a39      	ldr	r2, [pc, #228]	; (800c120 <mem_trim+0x1f4>)
 800c03c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c03e:	89fb      	ldrh	r3, [r7, #14]
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff fdcf 	bl	800bbe4 <ptr_to_mem>
 800c046:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2200      	movs	r2, #0
 800c04c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	89ba      	ldrh	r2, [r7, #12]
 800c052:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	8afa      	ldrh	r2, [r7, #22]
 800c058:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	89fa      	ldrh	r2, [r7, #14]
 800c05e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c068:	d047      	beq.n	800c0fa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff fdb8 	bl	800bbe4 <ptr_to_mem>
 800c074:	4602      	mov	r2, r0
 800c076:	89fb      	ldrh	r3, [r7, #14]
 800c078:	8053      	strh	r3, [r2, #2]
 800c07a:	e03e      	b.n	800c0fa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c07c:	8bfb      	ldrh	r3, [r7, #30]
 800c07e:	f103 0214 	add.w	r2, r3, #20
 800c082:	8abb      	ldrh	r3, [r7, #20]
 800c084:	429a      	cmp	r2, r3
 800c086:	d838      	bhi.n	800c0fa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c088:	8afa      	ldrh	r2, [r7, #22]
 800c08a:	8bfb      	ldrh	r3, [r7, #30]
 800c08c:	4413      	add	r3, r2
 800c08e:	b29b      	uxth	r3, r3
 800c090:	3308      	adds	r3, #8
 800c092:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c09c:	d106      	bne.n	800c0ac <mem_trim+0x180>
 800c09e:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <mem_trim+0x1e0>)
 800c0a0:	f240 3216 	movw	r2, #790	; 0x316
 800c0a4:	491d      	ldr	r1, [pc, #116]	; (800c11c <mem_trim+0x1f0>)
 800c0a6:	481b      	ldr	r0, [pc, #108]	; (800c114 <mem_trim+0x1e8>)
 800c0a8:	f00a fa64 	bl	8016574 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c0ac:	89fb      	ldrh	r3, [r7, #14]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff fd98 	bl	800bbe4 <ptr_to_mem>
 800c0b4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <mem_trim+0x1f4>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d202      	bcs.n	800c0c6 <mem_trim+0x19a>
      lfree = mem2;
 800c0c0:	4a17      	ldr	r2, [pc, #92]	; (800c120 <mem_trim+0x1f4>)
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	881a      	ldrh	r2, [r3, #0]
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	8afa      	ldrh	r2, [r7, #22]
 800c0d8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	89fa      	ldrh	r2, [r7, #14]
 800c0de:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c0e8:	d007      	beq.n	800c0fa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff fd78 	bl	800bbe4 <ptr_to_mem>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	89fb      	ldrh	r3, [r7, #14]
 800c0f8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c0fa:	687b      	ldr	r3, [r7, #4]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3720      	adds	r7, #32
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	240000c0 	.word	0x240000c0
 800c108:	240000c4 	.word	0x240000c4
 800c10c:	08017740 	.word	0x08017740
 800c110:	080178b0 	.word	0x080178b0
 800c114:	08017788 	.word	0x08017788
 800c118:	080178c8 	.word	0x080178c8
 800c11c:	080178e8 	.word	0x080178e8
 800c120:	240000c8 	.word	0x240000c8

0800c124 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c12e:	88fb      	ldrh	r3, [r7, #6]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <mem_malloc+0x14>
    return NULL;
 800c134:	2300      	movs	r3, #0
 800c136:	e0d9      	b.n	800c2ec <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c138:	88fb      	ldrh	r3, [r7, #6]
 800c13a:	3303      	adds	r3, #3
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f023 0303 	bic.w	r3, r3, #3
 800c142:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c144:	8bbb      	ldrh	r3, [r7, #28]
 800c146:	2b0b      	cmp	r3, #11
 800c148:	d801      	bhi.n	800c14e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c14a:	230c      	movs	r3, #12
 800c14c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c14e:	8bbb      	ldrh	r3, [r7, #28]
 800c150:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c154:	d803      	bhi.n	800c15e <mem_malloc+0x3a>
 800c156:	8bba      	ldrh	r2, [r7, #28]
 800c158:	88fb      	ldrh	r3, [r7, #6]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d201      	bcs.n	800c162 <mem_malloc+0x3e>
    return NULL;
 800c15e:	2300      	movs	r3, #0
 800c160:	e0c4      	b.n	800c2ec <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c162:	4b64      	ldr	r3, [pc, #400]	; (800c2f4 <mem_malloc+0x1d0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4618      	mov	r0, r3
 800c168:	f7ff fd4e 	bl	800bc08 <mem_to_ptr>
 800c16c:	4603      	mov	r3, r0
 800c16e:	83fb      	strh	r3, [r7, #30]
 800c170:	e0b4      	b.n	800c2dc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c172:	8bfb      	ldrh	r3, [r7, #30]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff fd35 	bl	800bbe4 <ptr_to_mem>
 800c17a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	791b      	ldrb	r3, [r3, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f040 80a4 	bne.w	800c2ce <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	8bfb      	ldrh	r3, [r7, #30]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	f1a3 0208 	sub.w	r2, r3, #8
 800c194:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c196:	429a      	cmp	r2, r3
 800c198:	f0c0 8099 	bcc.w	800c2ce <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	8bfb      	ldrh	r3, [r7, #30]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	f1a3 0208 	sub.w	r2, r3, #8
 800c1aa:	8bbb      	ldrh	r3, [r7, #28]
 800c1ac:	3314      	adds	r3, #20
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d333      	bcc.n	800c21a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c1b2:	8bfa      	ldrh	r2, [r7, #30]
 800c1b4:	8bbb      	ldrh	r3, [r7, #28]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3308      	adds	r3, #8
 800c1bc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c1be:	8a7b      	ldrh	r3, [r7, #18]
 800c1c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c1c4:	d106      	bne.n	800c1d4 <mem_malloc+0xb0>
 800c1c6:	4b4c      	ldr	r3, [pc, #304]	; (800c2f8 <mem_malloc+0x1d4>)
 800c1c8:	f240 3287 	movw	r2, #903	; 0x387
 800c1cc:	494b      	ldr	r1, [pc, #300]	; (800c2fc <mem_malloc+0x1d8>)
 800c1ce:	484c      	ldr	r0, [pc, #304]	; (800c300 <mem_malloc+0x1dc>)
 800c1d0:	f00a f9d0 	bl	8016574 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c1d4:	8a7b      	ldrh	r3, [r7, #18]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff fd04 	bl	800bbe4 <ptr_to_mem>
 800c1dc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	881a      	ldrh	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8bfa      	ldrh	r2, [r7, #30]
 800c1f0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	8a7a      	ldrh	r2, [r7, #18]
 800c1f6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c206:	d00b      	beq.n	800c220 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff fce9 	bl	800bbe4 <ptr_to_mem>
 800c212:	4602      	mov	r2, r0
 800c214:	8a7b      	ldrh	r3, [r7, #18]
 800c216:	8053      	strh	r3, [r2, #2]
 800c218:	e002      	b.n	800c220 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2201      	movs	r2, #1
 800c21e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c220:	4b34      	ldr	r3, [pc, #208]	; (800c2f4 <mem_malloc+0x1d0>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	429a      	cmp	r2, r3
 800c228:	d127      	bne.n	800c27a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c22a:	4b32      	ldr	r3, [pc, #200]	; (800c2f4 <mem_malloc+0x1d0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c230:	e005      	b.n	800c23e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fcd4 	bl	800bbe4 <ptr_to_mem>
 800c23c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	791b      	ldrb	r3, [r3, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <mem_malloc+0x12c>
 800c246:	4b2f      	ldr	r3, [pc, #188]	; (800c304 <mem_malloc+0x1e0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d1f0      	bne.n	800c232 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c250:	4a28      	ldr	r2, [pc, #160]	; (800c2f4 <mem_malloc+0x1d0>)
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c256:	4b27      	ldr	r3, [pc, #156]	; (800c2f4 <mem_malloc+0x1d0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	4b2a      	ldr	r3, [pc, #168]	; (800c304 <mem_malloc+0x1e0>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d00b      	beq.n	800c27a <mem_malloc+0x156>
 800c262:	4b24      	ldr	r3, [pc, #144]	; (800c2f4 <mem_malloc+0x1d0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	791b      	ldrb	r3, [r3, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d006      	beq.n	800c27a <mem_malloc+0x156>
 800c26c:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <mem_malloc+0x1d4>)
 800c26e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c272:	4925      	ldr	r1, [pc, #148]	; (800c308 <mem_malloc+0x1e4>)
 800c274:	4822      	ldr	r0, [pc, #136]	; (800c300 <mem_malloc+0x1dc>)
 800c276:	f00a f97d 	bl	8016574 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c27a:	8bba      	ldrh	r2, [r7, #28]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	4413      	add	r3, r2
 800c280:	3308      	adds	r3, #8
 800c282:	4a20      	ldr	r2, [pc, #128]	; (800c304 <mem_malloc+0x1e0>)
 800c284:	6812      	ldr	r2, [r2, #0]
 800c286:	4293      	cmp	r3, r2
 800c288:	d906      	bls.n	800c298 <mem_malloc+0x174>
 800c28a:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <mem_malloc+0x1d4>)
 800c28c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c290:	491e      	ldr	r1, [pc, #120]	; (800c30c <mem_malloc+0x1e8>)
 800c292:	481b      	ldr	r0, [pc, #108]	; (800c300 <mem_malloc+0x1dc>)
 800c294:	f00a f96e 	bl	8016574 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <mem_malloc+0x18c>
 800c2a2:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <mem_malloc+0x1d4>)
 800c2a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c2a8:	4919      	ldr	r1, [pc, #100]	; (800c310 <mem_malloc+0x1ec>)
 800c2aa:	4815      	ldr	r0, [pc, #84]	; (800c300 <mem_malloc+0x1dc>)
 800c2ac:	f00a f962 	bl	8016574 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d006      	beq.n	800c2c8 <mem_malloc+0x1a4>
 800c2ba:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <mem_malloc+0x1d4>)
 800c2bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c2c0:	4914      	ldr	r1, [pc, #80]	; (800c314 <mem_malloc+0x1f0>)
 800c2c2:	480f      	ldr	r0, [pc, #60]	; (800c300 <mem_malloc+0x1dc>)
 800c2c4:	f00a f956 	bl	8016574 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	e00e      	b.n	800c2ec <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c2ce:	8bfb      	ldrh	r3, [r7, #30]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fc87 	bl	800bbe4 <ptr_to_mem>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2dc:	8bfa      	ldrh	r2, [r7, #30]
 800c2de:	8bbb      	ldrh	r3, [r7, #28]
 800c2e0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	f4ff af44 	bcc.w	800c172 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3720      	adds	r7, #32
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	240000c8 	.word	0x240000c8
 800c2f8:	08017740 	.word	0x08017740
 800c2fc:	080178e8 	.word	0x080178e8
 800c300:	08017788 	.word	0x08017788
 800c304:	240000c4 	.word	0x240000c4
 800c308:	080178fc 	.word	0x080178fc
 800c30c:	08017918 	.word	0x08017918
 800c310:	08017948 	.word	0x08017948
 800c314:	08017978 	.word	0x08017978

0800c318 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	3303      	adds	r3, #3
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	e011      	b.n	800c35e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	461a      	mov	r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4413      	add	r3, r2
 800c356:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3301      	adds	r3, #1
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	885b      	ldrh	r3, [r3, #2]
 800c362:	461a      	mov	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4293      	cmp	r3, r2
 800c368:	dbe7      	blt.n	800c33a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c37e:	2300      	movs	r3, #0
 800c380:	80fb      	strh	r3, [r7, #6]
 800c382:	e009      	b.n	800c398 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	4a08      	ldr	r2, [pc, #32]	; (800c3a8 <memp_init+0x30>)
 800c388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff ffc3 	bl	800c318 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c392:	88fb      	ldrh	r3, [r7, #6]
 800c394:	3301      	adds	r3, #1
 800c396:	80fb      	strh	r3, [r7, #6]
 800c398:	88fb      	ldrh	r3, [r7, #6]
 800c39a:	2b08      	cmp	r3, #8
 800c39c:	d9f2      	bls.n	800c384 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	0801af5c 	.word	0x0801af5c

0800c3ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d012      	beq.n	800c3e8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	6812      	ldr	r2, [r2, #0]
 800c3ca:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f003 0303 	and.w	r3, r3, #3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d006      	beq.n	800c3e4 <do_memp_malloc_pool+0x38>
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <do_memp_malloc_pool+0x48>)
 800c3d8:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c3dc:	4906      	ldr	r1, [pc, #24]	; (800c3f8 <do_memp_malloc_pool+0x4c>)
 800c3de:	4807      	ldr	r0, [pc, #28]	; (800c3fc <do_memp_malloc_pool+0x50>)
 800c3e0:	f00a f8c8 	bl	8016574 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	e000      	b.n	800c3ea <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	0801799c 	.word	0x0801799c
 800c3f8:	080179cc 	.word	0x080179cc
 800c3fc:	080179f0 	.word	0x080179f0

0800c400 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d106      	bne.n	800c41c <memp_malloc_pool+0x1c>
 800c40e:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <memp_malloc_pool+0x38>)
 800c410:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c414:	4909      	ldr	r1, [pc, #36]	; (800c43c <memp_malloc_pool+0x3c>)
 800c416:	480a      	ldr	r0, [pc, #40]	; (800c440 <memp_malloc_pool+0x40>)
 800c418:	f00a f8ac 	bl	8016574 <iprintf>
  if (desc == NULL) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <memp_malloc_pool+0x26>
    return NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	e003      	b.n	800c42e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f7ff ffc0 	bl	800c3ac <do_memp_malloc_pool>
 800c42c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	0801799c 	.word	0x0801799c
 800c43c:	08017a18 	.word	0x08017a18
 800c440:	080179f0 	.word	0x080179f0

0800c444 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b08      	cmp	r3, #8
 800c452:	d908      	bls.n	800c466 <memp_malloc+0x22>
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <memp_malloc+0x3c>)
 800c456:	f240 1257 	movw	r2, #343	; 0x157
 800c45a:	490a      	ldr	r1, [pc, #40]	; (800c484 <memp_malloc+0x40>)
 800c45c:	480a      	ldr	r0, [pc, #40]	; (800c488 <memp_malloc+0x44>)
 800c45e:	f00a f889 	bl	8016574 <iprintf>
 800c462:	2300      	movs	r3, #0
 800c464:	e008      	b.n	800c478 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	4a08      	ldr	r2, [pc, #32]	; (800c48c <memp_malloc+0x48>)
 800c46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7ff ff9c 	bl	800c3ac <do_memp_malloc_pool>
 800c474:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c476:	68fb      	ldr	r3, [r7, #12]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	0801799c 	.word	0x0801799c
 800c484:	08017a2c 	.word	0x08017a2c
 800c488:	080179f0 	.word	0x080179f0
 800c48c:	0801af5c 	.word	0x0801af5c

0800c490 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d006      	beq.n	800c4b2 <do_memp_free_pool+0x22>
 800c4a4:	4b0a      	ldr	r3, [pc, #40]	; (800c4d0 <do_memp_free_pool+0x40>)
 800c4a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c4aa:	490a      	ldr	r1, [pc, #40]	; (800c4d4 <do_memp_free_pool+0x44>)
 800c4ac:	480a      	ldr	r0, [pc, #40]	; (800c4d8 <do_memp_free_pool+0x48>)
 800c4ae:	f00a f861 	bl	8016574 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c4c8:	bf00      	nop
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	0801799c 	.word	0x0801799c
 800c4d4:	08017a4c 	.word	0x08017a4c
 800c4d8:	080179f0 	.word	0x080179f0

0800c4dc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d106      	bne.n	800c4fa <memp_free_pool+0x1e>
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <memp_free_pool+0x3c>)
 800c4ee:	f240 1295 	movw	r2, #405	; 0x195
 800c4f2:	490a      	ldr	r1, [pc, #40]	; (800c51c <memp_free_pool+0x40>)
 800c4f4:	480a      	ldr	r0, [pc, #40]	; (800c520 <memp_free_pool+0x44>)
 800c4f6:	f00a f83d 	bl	8016574 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d007      	beq.n	800c510 <memp_free_pool+0x34>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff ffc1 	bl	800c490 <do_memp_free_pool>
 800c50e:	e000      	b.n	800c512 <memp_free_pool+0x36>
    return;
 800c510:	bf00      	nop
}
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	0801799c 	.word	0x0801799c
 800c51c:	08017a18 	.word	0x08017a18
 800c520:	080179f0 	.word	0x080179f0

0800c524 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b08      	cmp	r3, #8
 800c534:	d907      	bls.n	800c546 <memp_free+0x22>
 800c536:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <memp_free+0x44>)
 800c538:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c53c:	490b      	ldr	r1, [pc, #44]	; (800c56c <memp_free+0x48>)
 800c53e:	480c      	ldr	r0, [pc, #48]	; (800c570 <memp_free+0x4c>)
 800c540:	f00a f818 	bl	8016574 <iprintf>
 800c544:	e00c      	b.n	800c560 <memp_free+0x3c>

  if (mem == NULL) {
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d008      	beq.n	800c55e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	4a09      	ldr	r2, [pc, #36]	; (800c574 <memp_free+0x50>)
 800c550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c554:	6839      	ldr	r1, [r7, #0]
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff ff9a 	bl	800c490 <do_memp_free_pool>
 800c55c:	e000      	b.n	800c560 <memp_free+0x3c>
    return;
 800c55e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	0801799c 	.word	0x0801799c
 800c56c:	08017a6c 	.word	0x08017a6c
 800c570:	080179f0 	.word	0x080179f0
 800c574:	0801af5c 	.word	0x0801af5c

0800c578 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c578:	b480      	push	{r7}
 800c57a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c57c:	bf00      	nop
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d108      	bne.n	800c5ae <netif_add+0x26>
 800c59c:	4b57      	ldr	r3, [pc, #348]	; (800c6fc <netif_add+0x174>)
 800c59e:	f240 1227 	movw	r2, #295	; 0x127
 800c5a2:	4957      	ldr	r1, [pc, #348]	; (800c700 <netif_add+0x178>)
 800c5a4:	4857      	ldr	r0, [pc, #348]	; (800c704 <netif_add+0x17c>)
 800c5a6:	f009 ffe5 	bl	8016574 <iprintf>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e0a2      	b.n	800c6f4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d108      	bne.n	800c5c6 <netif_add+0x3e>
 800c5b4:	4b51      	ldr	r3, [pc, #324]	; (800c6fc <netif_add+0x174>)
 800c5b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c5ba:	4953      	ldr	r1, [pc, #332]	; (800c708 <netif_add+0x180>)
 800c5bc:	4851      	ldr	r0, [pc, #324]	; (800c704 <netif_add+0x17c>)
 800c5be:	f009 ffd9 	bl	8016574 <iprintf>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e096      	b.n	800c6f4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c5cc:	4b4f      	ldr	r3, [pc, #316]	; (800c70c <netif_add+0x184>)
 800c5ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c5d6:	4b4d      	ldr	r3, [pc, #308]	; (800c70c <netif_add+0x184>)
 800c5d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c5e0:	4b4a      	ldr	r3, [pc, #296]	; (800c70c <netif_add+0x184>)
 800c5e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4a45      	ldr	r2, [pc, #276]	; (800c710 <netif_add+0x188>)
 800c5fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6a3a      	ldr	r2, [r7, #32]
 800c614:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c616:	4b3f      	ldr	r3, [pc, #252]	; (800c714 <netif_add+0x18c>)
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c624:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f913 	bl	800c858 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	4798      	blx	r3
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <netif_add+0xba>
    return NULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	e058      	b.n	800c6f4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c648:	2bff      	cmp	r3, #255	; 0xff
 800c64a:	d103      	bne.n	800c654 <netif_add+0xcc>
        netif->num = 0;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c658:	4b2f      	ldr	r3, [pc, #188]	; (800c718 <netif_add+0x190>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	e02b      	b.n	800c6b8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	429a      	cmp	r2, r3
 800c666:	d106      	bne.n	800c676 <netif_add+0xee>
 800c668:	4b24      	ldr	r3, [pc, #144]	; (800c6fc <netif_add+0x174>)
 800c66a:	f240 128b 	movw	r2, #395	; 0x18b
 800c66e:	492b      	ldr	r1, [pc, #172]	; (800c71c <netif_add+0x194>)
 800c670:	4824      	ldr	r0, [pc, #144]	; (800c704 <netif_add+0x17c>)
 800c672:	f009 ff7f 	bl	8016574 <iprintf>
        num_netifs++;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	3301      	adds	r3, #1
 800c67a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2bff      	cmp	r3, #255	; 0xff
 800c680:	dd06      	ble.n	800c690 <netif_add+0x108>
 800c682:	4b1e      	ldr	r3, [pc, #120]	; (800c6fc <netif_add+0x174>)
 800c684:	f240 128d 	movw	r2, #397	; 0x18d
 800c688:	4925      	ldr	r1, [pc, #148]	; (800c720 <netif_add+0x198>)
 800c68a:	481e      	ldr	r0, [pc, #120]	; (800c704 <netif_add+0x17c>)
 800c68c:	f009 ff72 	bl	8016574 <iprintf>
        if (netif2->num == netif->num) {
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d108      	bne.n	800c6b2 <netif_add+0x12a>
          netif->num++;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c6b0:	e005      	b.n	800c6be <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1d0      	bne.n	800c660 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1be      	bne.n	800c642 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6ca:	2bfe      	cmp	r3, #254	; 0xfe
 800c6cc:	d103      	bne.n	800c6d6 <netif_add+0x14e>
    netif_num = 0;
 800c6ce:	4b11      	ldr	r3, [pc, #68]	; (800c714 <netif_add+0x18c>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	e006      	b.n	800c6e4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6dc:	3301      	adds	r3, #1
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b0c      	ldr	r3, [pc, #48]	; (800c714 <netif_add+0x18c>)
 800c6e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <netif_add+0x190>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c6ec:	4a0a      	ldr	r2, [pc, #40]	; (800c718 <netif_add+0x190>)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	08017a88 	.word	0x08017a88
 800c700:	08017b1c 	.word	0x08017b1c
 800c704:	08017ad8 	.word	0x08017ad8
 800c708:	08017b38 	.word	0x08017b38
 800c70c:	0801afc0 	.word	0x0801afc0
 800c710:	0800cb33 	.word	0x0800cb33
 800c714:	240000f0 	.word	0x240000f0
 800c718:	24003604 	.word	0x24003604
 800c71c:	08017b5c 	.word	0x08017b5c
 800c720:	08017b70 	.word	0x08017b70

0800c724 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f002 fdf3 	bl	800f31c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f007 fb2b 	bl	8013d94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c73e:	bf00      	nop
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
	...

0800c748 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <netif_do_set_ipaddr+0x20>
 800c75a:	4b1d      	ldr	r3, [pc, #116]	; (800c7d0 <netif_do_set_ipaddr+0x88>)
 800c75c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c760:	491c      	ldr	r1, [pc, #112]	; (800c7d4 <netif_do_set_ipaddr+0x8c>)
 800c762:	481d      	ldr	r0, [pc, #116]	; (800c7d8 <netif_do_set_ipaddr+0x90>)
 800c764:	f009 ff06 	bl	8016574 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <netif_do_set_ipaddr+0x34>
 800c76e:	4b18      	ldr	r3, [pc, #96]	; (800c7d0 <netif_do_set_ipaddr+0x88>)
 800c770:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c774:	4917      	ldr	r1, [pc, #92]	; (800c7d4 <netif_do_set_ipaddr+0x8c>)
 800c776:	4818      	ldr	r0, [pc, #96]	; (800c7d8 <netif_do_set_ipaddr+0x90>)
 800c778:	f009 fefc 	bl	8016574 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3304      	adds	r3, #4
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d01c      	beq.n	800c7c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3304      	adds	r3, #4
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c79a:	f107 0314 	add.w	r3, r7, #20
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff ffbf 	bl	800c724 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <netif_do_set_ipaddr+0x6a>
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	e000      	b.n	800c7b4 <netif_do_set_ipaddr+0x6c>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f8d2 	bl	800c964 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e000      	b.n	800c7c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	08017a88 	.word	0x08017a88
 800c7d4:	08017ba0 	.word	0x08017ba0
 800c7d8:	08017ad8 	.word	0x08017ad8

0800c7dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d00a      	beq.n	800c80c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <netif_do_set_netmask+0x26>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	e000      	b.n	800c804 <netif_do_set_netmask+0x28>
 800c802:	2300      	movs	r3, #0
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c808:	2301      	movs	r3, #1
 800c80a:	e000      	b.n	800c80e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	330c      	adds	r3, #12
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	429a      	cmp	r2, r3
 800c832:	d00a      	beq.n	800c84a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <netif_do_set_gw+0x26>
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	e000      	b.n	800c842 <netif_do_set_gw+0x28>
 800c840:	2300      	movs	r3, #0
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c846:	2301      	movs	r3, #1
 800c848:	e000      	b.n	800c84c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
 800c864:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c866:	2300      	movs	r3, #0
 800c868:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c874:	4b1c      	ldr	r3, [pc, #112]	; (800c8e8 <netif_set_addr+0x90>)
 800c876:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c87e:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <netif_set_addr+0x90>)
 800c880:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c888:	4b17      	ldr	r3, [pc, #92]	; (800c8e8 <netif_set_addr+0x90>)
 800c88a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <netif_set_addr+0x42>
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d101      	bne.n	800c89e <netif_set_addr+0x46>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e000      	b.n	800c8a0 <netif_set_addr+0x48>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d006      	beq.n	800c8b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f7ff ff49 	bl	800c748 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c8b6:	69fa      	ldr	r2, [r7, #28]
 800c8b8:	6879      	ldr	r1, [r7, #4]
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff ff8e 	bl	800c7dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c8c0:	69ba      	ldr	r2, [r7, #24]
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff ffa8 	bl	800c81a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d106      	bne.n	800c8de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8d0:	f107 0310 	add.w	r3, r7, #16
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f7ff ff35 	bl	800c748 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c8de:	bf00      	nop
 800c8e0:	3720      	adds	r7, #32
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0801afc0 	.word	0x0801afc0

0800c8ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c8f4:	4a04      	ldr	r2, [pc, #16]	; (800c908 <netif_set_default+0x1c>)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	24003608 	.word	0x24003608

0800c90c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d107      	bne.n	800c92a <netif_set_up+0x1e>
 800c91a:	4b0f      	ldr	r3, [pc, #60]	; (800c958 <netif_set_up+0x4c>)
 800c91c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c920:	490e      	ldr	r1, [pc, #56]	; (800c95c <netif_set_up+0x50>)
 800c922:	480f      	ldr	r0, [pc, #60]	; (800c960 <netif_set_up+0x54>)
 800c924:	f009 fe26 	bl	8016574 <iprintf>
 800c928:	e013      	b.n	800c952 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c930:	f003 0301 	and.w	r3, r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10c      	bne.n	800c952 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c93e:	f043 0301 	orr.w	r3, r3, #1
 800c942:	b2da      	uxtb	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c94a:	2103      	movs	r1, #3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f809 	bl	800c964 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	08017a88 	.word	0x08017a88
 800c95c:	08017c10 	.word	0x08017c10
 800c960:	08017ad8 	.word	0x08017ad8

0800c964 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <netif_issue_reports+0x20>
 800c976:	4b18      	ldr	r3, [pc, #96]	; (800c9d8 <netif_issue_reports+0x74>)
 800c978:	f240 326d 	movw	r2, #877	; 0x36d
 800c97c:	4917      	ldr	r1, [pc, #92]	; (800c9dc <netif_issue_reports+0x78>)
 800c97e:	4818      	ldr	r0, [pc, #96]	; (800c9e0 <netif_issue_reports+0x7c>)
 800c980:	f009 fdf8 	bl	8016574 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c98a:	f003 0304 	and.w	r3, r3, #4
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01e      	beq.n	800c9d0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c998:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d017      	beq.n	800c9d0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9a0:	78fb      	ldrb	r3, [r7, #3]
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d013      	beq.n	800c9d2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00e      	beq.n	800c9d2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9ba:	f003 0308 	and.w	r3, r3, #8
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d007      	beq.n	800c9d2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f008 f94d 	bl	8014c68 <etharp_request>
 800c9ce:	e000      	b.n	800c9d2 <netif_issue_reports+0x6e>
    return;
 800c9d0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	08017a88 	.word	0x08017a88
 800c9dc:	08017c2c 	.word	0x08017c2c
 800c9e0:	08017ad8 	.word	0x08017ad8

0800c9e4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d107      	bne.n	800ca02 <netif_set_down+0x1e>
 800c9f2:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <netif_set_down+0x58>)
 800c9f4:	f240 329b 	movw	r2, #923	; 0x39b
 800c9f8:	4911      	ldr	r1, [pc, #68]	; (800ca40 <netif_set_down+0x5c>)
 800c9fa:	4812      	ldr	r0, [pc, #72]	; (800ca44 <netif_set_down+0x60>)
 800c9fc:	f009 fdba 	bl	8016574 <iprintf>
 800ca00:	e019      	b.n	800ca36 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d012      	beq.n	800ca36 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca16:	f023 0301 	bic.w	r3, r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca28:	f003 0308 	and.w	r3, r3, #8
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f007 fcd7 	bl	80143e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	08017a88 	.word	0x08017a88
 800ca40:	08017c50 	.word	0x08017c50
 800ca44:	08017ad8 	.word	0x08017ad8

0800ca48 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d107      	bne.n	800ca66 <netif_set_link_up+0x1e>
 800ca56:	4b13      	ldr	r3, [pc, #76]	; (800caa4 <netif_set_link_up+0x5c>)
 800ca58:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ca5c:	4912      	ldr	r1, [pc, #72]	; (800caa8 <netif_set_link_up+0x60>)
 800ca5e:	4813      	ldr	r0, [pc, #76]	; (800caac <netif_set_link_up+0x64>)
 800ca60:	f009 fd88 	bl	8016574 <iprintf>
 800ca64:	e01b      	b.n	800ca9e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d114      	bne.n	800ca9e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca7a:	f043 0304 	orr.w	r3, r3, #4
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca86:	2103      	movs	r1, #3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff ff6b 	bl	800c964 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d003      	beq.n	800ca9e <netif_set_link_up+0x56>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	69db      	ldr	r3, [r3, #28]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	08017a88 	.word	0x08017a88
 800caa8:	08017c70 	.word	0x08017c70
 800caac:	08017ad8 	.word	0x08017ad8

0800cab0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d107      	bne.n	800cace <netif_set_link_down+0x1e>
 800cabe:	4b11      	ldr	r3, [pc, #68]	; (800cb04 <netif_set_link_down+0x54>)
 800cac0:	f240 4206 	movw	r2, #1030	; 0x406
 800cac4:	4910      	ldr	r1, [pc, #64]	; (800cb08 <netif_set_link_down+0x58>)
 800cac6:	4811      	ldr	r0, [pc, #68]	; (800cb0c <netif_set_link_down+0x5c>)
 800cac8:	f009 fd54 	bl	8016574 <iprintf>
 800cacc:	e017      	b.n	800cafe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cad4:	f003 0304 	and.w	r3, r3, #4
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d010      	beq.n	800cafe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cae2:	f023 0304 	bic.w	r3, r3, #4
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <netif_set_link_down+0x4e>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	08017a88 	.word	0x08017a88
 800cb08:	08017c94 	.word	0x08017c94
 800cb0c:	08017ad8 	.word	0x08017ad8

0800cb10 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d002      	beq.n	800cb26 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	61da      	str	r2, [r3, #28]
  }
}
 800cb26:	bf00      	nop
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cb3e:	f06f 030b 	mvn.w	r3, #11
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3714      	adds	r7, #20
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
	...

0800cb50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d013      	beq.n	800cb88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cb60:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <netif_get_by_index+0x48>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	e00c      	b.n	800cb82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb6e:	3301      	adds	r3, #1
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	79fa      	ldrb	r2, [r7, #7]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d101      	bne.n	800cb7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	e006      	b.n	800cb8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1ef      	bne.n	800cb68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	24003604 	.word	0x24003604

0800cb9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cba2:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <pbuf_free_ooseq+0x38>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cba8:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <pbuf_free_ooseq+0x3c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	607b      	str	r3, [r7, #4]
 800cbae:	e00a      	b.n	800cbc6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d003      	beq.n	800cbc0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f002 fbed 	bl	800f398 <tcp_free_ooseq>
      return;
 800cbbe:	e005      	b.n	800cbcc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1f1      	bne.n	800cbb0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	2400360c 	.word	0x2400360c
 800cbd8:	24003614 	.word	0x24003614

0800cbdc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800cbe0:	4b03      	ldr	r3, [pc, #12]	; (800cbf0 <pbuf_pool_is_empty+0x14>)
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cbe6:	bf00      	nop
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	2400360c 	.word	0x2400360c

0800cbf4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	4611      	mov	r1, r2
 800cc00:	461a      	mov	r2, r3
 800cc02:	460b      	mov	r3, r1
 800cc04:	80fb      	strh	r3, [r7, #6]
 800cc06:	4613      	mov	r3, r2
 800cc08:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	88fa      	ldrh	r2, [r7, #6]
 800cc1a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	88ba      	ldrh	r2, [r7, #4]
 800cc20:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cc22:	8b3b      	ldrh	r3, [r7, #24]
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	7f3a      	ldrb	r2, [r7, #28]
 800cc2e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2201      	movs	r2, #1
 800cc34:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	73da      	strb	r2, [r3, #15]
}
 800cc3c:	bf00      	nop
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08c      	sub	sp, #48	; 0x30
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71fb      	strb	r3, [r7, #7]
 800cc52:	460b      	mov	r3, r1
 800cc54:	80bb      	strh	r3, [r7, #4]
 800cc56:	4613      	mov	r3, r2
 800cc58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cc5e:	887b      	ldrh	r3, [r7, #2]
 800cc60:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc64:	d07f      	beq.n	800cd66 <pbuf_alloc+0x11e>
 800cc66:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc6a:	f300 80c8 	bgt.w	800cdfe <pbuf_alloc+0x1b6>
 800cc6e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc72:	d010      	beq.n	800cc96 <pbuf_alloc+0x4e>
 800cc74:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc78:	f300 80c1 	bgt.w	800cdfe <pbuf_alloc+0x1b6>
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d002      	beq.n	800cc86 <pbuf_alloc+0x3e>
 800cc80:	2b41      	cmp	r3, #65	; 0x41
 800cc82:	f040 80bc 	bne.w	800cdfe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cc86:	887a      	ldrh	r2, [r7, #2]
 800cc88:	88bb      	ldrh	r3, [r7, #4]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	f000 f8d1 	bl	800ce34 <pbuf_alloc_reference>
 800cc92:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cc94:	e0bd      	b.n	800ce12 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cc96:	2300      	movs	r3, #0
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cc9e:	88bb      	ldrh	r3, [r7, #4]
 800cca0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cca2:	2008      	movs	r0, #8
 800cca4:	f7ff fbce 	bl	800c444 <memp_malloc>
 800cca8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d109      	bne.n	800ccc4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ccb0:	f7ff ff94 	bl	800cbdc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ccba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccbc:	f000 faa8 	bl	800d210 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e0a7      	b.n	800ce14 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ccc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccc6:	3303      	adds	r3, #3
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	f023 0303 	bic.w	r3, r3, #3
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	8b7a      	ldrh	r2, [r7, #26]
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	bf28      	it	cs
 800ccdc:	4613      	movcs	r3, r2
 800ccde:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cce0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cce2:	3310      	adds	r3, #16
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	4413      	add	r3, r2
 800cce8:	3303      	adds	r3, #3
 800ccea:	f023 0303 	bic.w	r3, r3, #3
 800ccee:	4618      	mov	r0, r3
 800ccf0:	89f9      	ldrh	r1, [r7, #14]
 800ccf2:	8b7a      	ldrh	r2, [r7, #26]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	887b      	ldrh	r3, [r7, #2]
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4601      	mov	r1, r0
 800cd00:	6938      	ldr	r0, [r7, #16]
 800cd02:	f7ff ff77 	bl	800cbf4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f003 0303 	and.w	r3, r3, #3
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d006      	beq.n	800cd20 <pbuf_alloc+0xd8>
 800cd12:	4b42      	ldr	r3, [pc, #264]	; (800ce1c <pbuf_alloc+0x1d4>)
 800cd14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd18:	4941      	ldr	r1, [pc, #260]	; (800ce20 <pbuf_alloc+0x1d8>)
 800cd1a:	4842      	ldr	r0, [pc, #264]	; (800ce24 <pbuf_alloc+0x1dc>)
 800cd1c:	f009 fc2a 	bl	8016574 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd22:	3303      	adds	r3, #3
 800cd24:	f023 0303 	bic.w	r3, r3, #3
 800cd28:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd2c:	d106      	bne.n	800cd3c <pbuf_alloc+0xf4>
 800cd2e:	4b3b      	ldr	r3, [pc, #236]	; (800ce1c <pbuf_alloc+0x1d4>)
 800cd30:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cd34:	493c      	ldr	r1, [pc, #240]	; (800ce28 <pbuf_alloc+0x1e0>)
 800cd36:	483b      	ldr	r0, [pc, #236]	; (800ce24 <pbuf_alloc+0x1dc>)
 800cd38:	f009 fc1c 	bl	8016574 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24
 800cd46:	e002      	b.n	800cd4e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	693a      	ldr	r2, [r7, #16]
 800cd4c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cd52:	8b7a      	ldrh	r2, [r7, #26]
 800cd54:	89fb      	ldrh	r3, [r7, #14]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cd5e:	8b7b      	ldrh	r3, [r7, #26]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d19e      	bne.n	800cca2 <pbuf_alloc+0x5a>
      break;
 800cd64:	e055      	b.n	800ce12 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cd66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd68:	3303      	adds	r3, #3
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f023 0303 	bic.w	r3, r3, #3
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	88bb      	ldrh	r3, [r7, #4]
 800cd74:	3303      	adds	r3, #3
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	f023 0303 	bic.w	r3, r3, #3
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	4413      	add	r3, r2
 800cd80:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cd82:	8b3b      	ldrh	r3, [r7, #24]
 800cd84:	3310      	adds	r3, #16
 800cd86:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd88:	8b3a      	ldrh	r2, [r7, #24]
 800cd8a:	88bb      	ldrh	r3, [r7, #4]
 800cd8c:	3303      	adds	r3, #3
 800cd8e:	f023 0303 	bic.w	r3, r3, #3
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d306      	bcc.n	800cda4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cd96:	8afa      	ldrh	r2, [r7, #22]
 800cd98:	88bb      	ldrh	r3, [r7, #4]
 800cd9a:	3303      	adds	r3, #3
 800cd9c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d201      	bcs.n	800cda8 <pbuf_alloc+0x160>
        return NULL;
 800cda4:	2300      	movs	r3, #0
 800cda6:	e035      	b.n	800ce14 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cda8:	8afb      	ldrh	r3, [r7, #22]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff f9ba 	bl	800c124 <mem_malloc>
 800cdb0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <pbuf_alloc+0x174>
        return NULL;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e02b      	b.n	800ce14 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cdbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdbe:	3310      	adds	r3, #16
 800cdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc2:	4413      	add	r3, r2
 800cdc4:	3303      	adds	r3, #3
 800cdc6:	f023 0303 	bic.w	r3, r3, #3
 800cdca:	4618      	mov	r0, r3
 800cdcc:	88b9      	ldrh	r1, [r7, #4]
 800cdce:	88ba      	ldrh	r2, [r7, #4]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9301      	str	r3, [sp, #4]
 800cdd4:	887b      	ldrh	r3, [r7, #2]
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4601      	mov	r1, r0
 800cddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdde:	f7ff ff09 	bl	800cbf4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f003 0303 	and.w	r3, r3, #3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d010      	beq.n	800ce10 <pbuf_alloc+0x1c8>
 800cdee:	4b0b      	ldr	r3, [pc, #44]	; (800ce1c <pbuf_alloc+0x1d4>)
 800cdf0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cdf4:	490d      	ldr	r1, [pc, #52]	; (800ce2c <pbuf_alloc+0x1e4>)
 800cdf6:	480b      	ldr	r0, [pc, #44]	; (800ce24 <pbuf_alloc+0x1dc>)
 800cdf8:	f009 fbbc 	bl	8016574 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cdfc:	e008      	b.n	800ce10 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cdfe:	4b07      	ldr	r3, [pc, #28]	; (800ce1c <pbuf_alloc+0x1d4>)
 800ce00:	f240 1227 	movw	r2, #295	; 0x127
 800ce04:	490a      	ldr	r1, [pc, #40]	; (800ce30 <pbuf_alloc+0x1e8>)
 800ce06:	4807      	ldr	r0, [pc, #28]	; (800ce24 <pbuf_alloc+0x1dc>)
 800ce08:	f009 fbb4 	bl	8016574 <iprintf>
      return NULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e001      	b.n	800ce14 <pbuf_alloc+0x1cc>
      break;
 800ce10:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3728      	adds	r7, #40	; 0x28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	08017cb8 	.word	0x08017cb8
 800ce20:	08017ce8 	.word	0x08017ce8
 800ce24:	08017d18 	.word	0x08017d18
 800ce28:	08017d40 	.word	0x08017d40
 800ce2c:	08017d74 	.word	0x08017d74
 800ce30:	08017da0 	.word	0x08017da0

0800ce34 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	807b      	strh	r3, [r7, #2]
 800ce40:	4613      	mov	r3, r2
 800ce42:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ce44:	883b      	ldrh	r3, [r7, #0]
 800ce46:	2b41      	cmp	r3, #65	; 0x41
 800ce48:	d009      	beq.n	800ce5e <pbuf_alloc_reference+0x2a>
 800ce4a:	883b      	ldrh	r3, [r7, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d006      	beq.n	800ce5e <pbuf_alloc_reference+0x2a>
 800ce50:	4b0f      	ldr	r3, [pc, #60]	; (800ce90 <pbuf_alloc_reference+0x5c>)
 800ce52:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ce56:	490f      	ldr	r1, [pc, #60]	; (800ce94 <pbuf_alloc_reference+0x60>)
 800ce58:	480f      	ldr	r0, [pc, #60]	; (800ce98 <pbuf_alloc_reference+0x64>)
 800ce5a:	f009 fb8b 	bl	8016574 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce5e:	2007      	movs	r0, #7
 800ce60:	f7ff faf0 	bl	800c444 <memp_malloc>
 800ce64:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	e00b      	b.n	800ce88 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ce70:	8879      	ldrh	r1, [r7, #2]
 800ce72:	887a      	ldrh	r2, [r7, #2]
 800ce74:	2300      	movs	r3, #0
 800ce76:	9301      	str	r3, [sp, #4]
 800ce78:	883b      	ldrh	r3, [r7, #0]
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	6879      	ldr	r1, [r7, #4]
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f7ff feb7 	bl	800cbf4 <pbuf_init_alloced_pbuf>
  return p;
 800ce86:	68fb      	ldr	r3, [r7, #12]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	08017cb8 	.word	0x08017cb8
 800ce94:	08017dbc 	.word	0x08017dbc
 800ce98:	08017d18 	.word	0x08017d18

0800ce9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	607b      	str	r3, [r7, #4]
 800cea4:	4603      	mov	r3, r0
 800cea6:	73fb      	strb	r3, [r7, #15]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	81bb      	strh	r3, [r7, #12]
 800ceac:	4613      	mov	r3, r2
 800ceae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ceb4:	8a7b      	ldrh	r3, [r7, #18]
 800ceb6:	3303      	adds	r3, #3
 800ceb8:	f023 0203 	bic.w	r2, r3, #3
 800cebc:	89bb      	ldrh	r3, [r7, #12]
 800cebe:	441a      	add	r2, r3
 800cec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d901      	bls.n	800ceca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e018      	b.n	800cefc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d007      	beq.n	800cee0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ced0:	8a7b      	ldrh	r3, [r7, #18]
 800ced2:	3303      	adds	r3, #3
 800ced4:	f023 0303 	bic.w	r3, r3, #3
 800ced8:	6a3a      	ldr	r2, [r7, #32]
 800ceda:	4413      	add	r3, r2
 800cedc:	617b      	str	r3, [r7, #20]
 800cede:	e001      	b.n	800cee4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	89b9      	ldrh	r1, [r7, #12]
 800cee8:	89ba      	ldrh	r2, [r7, #12]
 800ceea:	2302      	movs	r3, #2
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	897b      	ldrh	r3, [r7, #10]
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	460b      	mov	r3, r1
 800cef4:	6979      	ldr	r1, [r7, #20]
 800cef6:	f7ff fe7d 	bl	800cbf4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cefa:	687b      	ldr	r3, [r7, #4]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d106      	bne.n	800cf24 <pbuf_realloc+0x20>
 800cf16:	4b3a      	ldr	r3, [pc, #232]	; (800d000 <pbuf_realloc+0xfc>)
 800cf18:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf1c:	4939      	ldr	r1, [pc, #228]	; (800d004 <pbuf_realloc+0x100>)
 800cf1e:	483a      	ldr	r0, [pc, #232]	; (800d008 <pbuf_realloc+0x104>)
 800cf20:	f009 fb28 	bl	8016574 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	891b      	ldrh	r3, [r3, #8]
 800cf28:	887a      	ldrh	r2, [r7, #2]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d263      	bcs.n	800cff6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	891a      	ldrh	r2, [r3, #8]
 800cf32:	887b      	ldrh	r3, [r7, #2]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cf38:	887b      	ldrh	r3, [r7, #2]
 800cf3a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cf40:	e018      	b.n	800cf74 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	895b      	ldrh	r3, [r3, #10]
 800cf46:	897a      	ldrh	r2, [r7, #10]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	891a      	ldrh	r2, [r3, #8]
 800cf50:	893b      	ldrh	r3, [r7, #8]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d106      	bne.n	800cf74 <pbuf_realloc+0x70>
 800cf66:	4b26      	ldr	r3, [pc, #152]	; (800d000 <pbuf_realloc+0xfc>)
 800cf68:	f240 12af 	movw	r2, #431	; 0x1af
 800cf6c:	4927      	ldr	r1, [pc, #156]	; (800d00c <pbuf_realloc+0x108>)
 800cf6e:	4826      	ldr	r0, [pc, #152]	; (800d008 <pbuf_realloc+0x104>)
 800cf70:	f009 fb00 	bl	8016574 <iprintf>
  while (rem_len > q->len) {
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	895b      	ldrh	r3, [r3, #10]
 800cf78:	897a      	ldrh	r2, [r7, #10]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d8e1      	bhi.n	800cf42 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7b1b      	ldrb	r3, [r3, #12]
 800cf82:	f003 030f 	and.w	r3, r3, #15
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d121      	bne.n	800cfce <pbuf_realloc+0xca>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	895b      	ldrh	r3, [r3, #10]
 800cf8e:	897a      	ldrh	r2, [r7, #10]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d01c      	beq.n	800cfce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	7b5b      	ldrb	r3, [r3, #13]
 800cf98:	f003 0302 	and.w	r3, r3, #2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d116      	bne.n	800cfce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	897b      	ldrh	r3, [r7, #10]
 800cfac:	4413      	add	r3, r2
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f7fe ffba 	bl	800bf2c <mem_trim>
 800cfb8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <pbuf_realloc+0xca>
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <pbuf_realloc+0xfc>)
 800cfc2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cfc6:	4912      	ldr	r1, [pc, #72]	; (800d010 <pbuf_realloc+0x10c>)
 800cfc8:	480f      	ldr	r0, [pc, #60]	; (800d008 <pbuf_realloc+0x104>)
 800cfca:	f009 fad3 	bl	8016574 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	897a      	ldrh	r2, [r7, #10]
 800cfd2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	895a      	ldrh	r2, [r3, #10]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 f911 	bl	800d210 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	e000      	b.n	800cff8 <pbuf_realloc+0xf4>
    return;
 800cff6:	bf00      	nop

}
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	08017cb8 	.word	0x08017cb8
 800d004:	08017dd0 	.word	0x08017dd0
 800d008:	08017d18 	.word	0x08017d18
 800d00c:	08017de8 	.word	0x08017de8
 800d010:	08017e00 	.word	0x08017e00

0800d014 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	4613      	mov	r3, r2
 800d020:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d106      	bne.n	800d036 <pbuf_add_header_impl+0x22>
 800d028:	4b2b      	ldr	r3, [pc, #172]	; (800d0d8 <pbuf_add_header_impl+0xc4>)
 800d02a:	f240 12df 	movw	r2, #479	; 0x1df
 800d02e:	492b      	ldr	r1, [pc, #172]	; (800d0dc <pbuf_add_header_impl+0xc8>)
 800d030:	482b      	ldr	r0, [pc, #172]	; (800d0e0 <pbuf_add_header_impl+0xcc>)
 800d032:	f009 fa9f 	bl	8016574 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d003      	beq.n	800d044 <pbuf_add_header_impl+0x30>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d042:	d301      	bcc.n	800d048 <pbuf_add_header_impl+0x34>
    return 1;
 800d044:	2301      	movs	r3, #1
 800d046:	e043      	b.n	800d0d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <pbuf_add_header_impl+0x3e>
    return 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	e03e      	b.n	800d0d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	891a      	ldrh	r2, [r3, #8]
 800d05a:	8a7b      	ldrh	r3, [r7, #18]
 800d05c:	4413      	add	r3, r2
 800d05e:	b29b      	uxth	r3, r3
 800d060:	8a7a      	ldrh	r2, [r7, #18]
 800d062:	429a      	cmp	r2, r3
 800d064:	d901      	bls.n	800d06a <pbuf_add_header_impl+0x56>
    return 1;
 800d066:	2301      	movs	r3, #1
 800d068:	e032      	b.n	800d0d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	7b1b      	ldrb	r3, [r3, #12]
 800d06e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d070:	8a3b      	ldrh	r3, [r7, #16]
 800d072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00c      	beq.n	800d094 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	685a      	ldr	r2, [r3, #4]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	425b      	negs	r3, r3
 800d082:	4413      	add	r3, r2
 800d084:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3310      	adds	r3, #16
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d20d      	bcs.n	800d0ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d090:	2301      	movs	r3, #1
 800d092:	e01d      	b.n	800d0d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d094:	79fb      	ldrb	r3, [r7, #7]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d006      	beq.n	800d0a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	425b      	negs	r3, r3
 800d0a2:	4413      	add	r3, r2
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	e001      	b.n	800d0ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e011      	b.n	800d0d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	895a      	ldrh	r2, [r3, #10]
 800d0b6:	8a7b      	ldrh	r3, [r7, #18]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	891a      	ldrh	r2, [r3, #8]
 800d0c4:	8a7b      	ldrh	r3, [r7, #18]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	811a      	strh	r2, [r3, #8]


  return 0;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	08017cb8 	.word	0x08017cb8
 800d0dc:	08017e1c 	.word	0x08017e1c
 800d0e0:	08017d18 	.word	0x08017d18

0800d0e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff ff8e 	bl	800d014 <pbuf_add_header_impl>
 800d0f8:	4603      	mov	r3, r0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d106      	bne.n	800d122 <pbuf_remove_header+0x1e>
 800d114:	4b20      	ldr	r3, [pc, #128]	; (800d198 <pbuf_remove_header+0x94>)
 800d116:	f240 224b 	movw	r2, #587	; 0x24b
 800d11a:	4920      	ldr	r1, [pc, #128]	; (800d19c <pbuf_remove_header+0x98>)
 800d11c:	4820      	ldr	r0, [pc, #128]	; (800d1a0 <pbuf_remove_header+0x9c>)
 800d11e:	f009 fa29 	bl	8016574 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d003      	beq.n	800d130 <pbuf_remove_header+0x2c>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d12e:	d301      	bcc.n	800d134 <pbuf_remove_header+0x30>
    return 1;
 800d130:	2301      	movs	r3, #1
 800d132:	e02c      	b.n	800d18e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <pbuf_remove_header+0x3a>
    return 0;
 800d13a:	2300      	movs	r3, #0
 800d13c:	e027      	b.n	800d18e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	895b      	ldrh	r3, [r3, #10]
 800d146:	89fa      	ldrh	r2, [r7, #14]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d908      	bls.n	800d15e <pbuf_remove_header+0x5a>
 800d14c:	4b12      	ldr	r3, [pc, #72]	; (800d198 <pbuf_remove_header+0x94>)
 800d14e:	f240 2255 	movw	r2, #597	; 0x255
 800d152:	4914      	ldr	r1, [pc, #80]	; (800d1a4 <pbuf_remove_header+0xa0>)
 800d154:	4812      	ldr	r0, [pc, #72]	; (800d1a0 <pbuf_remove_header+0x9c>)
 800d156:	f009 fa0d 	bl	8016574 <iprintf>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e017      	b.n	800d18e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685a      	ldr	r2, [r3, #4]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	441a      	add	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	895a      	ldrh	r2, [r3, #10]
 800d174:	89fb      	ldrh	r3, [r7, #14]
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	b29a      	uxth	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	891a      	ldrh	r2, [r3, #8]
 800d182:	89fb      	ldrh	r3, [r7, #14]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	b29a      	uxth	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	08017cb8 	.word	0x08017cb8
 800d19c:	08017e1c 	.word	0x08017e1c
 800d1a0:	08017d18 	.word	0x08017d18
 800d1a4:	08017e28 	.word	0x08017e28

0800d1a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	807b      	strh	r3, [r7, #2]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d1b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	da08      	bge.n	800d1d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d1c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff ff9b 	bl	800d104 <pbuf_remove_header>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	e007      	b.n	800d1e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d1d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1d6:	787a      	ldrb	r2, [r7, #1]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff ff1a 	bl	800d014 <pbuf_add_header_impl>
 800d1e0:	4603      	mov	r3, r0
  }
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b082      	sub	sp, #8
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d1f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff ffd2 	bl	800d1a8 <pbuf_header_impl>
 800d204:	4603      	mov	r3, r0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
	...

0800d210 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d106      	bne.n	800d232 <pbuf_free+0x22>
 800d224:	4b38      	ldr	r3, [pc, #224]	; (800d308 <pbuf_free+0xf8>)
 800d226:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d22a:	4938      	ldr	r1, [pc, #224]	; (800d30c <pbuf_free+0xfc>)
 800d22c:	4838      	ldr	r0, [pc, #224]	; (800d310 <pbuf_free+0x100>)
 800d22e:	f009 f9a1 	bl	8016574 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d232:	2300      	movs	r3, #0
 800d234:	e063      	b.n	800d2fe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d23a:	e05c      	b.n	800d2f6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	7b9b      	ldrb	r3, [r3, #14]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <pbuf_free+0x42>
 800d244:	4b30      	ldr	r3, [pc, #192]	; (800d308 <pbuf_free+0xf8>)
 800d246:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d24a:	4932      	ldr	r1, [pc, #200]	; (800d314 <pbuf_free+0x104>)
 800d24c:	4830      	ldr	r0, [pc, #192]	; (800d310 <pbuf_free+0x100>)
 800d24e:	f009 f991 	bl	8016574 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	7b9b      	ldrb	r3, [r3, #14]
 800d256:	3b01      	subs	r3, #1
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	739a      	strb	r2, [r3, #14]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7b9b      	ldrb	r3, [r3, #14]
 800d262:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d264:	7dbb      	ldrb	r3, [r7, #22]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d143      	bne.n	800d2f2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7b1b      	ldrb	r3, [r3, #12]
 800d274:	f003 030f 	and.w	r3, r3, #15
 800d278:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	7b5b      	ldrb	r3, [r3, #13]
 800d27e:	f003 0302 	and.w	r3, r3, #2
 800d282:	2b00      	cmp	r3, #0
 800d284:	d011      	beq.n	800d2aa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <pbuf_free+0x90>
 800d292:	4b1d      	ldr	r3, [pc, #116]	; (800d308 <pbuf_free+0xf8>)
 800d294:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d298:	491f      	ldr	r1, [pc, #124]	; (800d318 <pbuf_free+0x108>)
 800d29a:	481d      	ldr	r0, [pc, #116]	; (800d310 <pbuf_free+0x100>)
 800d29c:	f009 f96a 	bl	8016574 <iprintf>
        pc->custom_free_function(p);
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	4798      	blx	r3
 800d2a8:	e01d      	b.n	800d2e6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d104      	bne.n	800d2ba <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d2b0:	6879      	ldr	r1, [r7, #4]
 800d2b2:	2008      	movs	r0, #8
 800d2b4:	f7ff f936 	bl	800c524 <memp_free>
 800d2b8:	e015      	b.n	800d2e6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d104      	bne.n	800d2ca <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	2007      	movs	r0, #7
 800d2c4:	f7ff f92e 	bl	800c524 <memp_free>
 800d2c8:	e00d      	b.n	800d2e6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d103      	bne.n	800d2d8 <pbuf_free+0xc8>
          mem_free(p);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fe fdc1 	bl	800be58 <mem_free>
 800d2d6:	e006      	b.n	800d2e6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d2d8:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <pbuf_free+0xf8>)
 800d2da:	f240 320f 	movw	r2, #783	; 0x30f
 800d2de:	490f      	ldr	r1, [pc, #60]	; (800d31c <pbuf_free+0x10c>)
 800d2e0:	480b      	ldr	r0, [pc, #44]	; (800d310 <pbuf_free+0x100>)
 800d2e2:	f009 f947 	bl	8016574 <iprintf>
        }
      }
      count++;
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	e001      	b.n	800d2f6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d19f      	bne.n	800d23c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	08017cb8 	.word	0x08017cb8
 800d30c:	08017e1c 	.word	0x08017e1c
 800d310:	08017d18 	.word	0x08017d18
 800d314:	08017e48 	.word	0x08017e48
 800d318:	08017e60 	.word	0x08017e60
 800d31c:	08017e84 	.word	0x08017e84

0800d320 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d32c:	e005      	b.n	800d33a <pbuf_clen+0x1a>
    ++len;
 800d32e:	89fb      	ldrh	r3, [r7, #14]
 800d330:	3301      	adds	r3, #1
 800d332:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1f6      	bne.n	800d32e <pbuf_clen+0xe>
  }
  return len;
 800d340:	89fb      	ldrh	r3, [r7, #14]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3714      	adds	r7, #20
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
	...

0800d350 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d010      	beq.n	800d380 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	7b9b      	ldrb	r3, [r3, #14]
 800d362:	3301      	adds	r3, #1
 800d364:	b2da      	uxtb	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7b9b      	ldrb	r3, [r3, #14]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <pbuf_ref+0x30>
 800d372:	4b05      	ldr	r3, [pc, #20]	; (800d388 <pbuf_ref+0x38>)
 800d374:	f240 3242 	movw	r2, #834	; 0x342
 800d378:	4904      	ldr	r1, [pc, #16]	; (800d38c <pbuf_ref+0x3c>)
 800d37a:	4805      	ldr	r0, [pc, #20]	; (800d390 <pbuf_ref+0x40>)
 800d37c:	f009 f8fa 	bl	8016574 <iprintf>
  }
}
 800d380:	bf00      	nop
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	08017cb8 	.word	0x08017cb8
 800d38c:	08017e98 	.word	0x08017e98
 800d390:	08017d18 	.word	0x08017d18

0800d394 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d002      	beq.n	800d3aa <pbuf_cat+0x16>
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d107      	bne.n	800d3ba <pbuf_cat+0x26>
 800d3aa:	4b20      	ldr	r3, [pc, #128]	; (800d42c <pbuf_cat+0x98>)
 800d3ac:	f240 3259 	movw	r2, #857	; 0x359
 800d3b0:	491f      	ldr	r1, [pc, #124]	; (800d430 <pbuf_cat+0x9c>)
 800d3b2:	4820      	ldr	r0, [pc, #128]	; (800d434 <pbuf_cat+0xa0>)
 800d3b4:	f009 f8de 	bl	8016574 <iprintf>
 800d3b8:	e034      	b.n	800d424 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e00a      	b.n	800d3d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	891a      	ldrh	r2, [r3, #8]
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	891b      	ldrh	r3, [r3, #8]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1f0      	bne.n	800d3c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	891a      	ldrh	r2, [r3, #8]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	895b      	ldrh	r3, [r3, #10]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d006      	beq.n	800d3f8 <pbuf_cat+0x64>
 800d3ea:	4b10      	ldr	r3, [pc, #64]	; (800d42c <pbuf_cat+0x98>)
 800d3ec:	f240 3262 	movw	r2, #866	; 0x362
 800d3f0:	4911      	ldr	r1, [pc, #68]	; (800d438 <pbuf_cat+0xa4>)
 800d3f2:	4810      	ldr	r0, [pc, #64]	; (800d434 <pbuf_cat+0xa0>)
 800d3f4:	f009 f8be 	bl	8016574 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d006      	beq.n	800d40e <pbuf_cat+0x7a>
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <pbuf_cat+0x98>)
 800d402:	f240 3263 	movw	r2, #867	; 0x363
 800d406:	490d      	ldr	r1, [pc, #52]	; (800d43c <pbuf_cat+0xa8>)
 800d408:	480a      	ldr	r0, [pc, #40]	; (800d434 <pbuf_cat+0xa0>)
 800d40a:	f009 f8b3 	bl	8016574 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	891a      	ldrh	r2, [r3, #8]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	891b      	ldrh	r3, [r3, #8]
 800d416:	4413      	add	r3, r2
 800d418:	b29a      	uxth	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	08017cb8 	.word	0x08017cb8
 800d430:	08017eac 	.word	0x08017eac
 800d434:	08017d18 	.word	0x08017d18
 800d438:	08017ee4 	.word	0x08017ee4
 800d43c:	08017f14 	.word	0x08017f14

0800d440 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff ffa1 	bl	800d394 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d452:	6838      	ldr	r0, [r7, #0]
 800d454:	f7ff ff7c 	bl	800d350 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d46a:	2300      	movs	r3, #0
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	2300      	movs	r3, #0
 800d470:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d008      	beq.n	800d48a <pbuf_copy+0x2a>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <pbuf_copy+0x2a>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	891a      	ldrh	r2, [r3, #8]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	891b      	ldrh	r3, [r3, #8]
 800d486:	429a      	cmp	r2, r3
 800d488:	d209      	bcs.n	800d49e <pbuf_copy+0x3e>
 800d48a:	4b57      	ldr	r3, [pc, #348]	; (800d5e8 <pbuf_copy+0x188>)
 800d48c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d490:	4956      	ldr	r1, [pc, #344]	; (800d5ec <pbuf_copy+0x18c>)
 800d492:	4857      	ldr	r0, [pc, #348]	; (800d5f0 <pbuf_copy+0x190>)
 800d494:	f009 f86e 	bl	8016574 <iprintf>
 800d498:	f06f 030f 	mvn.w	r3, #15
 800d49c:	e09f      	b.n	800d5de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	895b      	ldrh	r3, [r3, #10]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	1ad2      	subs	r2, r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	895b      	ldrh	r3, [r3, #10]
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	1acb      	subs	r3, r1, r3
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d306      	bcc.n	800d4c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	895b      	ldrh	r3, [r3, #10]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	1ad3      	subs	r3, r2, r3
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	e005      	b.n	800d4d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	895b      	ldrh	r3, [r3, #10]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	18d0      	adds	r0, r2, r3
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	4413      	add	r3, r2
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	f009 f830 	bl	8016548 <memcpy>
    offset_to += len;
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	895b      	ldrh	r3, [r3, #10]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	4293      	cmp	r3, r2
 800d502:	d906      	bls.n	800d512 <pbuf_copy+0xb2>
 800d504:	4b38      	ldr	r3, [pc, #224]	; (800d5e8 <pbuf_copy+0x188>)
 800d506:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d50a:	493a      	ldr	r1, [pc, #232]	; (800d5f4 <pbuf_copy+0x194>)
 800d50c:	4838      	ldr	r0, [pc, #224]	; (800d5f0 <pbuf_copy+0x190>)
 800d50e:	f009 f831 	bl	8016574 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	895b      	ldrh	r3, [r3, #10]
 800d516:	461a      	mov	r2, r3
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d906      	bls.n	800d52c <pbuf_copy+0xcc>
 800d51e:	4b32      	ldr	r3, [pc, #200]	; (800d5e8 <pbuf_copy+0x188>)
 800d520:	f240 32da 	movw	r2, #986	; 0x3da
 800d524:	4934      	ldr	r1, [pc, #208]	; (800d5f8 <pbuf_copy+0x198>)
 800d526:	4832      	ldr	r0, [pc, #200]	; (800d5f0 <pbuf_copy+0x190>)
 800d528:	f009 f824 	bl	8016574 <iprintf>
    if (offset_from >= p_from->len) {
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	895b      	ldrh	r3, [r3, #10]
 800d530:	461a      	mov	r2, r3
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	4293      	cmp	r3, r2
 800d536:	d304      	bcc.n	800d542 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	895b      	ldrh	r3, [r3, #10]
 800d546:	461a      	mov	r2, r3
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d114      	bne.n	800d578 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10c      	bne.n	800d578 <pbuf_copy+0x118>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d009      	beq.n	800d578 <pbuf_copy+0x118>
 800d564:	4b20      	ldr	r3, [pc, #128]	; (800d5e8 <pbuf_copy+0x188>)
 800d566:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d56a:	4924      	ldr	r1, [pc, #144]	; (800d5fc <pbuf_copy+0x19c>)
 800d56c:	4820      	ldr	r0, [pc, #128]	; (800d5f0 <pbuf_copy+0x190>)
 800d56e:	f009 f801 	bl	8016574 <iprintf>
 800d572:	f06f 030f 	mvn.w	r3, #15
 800d576:	e032      	b.n	800d5de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d013      	beq.n	800d5a6 <pbuf_copy+0x146>
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	895a      	ldrh	r2, [r3, #10]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	891b      	ldrh	r3, [r3, #8]
 800d586:	429a      	cmp	r2, r3
 800d588:	d10d      	bne.n	800d5a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d009      	beq.n	800d5a6 <pbuf_copy+0x146>
 800d592:	4b15      	ldr	r3, [pc, #84]	; (800d5e8 <pbuf_copy+0x188>)
 800d594:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d598:	4919      	ldr	r1, [pc, #100]	; (800d600 <pbuf_copy+0x1a0>)
 800d59a:	4815      	ldr	r0, [pc, #84]	; (800d5f0 <pbuf_copy+0x190>)
 800d59c:	f008 ffea 	bl	8016574 <iprintf>
 800d5a0:	f06f 0305 	mvn.w	r3, #5
 800d5a4:	e01b      	b.n	800d5de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d013      	beq.n	800d5d4 <pbuf_copy+0x174>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	895a      	ldrh	r2, [r3, #10]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d10d      	bne.n	800d5d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d009      	beq.n	800d5d4 <pbuf_copy+0x174>
 800d5c0:	4b09      	ldr	r3, [pc, #36]	; (800d5e8 <pbuf_copy+0x188>)
 800d5c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d5c6:	490e      	ldr	r1, [pc, #56]	; (800d600 <pbuf_copy+0x1a0>)
 800d5c8:	4809      	ldr	r0, [pc, #36]	; (800d5f0 <pbuf_copy+0x190>)
 800d5ca:	f008 ffd3 	bl	8016574 <iprintf>
 800d5ce:	f06f 0305 	mvn.w	r3, #5
 800d5d2:	e004      	b.n	800d5de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f47f af61 	bne.w	800d49e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3718      	adds	r7, #24
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	08017cb8 	.word	0x08017cb8
 800d5ec:	08017f60 	.word	0x08017f60
 800d5f0:	08017d18 	.word	0x08017d18
 800d5f4:	08017f90 	.word	0x08017f90
 800d5f8:	08017fa8 	.word	0x08017fa8
 800d5fc:	08017fc4 	.word	0x08017fc4
 800d600:	08017fd4 	.word	0x08017fd4

0800d604 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4611      	mov	r1, r2
 800d610:	461a      	mov	r2, r3
 800d612:	460b      	mov	r3, r1
 800d614:	80fb      	strh	r3, [r7, #6]
 800d616:	4613      	mov	r3, r2
 800d618:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d108      	bne.n	800d63a <pbuf_copy_partial+0x36>
 800d628:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <pbuf_copy_partial+0xd4>)
 800d62a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d62e:	492b      	ldr	r1, [pc, #172]	; (800d6dc <pbuf_copy_partial+0xd8>)
 800d630:	482b      	ldr	r0, [pc, #172]	; (800d6e0 <pbuf_copy_partial+0xdc>)
 800d632:	f008 ff9f 	bl	8016574 <iprintf>
 800d636:	2300      	movs	r3, #0
 800d638:	e04a      	b.n	800d6d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d108      	bne.n	800d652 <pbuf_copy_partial+0x4e>
 800d640:	4b25      	ldr	r3, [pc, #148]	; (800d6d8 <pbuf_copy_partial+0xd4>)
 800d642:	f240 420b 	movw	r2, #1035	; 0x40b
 800d646:	4927      	ldr	r1, [pc, #156]	; (800d6e4 <pbuf_copy_partial+0xe0>)
 800d648:	4825      	ldr	r0, [pc, #148]	; (800d6e0 <pbuf_copy_partial+0xdc>)
 800d64a:	f008 ff93 	bl	8016574 <iprintf>
 800d64e:	2300      	movs	r3, #0
 800d650:	e03e      	b.n	800d6d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	61fb      	str	r3, [r7, #28]
 800d656:	e034      	b.n	800d6c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d658:	88bb      	ldrh	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <pbuf_copy_partial+0x70>
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	895b      	ldrh	r3, [r3, #10]
 800d662:	88ba      	ldrh	r2, [r7, #4]
 800d664:	429a      	cmp	r2, r3
 800d666:	d305      	bcc.n	800d674 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	895b      	ldrh	r3, [r3, #10]
 800d66c:	88ba      	ldrh	r2, [r7, #4]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	80bb      	strh	r3, [r7, #4]
 800d672:	e023      	b.n	800d6bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	895a      	ldrh	r2, [r3, #10]
 800d678:	88bb      	ldrh	r3, [r7, #4]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d67e:	8b3a      	ldrh	r2, [r7, #24]
 800d680:	88fb      	ldrh	r3, [r7, #6]
 800d682:	429a      	cmp	r2, r3
 800d684:	d901      	bls.n	800d68a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d686:	88fb      	ldrh	r3, [r7, #6]
 800d688:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d68a:	8b7b      	ldrh	r3, [r7, #26]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	18d0      	adds	r0, r2, r3
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	88bb      	ldrh	r3, [r7, #4]
 800d696:	4413      	add	r3, r2
 800d698:	8b3a      	ldrh	r2, [r7, #24]
 800d69a:	4619      	mov	r1, r3
 800d69c:	f008 ff54 	bl	8016548 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d6a0:	8afa      	ldrh	r2, [r7, #22]
 800d6a2:	8b3b      	ldrh	r3, [r7, #24]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d6a8:	8b7a      	ldrh	r2, [r7, #26]
 800d6aa:	8b3b      	ldrh	r3, [r7, #24]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d6b0:	88fa      	ldrh	r2, [r7, #6]
 800d6b2:	8b3b      	ldrh	r3, [r7, #24]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	61fb      	str	r3, [r7, #28]
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <pbuf_copy_partial+0xca>
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1c4      	bne.n	800d658 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d6ce:	8afb      	ldrh	r3, [r7, #22]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3720      	adds	r7, #32
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	08017cb8 	.word	0x08017cb8
 800d6dc:	08018000 	.word	0x08018000
 800d6e0:	08017d18 	.word	0x08017d18
 800d6e4:	08018020 	.word	0x08018020

0800d6e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	603a      	str	r2, [r7, #0]
 800d6f2:	71fb      	strb	r3, [r7, #7]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	8919      	ldrh	r1, [r3, #8]
 800d6fc:	88ba      	ldrh	r2, [r7, #4]
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	4618      	mov	r0, r3
 800d702:	f7ff faa1 	bl	800cc48 <pbuf_alloc>
 800d706:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <pbuf_clone+0x2a>
    return NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	e011      	b.n	800d736 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f7ff fea3 	bl	800d460 <pbuf_copy>
 800d71a:	4603      	mov	r3, r0
 800d71c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d71e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d006      	beq.n	800d734 <pbuf_clone+0x4c>
 800d726:	4b06      	ldr	r3, [pc, #24]	; (800d740 <pbuf_clone+0x58>)
 800d728:	f240 5224 	movw	r2, #1316	; 0x524
 800d72c:	4905      	ldr	r1, [pc, #20]	; (800d744 <pbuf_clone+0x5c>)
 800d72e:	4806      	ldr	r0, [pc, #24]	; (800d748 <pbuf_clone+0x60>)
 800d730:	f008 ff20 	bl	8016574 <iprintf>
  return q;
 800d734:	68fb      	ldr	r3, [r7, #12]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	08017cb8 	.word	0x08017cb8
 800d744:	0801812c 	.word	0x0801812c
 800d748:	08017d18 	.word	0x08017d18

0800d74c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d750:	f008 ff28 	bl	80165a4 <rand>
 800d754:	4603      	mov	r3, r0
 800d756:	b29b      	uxth	r3, r3
 800d758:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d762:	b29a      	uxth	r2, r3
 800d764:	4b01      	ldr	r3, [pc, #4]	; (800d76c <tcp_init+0x20>)
 800d766:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d768:	bf00      	nop
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	2400002c 	.word	0x2400002c

0800d770 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	7d1b      	ldrb	r3, [r3, #20]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d105      	bne.n	800d78c <tcp_free+0x1c>
 800d780:	4b06      	ldr	r3, [pc, #24]	; (800d79c <tcp_free+0x2c>)
 800d782:	22d4      	movs	r2, #212	; 0xd4
 800d784:	4906      	ldr	r1, [pc, #24]	; (800d7a0 <tcp_free+0x30>)
 800d786:	4807      	ldr	r0, [pc, #28]	; (800d7a4 <tcp_free+0x34>)
 800d788:	f008 fef4 	bl	8016574 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	2001      	movs	r0, #1
 800d790:	f7fe fec8 	bl	800c524 <memp_free>
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	080181b8 	.word	0x080181b8
 800d7a0:	080181e8 	.word	0x080181e8
 800d7a4:	080181fc 	.word	0x080181fc

0800d7a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d105      	bne.n	800d7c4 <tcp_free_listen+0x1c>
 800d7b8:	4b06      	ldr	r3, [pc, #24]	; (800d7d4 <tcp_free_listen+0x2c>)
 800d7ba:	22df      	movs	r2, #223	; 0xdf
 800d7bc:	4906      	ldr	r1, [pc, #24]	; (800d7d8 <tcp_free_listen+0x30>)
 800d7be:	4807      	ldr	r0, [pc, #28]	; (800d7dc <tcp_free_listen+0x34>)
 800d7c0:	f008 fed8 	bl	8016574 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d7c4:	6879      	ldr	r1, [r7, #4]
 800d7c6:	2002      	movs	r0, #2
 800d7c8:	f7fe feac 	bl	800c524 <memp_free>
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	080181b8 	.word	0x080181b8
 800d7d8:	08018224 	.word	0x08018224
 800d7dc:	080181fc 	.word	0x080181fc

0800d7e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d7e4:	f001 f85c 	bl	800e8a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d7e8:	4b07      	ldr	r3, [pc, #28]	; (800d808 <tcp_tmr+0x28>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	4b05      	ldr	r3, [pc, #20]	; (800d808 <tcp_tmr+0x28>)
 800d7f2:	701a      	strb	r2, [r3, #0]
 800d7f4:	4b04      	ldr	r3, [pc, #16]	; (800d808 <tcp_tmr+0x28>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f003 0301 	and.w	r3, r3, #1
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d800:	f000 fd0e 	bl	800e220 <tcp_slowtmr>
  }
}
 800d804:	bf00      	nop
 800d806:	bd80      	pop	{r7, pc}
 800d808:	240000f1 	.word	0x240000f1

0800d80c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d105      	bne.n	800d828 <tcp_remove_listener+0x1c>
 800d81c:	4b0d      	ldr	r3, [pc, #52]	; (800d854 <tcp_remove_listener+0x48>)
 800d81e:	22ff      	movs	r2, #255	; 0xff
 800d820:	490d      	ldr	r1, [pc, #52]	; (800d858 <tcp_remove_listener+0x4c>)
 800d822:	480e      	ldr	r0, [pc, #56]	; (800d85c <tcp_remove_listener+0x50>)
 800d824:	f008 fea6 	bl	8016574 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e00a      	b.n	800d844 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	d102      	bne.n	800d83e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1f1      	bne.n	800d82e <tcp_remove_listener+0x22>
    }
  }
}
 800d84a:	bf00      	nop
 800d84c:	bf00      	nop
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	080181b8 	.word	0x080181b8
 800d858:	08018240 	.word	0x08018240
 800d85c:	080181fc 	.word	0x080181fc

0800d860 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <tcp_listen_closed+0x1c>
 800d86e:	4b14      	ldr	r3, [pc, #80]	; (800d8c0 <tcp_listen_closed+0x60>)
 800d870:	f240 1211 	movw	r2, #273	; 0x111
 800d874:	4913      	ldr	r1, [pc, #76]	; (800d8c4 <tcp_listen_closed+0x64>)
 800d876:	4814      	ldr	r0, [pc, #80]	; (800d8c8 <tcp_listen_closed+0x68>)
 800d878:	f008 fe7c 	bl	8016574 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	7d1b      	ldrb	r3, [r3, #20]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d006      	beq.n	800d892 <tcp_listen_closed+0x32>
 800d884:	4b0e      	ldr	r3, [pc, #56]	; (800d8c0 <tcp_listen_closed+0x60>)
 800d886:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d88a:	4910      	ldr	r1, [pc, #64]	; (800d8cc <tcp_listen_closed+0x6c>)
 800d88c:	480e      	ldr	r0, [pc, #56]	; (800d8c8 <tcp_listen_closed+0x68>)
 800d88e:	f008 fe71 	bl	8016574 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d892:	2301      	movs	r3, #1
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	e00b      	b.n	800d8b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d898:	4a0d      	ldr	r2, [pc, #52]	; (800d8d0 <tcp_listen_closed+0x70>)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6879      	ldr	r1, [r7, #4]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff ffb1 	bl	800d80c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2b03      	cmp	r3, #3
 800d8b4:	d9f0      	bls.n	800d898 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	080181b8 	.word	0x080181b8
 800d8c4:	08018268 	.word	0x08018268
 800d8c8:	080181fc 	.word	0x080181fc
 800d8cc:	08018274 	.word	0x08018274
 800d8d0:	0801af98 	.word	0x0801af98

0800d8d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d8d4:	b5b0      	push	{r4, r5, r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af04      	add	r7, sp, #16
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <tcp_close_shutdown+0x20>
 800d8e6:	4b63      	ldr	r3, [pc, #396]	; (800da74 <tcp_close_shutdown+0x1a0>)
 800d8e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d8ec:	4962      	ldr	r1, [pc, #392]	; (800da78 <tcp_close_shutdown+0x1a4>)
 800d8ee:	4863      	ldr	r0, [pc, #396]	; (800da7c <tcp_close_shutdown+0x1a8>)
 800d8f0:	f008 fe40 	bl	8016574 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d066      	beq.n	800d9c8 <tcp_close_shutdown+0xf4>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7d1b      	ldrb	r3, [r3, #20]
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	d003      	beq.n	800d90a <tcp_close_shutdown+0x36>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	7d1b      	ldrb	r3, [r3, #20]
 800d906:	2b07      	cmp	r3, #7
 800d908:	d15e      	bne.n	800d9c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d104      	bne.n	800d91c <tcp_close_shutdown+0x48>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d916:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d91a:	d055      	beq.n	800d9c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	8b5b      	ldrh	r3, [r3, #26]
 800d920:	f003 0310 	and.w	r3, r3, #16
 800d924:	2b00      	cmp	r3, #0
 800d926:	d106      	bne.n	800d936 <tcp_close_shutdown+0x62>
 800d928:	4b52      	ldr	r3, [pc, #328]	; (800da74 <tcp_close_shutdown+0x1a0>)
 800d92a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d92e:	4954      	ldr	r1, [pc, #336]	; (800da80 <tcp_close_shutdown+0x1ac>)
 800d930:	4852      	ldr	r0, [pc, #328]	; (800da7c <tcp_close_shutdown+0x1a8>)
 800d932:	f008 fe1f 	bl	8016574 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d93e:	687d      	ldr	r5, [r7, #4]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3304      	adds	r3, #4
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	8ad2      	ldrh	r2, [r2, #22]
 800d948:	6879      	ldr	r1, [r7, #4]
 800d94a:	8b09      	ldrh	r1, [r1, #24]
 800d94c:	9102      	str	r1, [sp, #8]
 800d94e:	9201      	str	r2, [sp, #4]
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	462b      	mov	r3, r5
 800d954:	4622      	mov	r2, r4
 800d956:	4601      	mov	r1, r0
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f005 fd85 	bl	8013468 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f001 fb66 	bl	800f030 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d964:	4b47      	ldr	r3, [pc, #284]	; (800da84 <tcp_close_shutdown+0x1b0>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d105      	bne.n	800d97a <tcp_close_shutdown+0xa6>
 800d96e:	4b45      	ldr	r3, [pc, #276]	; (800da84 <tcp_close_shutdown+0x1b0>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	4a43      	ldr	r2, [pc, #268]	; (800da84 <tcp_close_shutdown+0x1b0>)
 800d976:	6013      	str	r3, [r2, #0]
 800d978:	e013      	b.n	800d9a2 <tcp_close_shutdown+0xce>
 800d97a:	4b42      	ldr	r3, [pc, #264]	; (800da84 <tcp_close_shutdown+0x1b0>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	e00c      	b.n	800d99c <tcp_close_shutdown+0xc8>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d104      	bne.n	800d996 <tcp_close_shutdown+0xc2>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	68da      	ldr	r2, [r3, #12]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	60da      	str	r2, [r3, #12]
 800d994:	e005      	b.n	800d9a2 <tcp_close_shutdown+0xce>
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	60fb      	str	r3, [r7, #12]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1ef      	bne.n	800d982 <tcp_close_shutdown+0xae>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	60da      	str	r2, [r3, #12]
 800d9a8:	4b37      	ldr	r3, [pc, #220]	; (800da88 <tcp_close_shutdown+0x1b4>)
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d9ae:	4b37      	ldr	r3, [pc, #220]	; (800da8c <tcp_close_shutdown+0x1b8>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d102      	bne.n	800d9be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d9b8:	f003 fffa 	bl	80119b0 <tcp_trigger_input_pcb_close>
 800d9bc:	e002      	b.n	800d9c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7ff fed6 	bl	800d770 <tcp_free>
      }
      return ERR_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e050      	b.n	800da6a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	7d1b      	ldrb	r3, [r3, #20]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d03b      	beq.n	800da48 <tcp_close_shutdown+0x174>
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	dc44      	bgt.n	800da5e <tcp_close_shutdown+0x18a>
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <tcp_close_shutdown+0x10a>
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d02a      	beq.n	800da32 <tcp_close_shutdown+0x15e>
 800d9dc:	e03f      	b.n	800da5e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	8adb      	ldrh	r3, [r3, #22]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d021      	beq.n	800da2a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9e6:	4b2a      	ldr	r3, [pc, #168]	; (800da90 <tcp_close_shutdown+0x1bc>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d105      	bne.n	800d9fc <tcp_close_shutdown+0x128>
 800d9f0:	4b27      	ldr	r3, [pc, #156]	; (800da90 <tcp_close_shutdown+0x1bc>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	4a26      	ldr	r2, [pc, #152]	; (800da90 <tcp_close_shutdown+0x1bc>)
 800d9f8:	6013      	str	r3, [r2, #0]
 800d9fa:	e013      	b.n	800da24 <tcp_close_shutdown+0x150>
 800d9fc:	4b24      	ldr	r3, [pc, #144]	; (800da90 <tcp_close_shutdown+0x1bc>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	60bb      	str	r3, [r7, #8]
 800da02:	e00c      	b.n	800da1e <tcp_close_shutdown+0x14a>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d104      	bne.n	800da18 <tcp_close_shutdown+0x144>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68da      	ldr	r2, [r3, #12]
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	60da      	str	r2, [r3, #12]
 800da16:	e005      	b.n	800da24 <tcp_close_shutdown+0x150>
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	60bb      	str	r3, [r7, #8]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1ef      	bne.n	800da04 <tcp_close_shutdown+0x130>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff fea0 	bl	800d770 <tcp_free>
      break;
 800da30:	e01a      	b.n	800da68 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff ff14 	bl	800d860 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	4816      	ldr	r0, [pc, #88]	; (800da94 <tcp_close_shutdown+0x1c0>)
 800da3c:	f001 fb48 	bl	800f0d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff feb1 	bl	800d7a8 <tcp_free_listen>
      break;
 800da46:	e00f      	b.n	800da68 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da48:	6879      	ldr	r1, [r7, #4]
 800da4a:	480e      	ldr	r0, [pc, #56]	; (800da84 <tcp_close_shutdown+0x1b0>)
 800da4c:	f001 fb40 	bl	800f0d0 <tcp_pcb_remove>
 800da50:	4b0d      	ldr	r3, [pc, #52]	; (800da88 <tcp_close_shutdown+0x1b4>)
 800da52:	2201      	movs	r2, #1
 800da54:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7ff fe8a 	bl	800d770 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da5c:	e004      	b.n	800da68 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f81a 	bl	800da98 <tcp_close_shutdown_fin>
 800da64:	4603      	mov	r3, r0
 800da66:	e000      	b.n	800da6a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bdb0      	pop	{r4, r5, r7, pc}
 800da72:	bf00      	nop
 800da74:	080181b8 	.word	0x080181b8
 800da78:	0801828c 	.word	0x0801828c
 800da7c:	080181fc 	.word	0x080181fc
 800da80:	080182ac 	.word	0x080182ac
 800da84:	24003614 	.word	0x24003614
 800da88:	24003610 	.word	0x24003610
 800da8c:	24003628 	.word	0x24003628
 800da90:	24003620 	.word	0x24003620
 800da94:	2400361c 	.word	0x2400361c

0800da98 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d106      	bne.n	800dab4 <tcp_close_shutdown_fin+0x1c>
 800daa6:	4b2e      	ldr	r3, [pc, #184]	; (800db60 <tcp_close_shutdown_fin+0xc8>)
 800daa8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800daac:	492d      	ldr	r1, [pc, #180]	; (800db64 <tcp_close_shutdown_fin+0xcc>)
 800daae:	482e      	ldr	r0, [pc, #184]	; (800db68 <tcp_close_shutdown_fin+0xd0>)
 800dab0:	f008 fd60 	bl	8016574 <iprintf>

  switch (pcb->state) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	7d1b      	ldrb	r3, [r3, #20]
 800dab8:	2b07      	cmp	r3, #7
 800daba:	d020      	beq.n	800dafe <tcp_close_shutdown_fin+0x66>
 800dabc:	2b07      	cmp	r3, #7
 800dabe:	dc2b      	bgt.n	800db18 <tcp_close_shutdown_fin+0x80>
 800dac0:	2b03      	cmp	r3, #3
 800dac2:	d002      	beq.n	800daca <tcp_close_shutdown_fin+0x32>
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d00d      	beq.n	800dae4 <tcp_close_shutdown_fin+0x4c>
 800dac8:	e026      	b.n	800db18 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f004 fdda 	bl	8012684 <tcp_send_fin>
 800dad0:	4603      	mov	r3, r0
 800dad2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d11f      	bne.n	800db1c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2205      	movs	r2, #5
 800dae0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dae2:	e01b      	b.n	800db1c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f004 fdcd 	bl	8012684 <tcp_send_fin>
 800daea:	4603      	mov	r3, r0
 800daec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800daee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d114      	bne.n	800db20 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2205      	movs	r2, #5
 800dafa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dafc:	e010      	b.n	800db20 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f004 fdc0 	bl	8012684 <tcp_send_fin>
 800db04:	4603      	mov	r3, r0
 800db06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d109      	bne.n	800db24 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2209      	movs	r2, #9
 800db14:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db16:	e005      	b.n	800db24 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db18:	2300      	movs	r3, #0
 800db1a:	e01c      	b.n	800db56 <tcp_close_shutdown_fin+0xbe>
      break;
 800db1c:	bf00      	nop
 800db1e:	e002      	b.n	800db26 <tcp_close_shutdown_fin+0x8e>
      break;
 800db20:	bf00      	nop
 800db22:	e000      	b.n	800db26 <tcp_close_shutdown_fin+0x8e>
      break;
 800db24:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d103      	bne.n	800db36 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f004 fee6 	bl	8012900 <tcp_output>
 800db34:	e00d      	b.n	800db52 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3e:	d108      	bne.n	800db52 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	8b5b      	ldrh	r3, [r3, #26]
 800db44:	f043 0308 	orr.w	r3, r3, #8
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	e001      	b.n	800db56 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800db52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	080181b8 	.word	0x080181b8
 800db64:	08018268 	.word	0x08018268
 800db68:	080181fc 	.word	0x080181fc

0800db6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d109      	bne.n	800db8e <tcp_close+0x22>
 800db7a:	4b0f      	ldr	r3, [pc, #60]	; (800dbb8 <tcp_close+0x4c>)
 800db7c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800db80:	490e      	ldr	r1, [pc, #56]	; (800dbbc <tcp_close+0x50>)
 800db82:	480f      	ldr	r0, [pc, #60]	; (800dbc0 <tcp_close+0x54>)
 800db84:	f008 fcf6 	bl	8016574 <iprintf>
 800db88:	f06f 030f 	mvn.w	r3, #15
 800db8c:	e00f      	b.n	800dbae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	7d1b      	ldrb	r3, [r3, #20]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d006      	beq.n	800dba4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	8b5b      	ldrh	r3, [r3, #26]
 800db9a:	f043 0310 	orr.w	r3, r3, #16
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dba4:	2101      	movs	r1, #1
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff fe94 	bl	800d8d4 <tcp_close_shutdown>
 800dbac:	4603      	mov	r3, r0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	080181b8 	.word	0x080181b8
 800dbbc:	080182c8 	.word	0x080182c8
 800dbc0:	080181fc 	.word	0x080181fc

0800dbc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08e      	sub	sp, #56	; 0x38
 800dbc8:	af04      	add	r7, sp, #16
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d107      	bne.n	800dbe4 <tcp_abandon+0x20>
 800dbd4:	4b52      	ldr	r3, [pc, #328]	; (800dd20 <tcp_abandon+0x15c>)
 800dbd6:	f240 223d 	movw	r2, #573	; 0x23d
 800dbda:	4952      	ldr	r1, [pc, #328]	; (800dd24 <tcp_abandon+0x160>)
 800dbdc:	4852      	ldr	r0, [pc, #328]	; (800dd28 <tcp_abandon+0x164>)
 800dbde:	f008 fcc9 	bl	8016574 <iprintf>
 800dbe2:	e099      	b.n	800dd18 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	7d1b      	ldrb	r3, [r3, #20]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d106      	bne.n	800dbfa <tcp_abandon+0x36>
 800dbec:	4b4c      	ldr	r3, [pc, #304]	; (800dd20 <tcp_abandon+0x15c>)
 800dbee:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dbf2:	494e      	ldr	r1, [pc, #312]	; (800dd2c <tcp_abandon+0x168>)
 800dbf4:	484c      	ldr	r0, [pc, #304]	; (800dd28 <tcp_abandon+0x164>)
 800dbf6:	f008 fcbd 	bl	8016574 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	7d1b      	ldrb	r3, [r3, #20]
 800dbfe:	2b0a      	cmp	r3, #10
 800dc00:	d107      	bne.n	800dc12 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	484a      	ldr	r0, [pc, #296]	; (800dd30 <tcp_abandon+0x16c>)
 800dc06:	f001 fa63 	bl	800f0d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7ff fdb0 	bl	800d770 <tcp_free>
 800dc10:	e082      	b.n	800dd18 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc1e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc2c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7d1b      	ldrb	r3, [r3, #20]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d126      	bne.n	800dc8a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	8adb      	ldrh	r3, [r3, #22]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d02e      	beq.n	800dca2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc44:	4b3b      	ldr	r3, [pc, #236]	; (800dd34 <tcp_abandon+0x170>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d105      	bne.n	800dc5a <tcp_abandon+0x96>
 800dc4e:	4b39      	ldr	r3, [pc, #228]	; (800dd34 <tcp_abandon+0x170>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	4a37      	ldr	r2, [pc, #220]	; (800dd34 <tcp_abandon+0x170>)
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	e013      	b.n	800dc82 <tcp_abandon+0xbe>
 800dc5a:	4b36      	ldr	r3, [pc, #216]	; (800dd34 <tcp_abandon+0x170>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	61fb      	str	r3, [r7, #28]
 800dc60:	e00c      	b.n	800dc7c <tcp_abandon+0xb8>
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d104      	bne.n	800dc76 <tcp_abandon+0xb2>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	68da      	ldr	r2, [r3, #12]
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	60da      	str	r2, [r3, #12]
 800dc74:	e005      	b.n	800dc82 <tcp_abandon+0xbe>
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	61fb      	str	r3, [r7, #28]
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1ef      	bne.n	800dc62 <tcp_abandon+0x9e>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	60da      	str	r2, [r3, #12]
 800dc88:	e00b      	b.n	800dca2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	8adb      	ldrh	r3, [r3, #22]
 800dc92:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc94:	6879      	ldr	r1, [r7, #4]
 800dc96:	4828      	ldr	r0, [pc, #160]	; (800dd38 <tcp_abandon+0x174>)
 800dc98:	f001 fa1a 	bl	800f0d0 <tcp_pcb_remove>
 800dc9c:	4b27      	ldr	r3, [pc, #156]	; (800dd3c <tcp_abandon+0x178>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 fed6 	bl	800ea60 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d004      	beq.n	800dcc6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 fecd 	bl	800ea60 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d004      	beq.n	800dcd8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 fec4 	bl	800ea60 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00e      	beq.n	800dcfc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dcde:	6879      	ldr	r1, [r7, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	3304      	adds	r3, #4
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	8b12      	ldrh	r2, [r2, #24]
 800dce8:	9202      	str	r2, [sp, #8]
 800dcea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dcec:	9201      	str	r2, [sp, #4]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	697a      	ldr	r2, [r7, #20]
 800dcf4:	69b9      	ldr	r1, [r7, #24]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f005 fbb6 	bl	8013468 <tcp_rst>
    }
    last_state = pcb->state;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
 800dd00:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7ff fd34 	bl	800d770 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <tcp_abandon+0x154>
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	f06f 010c 	mvn.w	r1, #12
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	4798      	blx	r3
  }
}
 800dd18:	3728      	adds	r7, #40	; 0x28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	080181b8 	.word	0x080181b8
 800dd24:	080182fc 	.word	0x080182fc
 800dd28:	080181fc 	.word	0x080181fc
 800dd2c:	08018318 	.word	0x08018318
 800dd30:	24003624 	.word	0x24003624
 800dd34:	24003620 	.word	0x24003620
 800dd38:	24003614 	.word	0x24003614
 800dd3c:	24003610 	.word	0x24003610

0800dd40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dd48:	2101      	movs	r1, #1
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff ff3a 	bl	800dbc4 <tcp_abandon>
}
 800dd50:	bf00      	nop
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	4613      	mov	r3, r2
 800dd64:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dd66:	2304      	movs	r3, #4
 800dd68:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dd70:	4b3e      	ldr	r3, [pc, #248]	; (800de6c <tcp_bind+0x114>)
 800dd72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d109      	bne.n	800dd8e <tcp_bind+0x36>
 800dd7a:	4b3d      	ldr	r3, [pc, #244]	; (800de70 <tcp_bind+0x118>)
 800dd7c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dd80:	493c      	ldr	r1, [pc, #240]	; (800de74 <tcp_bind+0x11c>)
 800dd82:	483d      	ldr	r0, [pc, #244]	; (800de78 <tcp_bind+0x120>)
 800dd84:	f008 fbf6 	bl	8016574 <iprintf>
 800dd88:	f06f 030f 	mvn.w	r3, #15
 800dd8c:	e06a      	b.n	800de64 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	7d1b      	ldrb	r3, [r3, #20]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d009      	beq.n	800ddaa <tcp_bind+0x52>
 800dd96:	4b36      	ldr	r3, [pc, #216]	; (800de70 <tcp_bind+0x118>)
 800dd98:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dd9c:	4937      	ldr	r1, [pc, #220]	; (800de7c <tcp_bind+0x124>)
 800dd9e:	4836      	ldr	r0, [pc, #216]	; (800de78 <tcp_bind+0x120>)
 800dda0:	f008 fbe8 	bl	8016574 <iprintf>
 800dda4:	f06f 0305 	mvn.w	r3, #5
 800dda8:	e05c      	b.n	800de64 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ddaa:	88fb      	ldrh	r3, [r7, #6]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d109      	bne.n	800ddc4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ddb0:	f000 f9f0 	bl	800e194 <tcp_new_port>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d135      	bne.n	800de2a <tcp_bind+0xd2>
      return ERR_BUF;
 800ddbe:	f06f 0301 	mvn.w	r3, #1
 800ddc2:	e04f      	b.n	800de64 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
 800ddc8:	e02b      	b.n	800de22 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ddca:	4a2d      	ldr	r2, [pc, #180]	; (800de80 <tcp_bind+0x128>)
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	61bb      	str	r3, [r7, #24]
 800ddd6:	e01e      	b.n	800de16 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	8adb      	ldrh	r3, [r3, #22]
 800dddc:	88fa      	ldrh	r2, [r7, #6]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d116      	bne.n	800de10 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dde2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d010      	beq.n	800de0a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00c      	beq.n	800de0a <tcp_bind+0xb2>
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d009      	beq.n	800de0a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d005      	beq.n	800de0a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de06:	429a      	cmp	r2, r3
 800de08:	d102      	bne.n	800de10 <tcp_bind+0xb8>
              return ERR_USE;
 800de0a:	f06f 0307 	mvn.w	r3, #7
 800de0e:	e029      	b.n	800de64 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	61bb      	str	r3, [r7, #24]
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d1dd      	bne.n	800ddd8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	3301      	adds	r3, #1
 800de20:	61fb      	str	r3, [r7, #28]
 800de22:	69fa      	ldr	r2, [r7, #28]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	429a      	cmp	r2, r3
 800de28:	dbcf      	blt.n	800ddca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00c      	beq.n	800de4a <tcp_bind+0xf2>
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d008      	beq.n	800de4a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d002      	beq.n	800de44 <tcp_bind+0xec>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	e000      	b.n	800de46 <tcp_bind+0xee>
 800de44:	2300      	movs	r3, #0
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	88fa      	ldrh	r2, [r7, #6]
 800de4e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800de50:	4b0c      	ldr	r3, [pc, #48]	; (800de84 <tcp_bind+0x12c>)
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	60da      	str	r2, [r3, #12]
 800de58:	4a0a      	ldr	r2, [pc, #40]	; (800de84 <tcp_bind+0x12c>)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6013      	str	r3, [r2, #0]
 800de5e:	f005 fcc5 	bl	80137ec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3720      	adds	r7, #32
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	0801afc0 	.word	0x0801afc0
 800de70:	080181b8 	.word	0x080181b8
 800de74:	0801834c 	.word	0x0801834c
 800de78:	080181fc 	.word	0x080181fc
 800de7c:	08018364 	.word	0x08018364
 800de80:	0801af98 	.word	0x0801af98
 800de84:	24003620 	.word	0x24003620

0800de88 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d106      	bne.n	800deaa <tcp_accept_null+0x22>
 800de9c:	4b07      	ldr	r3, [pc, #28]	; (800debc <tcp_accept_null+0x34>)
 800de9e:	f240 320f 	movw	r2, #783	; 0x30f
 800dea2:	4907      	ldr	r1, [pc, #28]	; (800dec0 <tcp_accept_null+0x38>)
 800dea4:	4807      	ldr	r0, [pc, #28]	; (800dec4 <tcp_accept_null+0x3c>)
 800dea6:	f008 fb65 	bl	8016574 <iprintf>

  tcp_abort(pcb);
 800deaa:	68b8      	ldr	r0, [r7, #8]
 800deac:	f7ff ff48 	bl	800dd40 <tcp_abort>

  return ERR_ABRT;
 800deb0:	f06f 030c 	mvn.w	r3, #12
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	080181b8 	.word	0x080181b8
 800dec0:	0801838c 	.word	0x0801838c
 800dec4:	080181fc 	.word	0x080181fc

0800dec8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	460b      	mov	r3, r1
 800ded2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ded4:	78fb      	ldrb	r3, [r7, #3]
 800ded6:	2200      	movs	r2, #0
 800ded8:	4619      	mov	r1, r3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f806 	bl	800deec <tcp_listen_with_backlog_and_err>
 800dee0:	4603      	mov	r3, r0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
	...

0800deec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	460b      	mov	r3, r1
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d109      	bne.n	800df18 <tcp_listen_with_backlog_and_err+0x2c>
 800df04:	4b47      	ldr	r3, [pc, #284]	; (800e024 <tcp_listen_with_backlog_and_err+0x138>)
 800df06:	f240 3259 	movw	r2, #857	; 0x359
 800df0a:	4947      	ldr	r1, [pc, #284]	; (800e028 <tcp_listen_with_backlog_and_err+0x13c>)
 800df0c:	4847      	ldr	r0, [pc, #284]	; (800e02c <tcp_listen_with_backlog_and_err+0x140>)
 800df0e:	f008 fb31 	bl	8016574 <iprintf>
 800df12:	23f0      	movs	r3, #240	; 0xf0
 800df14:	76fb      	strb	r3, [r7, #27]
 800df16:	e079      	b.n	800e00c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d009      	beq.n	800df34 <tcp_listen_with_backlog_and_err+0x48>
 800df20:	4b40      	ldr	r3, [pc, #256]	; (800e024 <tcp_listen_with_backlog_and_err+0x138>)
 800df22:	f240 325a 	movw	r2, #858	; 0x35a
 800df26:	4942      	ldr	r1, [pc, #264]	; (800e030 <tcp_listen_with_backlog_and_err+0x144>)
 800df28:	4840      	ldr	r0, [pc, #256]	; (800e02c <tcp_listen_with_backlog_and_err+0x140>)
 800df2a:	f008 fb23 	bl	8016574 <iprintf>
 800df2e:	23f1      	movs	r3, #241	; 0xf1
 800df30:	76fb      	strb	r3, [r7, #27]
 800df32:	e06b      	b.n	800e00c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	7d1b      	ldrb	r3, [r3, #20]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d104      	bne.n	800df46 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800df40:	23f7      	movs	r3, #247	; 0xf7
 800df42:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df44:	e062      	b.n	800e00c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800df46:	2002      	movs	r0, #2
 800df48:	f7fe fa7c 	bl	800c444 <memp_malloc>
 800df4c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d102      	bne.n	800df5a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800df54:	23ff      	movs	r3, #255	; 0xff
 800df56:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df58:	e058      	b.n	800e00c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	691a      	ldr	r2, [r3, #16]
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	8ada      	ldrh	r2, [r3, #22]
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2201      	movs	r2, #1
 800df6e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	7d5a      	ldrb	r2, [r3, #21]
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	7a5a      	ldrb	r2, [r3, #9]
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2200      	movs	r2, #0
 800df84:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	7ada      	ldrb	r2, [r3, #11]
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	7a9a      	ldrb	r2, [r3, #10]
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	8adb      	ldrh	r3, [r3, #22]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d021      	beq.n	800dfea <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfa6:	4b23      	ldr	r3, [pc, #140]	; (800e034 <tcp_listen_with_backlog_and_err+0x148>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d105      	bne.n	800dfbc <tcp_listen_with_backlog_and_err+0xd0>
 800dfb0:	4b20      	ldr	r3, [pc, #128]	; (800e034 <tcp_listen_with_backlog_and_err+0x148>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	4a1f      	ldr	r2, [pc, #124]	; (800e034 <tcp_listen_with_backlog_and_err+0x148>)
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	e013      	b.n	800dfe4 <tcp_listen_with_backlog_and_err+0xf8>
 800dfbc:	4b1d      	ldr	r3, [pc, #116]	; (800e034 <tcp_listen_with_backlog_and_err+0x148>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	617b      	str	r3, [r7, #20]
 800dfc2:	e00c      	b.n	800dfde <tcp_listen_with_backlog_and_err+0xf2>
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d104      	bne.n	800dfd8 <tcp_listen_with_backlog_and_err+0xec>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	68da      	ldr	r2, [r3, #12]
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	60da      	str	r2, [r3, #12]
 800dfd6:	e005      	b.n	800dfe4 <tcp_listen_with_backlog_and_err+0xf8>
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	617b      	str	r3, [r7, #20]
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1ef      	bne.n	800dfc4 <tcp_listen_with_backlog_and_err+0xd8>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7ff fbc0 	bl	800d770 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	4a11      	ldr	r2, [pc, #68]	; (800e038 <tcp_listen_with_backlog_and_err+0x14c>)
 800dff4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dff6:	4b11      	ldr	r3, [pc, #68]	; (800e03c <tcp_listen_with_backlog_and_err+0x150>)
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	60da      	str	r2, [r3, #12]
 800dffe:	4a0f      	ldr	r2, [pc, #60]	; (800e03c <tcp_listen_with_backlog_and_err+0x150>)
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	6013      	str	r3, [r2, #0]
 800e004:	f005 fbf2 	bl	80137ec <tcp_timer_needed>
  res = ERR_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	7efa      	ldrb	r2, [r7, #27]
 800e016:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e018:	69fb      	ldr	r3, [r7, #28]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3720      	adds	r7, #32
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	080181b8 	.word	0x080181b8
 800e028:	080183ac 	.word	0x080183ac
 800e02c:	080181fc 	.word	0x080181fc
 800e030:	080183dc 	.word	0x080183dc
 800e034:	24003620 	.word	0x24003620
 800e038:	0800de89 	.word	0x0800de89
 800e03c:	2400361c 	.word	0x2400361c

0800e040 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d106      	bne.n	800e05c <tcp_update_rcv_ann_wnd+0x1c>
 800e04e:	4b25      	ldr	r3, [pc, #148]	; (800e0e4 <tcp_update_rcv_ann_wnd+0xa4>)
 800e050:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e054:	4924      	ldr	r1, [pc, #144]	; (800e0e8 <tcp_update_rcv_ann_wnd+0xa8>)
 800e056:	4825      	ldr	r0, [pc, #148]	; (800e0ec <tcp_update_rcv_ann_wnd+0xac>)
 800e058:	f008 fa8c 	bl	8016574 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e064:	4413      	add	r3, r2
 800e066:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e070:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e074:	bf28      	it	cs
 800e076:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e07a:	b292      	uxth	r2, r2
 800e07c:	4413      	add	r3, r2
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	2b00      	cmp	r3, #0
 800e084:	db08      	blt.n	800e098 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	e020      	b.n	800e0da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd03      	ble.n	800e0ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0ac:	e014      	b.n	800e0d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0c0:	d306      	bcc.n	800e0d0 <tcp_update_rcv_ann_wnd+0x90>
 800e0c2:	4b08      	ldr	r3, [pc, #32]	; (800e0e4 <tcp_update_rcv_ann_wnd+0xa4>)
 800e0c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e0c8:	4909      	ldr	r1, [pc, #36]	; (800e0f0 <tcp_update_rcv_ann_wnd+0xb0>)
 800e0ca:	4808      	ldr	r0, [pc, #32]	; (800e0ec <tcp_update_rcv_ann_wnd+0xac>)
 800e0cc:	f008 fa52 	bl	8016574 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e0d8:	2300      	movs	r3, #0
  }
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	080181b8 	.word	0x080181b8
 800e0e8:	08018414 	.word	0x08018414
 800e0ec:	080181fc 	.word	0x080181fc
 800e0f0:	08018438 	.word	0x08018438

0800e0f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d107      	bne.n	800e116 <tcp_recved+0x22>
 800e106:	4b1f      	ldr	r3, [pc, #124]	; (800e184 <tcp_recved+0x90>)
 800e108:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e10c:	491e      	ldr	r1, [pc, #120]	; (800e188 <tcp_recved+0x94>)
 800e10e:	481f      	ldr	r0, [pc, #124]	; (800e18c <tcp_recved+0x98>)
 800e110:	f008 fa30 	bl	8016574 <iprintf>
 800e114:	e032      	b.n	800e17c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	7d1b      	ldrb	r3, [r3, #20]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d106      	bne.n	800e12c <tcp_recved+0x38>
 800e11e:	4b19      	ldr	r3, [pc, #100]	; (800e184 <tcp_recved+0x90>)
 800e120:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e124:	491a      	ldr	r1, [pc, #104]	; (800e190 <tcp_recved+0x9c>)
 800e126:	4819      	ldr	r0, [pc, #100]	; (800e18c <tcp_recved+0x98>)
 800e128:	f008 fa24 	bl	8016574 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e130:	887b      	ldrh	r3, [r7, #2]
 800e132:	4413      	add	r3, r2
 800e134:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e136:	89fb      	ldrh	r3, [r7, #14]
 800e138:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e13c:	d804      	bhi.n	800e148 <tcp_recved+0x54>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e142:	89fa      	ldrh	r2, [r7, #14]
 800e144:	429a      	cmp	r2, r3
 800e146:	d204      	bcs.n	800e152 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e14e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e150:	e002      	b.n	800e158 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	89fa      	ldrh	r2, [r7, #14]
 800e156:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7ff ff71 	bl	800e040 <tcp_update_rcv_ann_wnd>
 800e15e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e166:	d309      	bcc.n	800e17c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	8b5b      	ldrh	r3, [r3, #26]
 800e16c:	f043 0302 	orr.w	r3, r3, #2
 800e170:	b29a      	uxth	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f004 fbc2 	bl	8012900 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	080181b8 	.word	0x080181b8
 800e188:	08018454 	.word	0x08018454
 800e18c:	080181fc 	.word	0x080181fc
 800e190:	0801846c 	.word	0x0801846c

0800e194 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e19e:	4b1e      	ldr	r3, [pc, #120]	; (800e218 <tcp_new_port+0x84>)
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	4b1c      	ldr	r3, [pc, #112]	; (800e218 <tcp_new_port+0x84>)
 800e1a8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e1aa:	4b1b      	ldr	r3, [pc, #108]	; (800e218 <tcp_new_port+0x84>)
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d103      	bne.n	800e1be <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e1b6:	4b18      	ldr	r3, [pc, #96]	; (800e218 <tcp_new_port+0x84>)
 800e1b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e1bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1be:	2300      	movs	r3, #0
 800e1c0:	71fb      	strb	r3, [r7, #7]
 800e1c2:	e01e      	b.n	800e202 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	4a15      	ldr	r2, [pc, #84]	; (800e21c <tcp_new_port+0x88>)
 800e1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	e011      	b.n	800e1f6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	8ada      	ldrh	r2, [r3, #22]
 800e1d6:	4b10      	ldr	r3, [pc, #64]	; (800e218 <tcp_new_port+0x84>)
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d108      	bne.n	800e1f0 <tcp_new_port+0x5c>
        n++;
 800e1de:	88bb      	ldrh	r3, [r7, #4]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e1e4:	88bb      	ldrh	r3, [r7, #4]
 800e1e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1ea:	d3d8      	bcc.n	800e19e <tcp_new_port+0xa>
          return 0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e00d      	b.n	800e20c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	603b      	str	r3, [r7, #0]
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1ea      	bne.n	800e1d2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	3301      	adds	r3, #1
 800e200:	71fb      	strb	r3, [r7, #7]
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	2b03      	cmp	r3, #3
 800e206:	d9dd      	bls.n	800e1c4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e208:	4b03      	ldr	r3, [pc, #12]	; (800e218 <tcp_new_port+0x84>)
 800e20a:	881b      	ldrh	r3, [r3, #0]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr
 800e218:	2400002c 	.word	0x2400002c
 800e21c:	0801af98 	.word	0x0801af98

0800e220 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e220:	b5b0      	push	{r4, r5, r7, lr}
 800e222:	b090      	sub	sp, #64	; 0x40
 800e224:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e226:	2300      	movs	r3, #0
 800e228:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e22c:	4b94      	ldr	r3, [pc, #592]	; (800e480 <tcp_slowtmr+0x260>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	3301      	adds	r3, #1
 800e232:	4a93      	ldr	r2, [pc, #588]	; (800e480 <tcp_slowtmr+0x260>)
 800e234:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e236:	4b93      	ldr	r3, [pc, #588]	; (800e484 <tcp_slowtmr+0x264>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	3301      	adds	r3, #1
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	4b91      	ldr	r3, [pc, #580]	; (800e484 <tcp_slowtmr+0x264>)
 800e240:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e242:	2300      	movs	r3, #0
 800e244:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e246:	4b90      	ldr	r3, [pc, #576]	; (800e488 <tcp_slowtmr+0x268>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e24c:	e29d      	b.n	800e78a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	7d1b      	ldrb	r3, [r3, #20]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <tcp_slowtmr+0x44>
 800e256:	4b8d      	ldr	r3, [pc, #564]	; (800e48c <tcp_slowtmr+0x26c>)
 800e258:	f240 42be 	movw	r2, #1214	; 0x4be
 800e25c:	498c      	ldr	r1, [pc, #560]	; (800e490 <tcp_slowtmr+0x270>)
 800e25e:	488d      	ldr	r0, [pc, #564]	; (800e494 <tcp_slowtmr+0x274>)
 800e260:	f008 f988 	bl	8016574 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	7d1b      	ldrb	r3, [r3, #20]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d106      	bne.n	800e27a <tcp_slowtmr+0x5a>
 800e26c:	4b87      	ldr	r3, [pc, #540]	; (800e48c <tcp_slowtmr+0x26c>)
 800e26e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e272:	4989      	ldr	r1, [pc, #548]	; (800e498 <tcp_slowtmr+0x278>)
 800e274:	4887      	ldr	r0, [pc, #540]	; (800e494 <tcp_slowtmr+0x274>)
 800e276:	f008 f97d 	bl	8016574 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	7d1b      	ldrb	r3, [r3, #20]
 800e27e:	2b0a      	cmp	r3, #10
 800e280:	d106      	bne.n	800e290 <tcp_slowtmr+0x70>
 800e282:	4b82      	ldr	r3, [pc, #520]	; (800e48c <tcp_slowtmr+0x26c>)
 800e284:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e288:	4984      	ldr	r1, [pc, #528]	; (800e49c <tcp_slowtmr+0x27c>)
 800e28a:	4882      	ldr	r0, [pc, #520]	; (800e494 <tcp_slowtmr+0x274>)
 800e28c:	f008 f972 	bl	8016574 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	7f9a      	ldrb	r2, [r3, #30]
 800e294:	4b7b      	ldr	r3, [pc, #492]	; (800e484 <tcp_slowtmr+0x264>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d105      	bne.n	800e2a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e2a6:	e270      	b.n	800e78a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e2a8:	4b76      	ldr	r3, [pc, #472]	; (800e484 <tcp_slowtmr+0x264>)
 800e2aa:	781a      	ldrb	r2, [r3, #0]
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	7d1b      	ldrb	r3, [r3, #20]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d10a      	bne.n	800e2da <tcp_slowtmr+0xba>
 800e2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2ca:	2b05      	cmp	r3, #5
 800e2cc:	d905      	bls.n	800e2da <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2d8:	e11e      	b.n	800e518 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2e0:	2b0b      	cmp	r3, #11
 800e2e2:	d905      	bls.n	800e2f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2ee:	e113      	b.n	800e518 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d075      	beq.n	800e3e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d006      	beq.n	800e310 <tcp_slowtmr+0xf0>
 800e302:	4b62      	ldr	r3, [pc, #392]	; (800e48c <tcp_slowtmr+0x26c>)
 800e304:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e308:	4965      	ldr	r1, [pc, #404]	; (800e4a0 <tcp_slowtmr+0x280>)
 800e30a:	4862      	ldr	r0, [pc, #392]	; (800e494 <tcp_slowtmr+0x274>)
 800e30c:	f008 f932 	bl	8016574 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <tcp_slowtmr+0x106>
 800e318:	4b5c      	ldr	r3, [pc, #368]	; (800e48c <tcp_slowtmr+0x26c>)
 800e31a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e31e:	4961      	ldr	r1, [pc, #388]	; (800e4a4 <tcp_slowtmr+0x284>)
 800e320:	485c      	ldr	r0, [pc, #368]	; (800e494 <tcp_slowtmr+0x274>)
 800e322:	f008 f927 	bl	8016574 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e328:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e32c:	2b0b      	cmp	r3, #11
 800e32e:	d905      	bls.n	800e33c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e334:	3301      	adds	r3, #1
 800e336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e33a:	e0ed      	b.n	800e518 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e342:	3b01      	subs	r3, #1
 800e344:	4a58      	ldr	r2, [pc, #352]	; (800e4a8 <tcp_slowtmr+0x288>)
 800e346:	5cd3      	ldrb	r3, [r2, r3]
 800e348:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e350:	7c7a      	ldrb	r2, [r7, #17]
 800e352:	429a      	cmp	r2, r3
 800e354:	d907      	bls.n	800e366 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e358:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e35c:	3301      	adds	r3, #1
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e36c:	7c7a      	ldrb	r2, [r7, #17]
 800e36e:	429a      	cmp	r2, r3
 800e370:	f200 80d2 	bhi.w	800e518 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e374:	2301      	movs	r3, #1
 800e376:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d108      	bne.n	800e394 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e384:	f005 f964 	bl	8013650 <tcp_zero_window_probe>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d014      	beq.n	800e3b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e38e:	2300      	movs	r3, #0
 800e390:	623b      	str	r3, [r7, #32]
 800e392:	e011      	b.n	800e3b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e39a:	4619      	mov	r1, r3
 800e39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e39e:	f004 f829 	bl	80123f4 <tcp_split_unsent_seg>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d107      	bne.n	800e3b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e3a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3aa:	f004 faa9 	bl	8012900 <tcp_output>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	f000 80ac 	beq.w	800e518 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3ce:	2b06      	cmp	r3, #6
 800e3d0:	f200 80a2 	bhi.w	800e518 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e3e4:	e098      	b.n	800e518 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	db0f      	blt.n	800e410 <tcp_slowtmr+0x1f0>
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e3f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d008      	beq.n	800e410 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e404:	b29b      	uxth	r3, r3
 800e406:	3301      	adds	r3, #1
 800e408:	b29b      	uxth	r3, r3
 800e40a:	b21a      	sxth	r2, r3
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e41c:	429a      	cmp	r2, r3
 800e41e:	db7b      	blt.n	800e518 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e422:	f004 fd5f 	bl	8012ee4 <tcp_rexmit_rto_prepare>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d007      	beq.n	800e43c <tcp_slowtmr+0x21c>
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e430:	2b00      	cmp	r3, #0
 800e432:	d171      	bne.n	800e518 <tcp_slowtmr+0x2f8>
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d06d      	beq.n	800e518 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	7d1b      	ldrb	r3, [r3, #20]
 800e440:	2b02      	cmp	r3, #2
 800e442:	d03a      	beq.n	800e4ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e44a:	2b0c      	cmp	r3, #12
 800e44c:	bf28      	it	cs
 800e44e:	230c      	movcs	r3, #12
 800e450:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e458:	10db      	asrs	r3, r3, #3
 800e45a:	b21b      	sxth	r3, r3
 800e45c:	461a      	mov	r2, r3
 800e45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e460:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e464:	4413      	add	r3, r2
 800e466:	7efa      	ldrb	r2, [r7, #27]
 800e468:	4910      	ldr	r1, [pc, #64]	; (800e4ac <tcp_slowtmr+0x28c>)
 800e46a:	5c8a      	ldrb	r2, [r1, r2]
 800e46c:	4093      	lsls	r3, r2
 800e46e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e476:	4293      	cmp	r3, r2
 800e478:	dc1a      	bgt.n	800e4b0 <tcp_slowtmr+0x290>
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	b21a      	sxth	r2, r3
 800e47e:	e019      	b.n	800e4b4 <tcp_slowtmr+0x294>
 800e480:	24003618 	.word	0x24003618
 800e484:	240000f2 	.word	0x240000f2
 800e488:	24003614 	.word	0x24003614
 800e48c:	080181b8 	.word	0x080181b8
 800e490:	080184fc 	.word	0x080184fc
 800e494:	080181fc 	.word	0x080181fc
 800e498:	08018528 	.word	0x08018528
 800e49c:	08018554 	.word	0x08018554
 800e4a0:	08018584 	.word	0x08018584
 800e4a4:	080185b8 	.word	0x080185b8
 800e4a8:	0801af90 	.word	0x0801af90
 800e4ac:	0801af80 	.word	0x0801af80
 800e4b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4bc:	2200      	movs	r2, #0
 800e4be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	bf28      	it	cs
 800e4d0:	4613      	movcs	r3, r2
 800e4d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e4d4:	8a7b      	ldrh	r3, [r7, #18]
 800e4d6:	085b      	lsrs	r3, r3, #1
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d206      	bcs.n	800e500 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	2200      	movs	r2, #0
 800e50e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e514:	f004 fd56 	bl	8012fc4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	7d1b      	ldrb	r3, [r3, #20]
 800e51c:	2b06      	cmp	r3, #6
 800e51e:	d111      	bne.n	800e544 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	8b5b      	ldrh	r3, [r3, #26]
 800e524:	f003 0310 	and.w	r3, r3, #16
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00b      	beq.n	800e544 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e52c:	4b9c      	ldr	r3, [pc, #624]	; (800e7a0 <tcp_slowtmr+0x580>)
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	6a1b      	ldr	r3, [r3, #32]
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	2b28      	cmp	r3, #40	; 0x28
 800e538:	d904      	bls.n	800e544 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e53e:	3301      	adds	r3, #1
 800e540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e546:	7a5b      	ldrb	r3, [r3, #9]
 800e548:	f003 0308 	and.w	r3, r3, #8
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d04a      	beq.n	800e5e6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e554:	2b04      	cmp	r3, #4
 800e556:	d003      	beq.n	800e560 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e55c:	2b07      	cmp	r3, #7
 800e55e:	d142      	bne.n	800e5e6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e560:	4b8f      	ldr	r3, [pc, #572]	; (800e7a0 <tcp_slowtmr+0x580>)
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	6a1b      	ldr	r3, [r3, #32]
 800e568:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e570:	4b8c      	ldr	r3, [pc, #560]	; (800e7a4 <tcp_slowtmr+0x584>)
 800e572:	440b      	add	r3, r1
 800e574:	498c      	ldr	r1, [pc, #560]	; (800e7a8 <tcp_slowtmr+0x588>)
 800e576:	fba1 1303 	umull	r1, r3, r1, r3
 800e57a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d90a      	bls.n	800e596 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e584:	3301      	adds	r3, #1
 800e586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e58a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e58e:	3301      	adds	r3, #1
 800e590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e594:	e027      	b.n	800e5e6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e596:	4b82      	ldr	r3, [pc, #520]	; (800e7a0 <tcp_slowtmr+0x580>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	4b7f      	ldr	r3, [pc, #508]	; (800e7ac <tcp_slowtmr+0x58c>)
 800e5b0:	fb03 f300 	mul.w	r3, r3, r0
 800e5b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5b6:	497c      	ldr	r1, [pc, #496]	; (800e7a8 <tcp_slowtmr+0x588>)
 800e5b8:	fba1 1303 	umull	r1, r3, r1, r3
 800e5bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d911      	bls.n	800e5e6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e5c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5c4:	f005 f804 	bl	80135d0 <tcp_keepalive>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e5ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d107      	bne.n	800e5e6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5dc:	3301      	adds	r3, #1
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d011      	beq.n	800e612 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e5ee:	4b6c      	ldr	r3, [pc, #432]	; (800e7a0 <tcp_slowtmr+0x580>)
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	1ad2      	subs	r2, r2, r3
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5fe:	4619      	mov	r1, r3
 800e600:	460b      	mov	r3, r1
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	440b      	add	r3, r1
 800e606:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e608:	429a      	cmp	r2, r3
 800e60a:	d302      	bcc.n	800e612 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e60c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e60e:	f000 fec3 	bl	800f398 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	7d1b      	ldrb	r3, [r3, #20]
 800e616:	2b03      	cmp	r3, #3
 800e618:	d10b      	bne.n	800e632 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e61a:	4b61      	ldr	r3, [pc, #388]	; (800e7a0 <tcp_slowtmr+0x580>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	2b28      	cmp	r3, #40	; 0x28
 800e626:	d904      	bls.n	800e632 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e62c:	3301      	adds	r3, #1
 800e62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	7d1b      	ldrb	r3, [r3, #20]
 800e636:	2b09      	cmp	r3, #9
 800e638:	d10b      	bne.n	800e652 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e63a:	4b59      	ldr	r3, [pc, #356]	; (800e7a0 <tcp_slowtmr+0x580>)
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	2bf0      	cmp	r3, #240	; 0xf0
 800e646:	d904      	bls.n	800e652 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e64c:	3301      	adds	r3, #1
 800e64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e656:	2b00      	cmp	r3, #0
 800e658:	d060      	beq.n	800e71c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e660:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e664:	f000 fce4 	bl	800f030 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d010      	beq.n	800e690 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e66e:	4b50      	ldr	r3, [pc, #320]	; (800e7b0 <tcp_slowtmr+0x590>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e674:	429a      	cmp	r2, r3
 800e676:	d106      	bne.n	800e686 <tcp_slowtmr+0x466>
 800e678:	4b4e      	ldr	r3, [pc, #312]	; (800e7b4 <tcp_slowtmr+0x594>)
 800e67a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e67e:	494e      	ldr	r1, [pc, #312]	; (800e7b8 <tcp_slowtmr+0x598>)
 800e680:	484e      	ldr	r0, [pc, #312]	; (800e7bc <tcp_slowtmr+0x59c>)
 800e682:	f007 ff77 	bl	8016574 <iprintf>
        prev->next = pcb->next;
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	68da      	ldr	r2, [r3, #12]
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	60da      	str	r2, [r3, #12]
 800e68e:	e00f      	b.n	800e6b0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e690:	4b47      	ldr	r3, [pc, #284]	; (800e7b0 <tcp_slowtmr+0x590>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e696:	429a      	cmp	r2, r3
 800e698:	d006      	beq.n	800e6a8 <tcp_slowtmr+0x488>
 800e69a:	4b46      	ldr	r3, [pc, #280]	; (800e7b4 <tcp_slowtmr+0x594>)
 800e69c:	f240 5271 	movw	r2, #1393	; 0x571
 800e6a0:	4947      	ldr	r1, [pc, #284]	; (800e7c0 <tcp_slowtmr+0x5a0>)
 800e6a2:	4846      	ldr	r0, [pc, #280]	; (800e7bc <tcp_slowtmr+0x59c>)
 800e6a4:	f007 ff66 	bl	8016574 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	4a40      	ldr	r2, [pc, #256]	; (800e7b0 <tcp_slowtmr+0x590>)
 800e6ae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e6b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d013      	beq.n	800e6e0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e6c0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6c8:	8ad2      	ldrh	r2, [r2, #22]
 800e6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6cc:	8b09      	ldrh	r1, [r1, #24]
 800e6ce:	9102      	str	r1, [sp, #8]
 800e6d0:	9201      	str	r2, [sp, #4]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	4622      	mov	r2, r4
 800e6d8:	4601      	mov	r1, r0
 800e6da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6dc:	f004 fec4 	bl	8013468 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e6f6:	6838      	ldr	r0, [r7, #0]
 800e6f8:	f7ff f83a 	bl	800d770 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e6fc:	4b31      	ldr	r3, [pc, #196]	; (800e7c4 <tcp_slowtmr+0x5a4>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d004      	beq.n	800e712 <tcp_slowtmr+0x4f2>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f06f 010c 	mvn.w	r1, #12
 800e70e:	68b8      	ldr	r0, [r7, #8]
 800e710:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e712:	4b2c      	ldr	r3, [pc, #176]	; (800e7c4 <tcp_slowtmr+0x5a4>)
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d037      	beq.n	800e78a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e71a:	e592      	b.n	800e242 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	7f1b      	ldrb	r3, [r3, #28]
 800e72a:	3301      	adds	r3, #1
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e730:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	7f1a      	ldrb	r2, [r3, #28]
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	7f5b      	ldrb	r3, [r3, #29]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d325      	bcc.n	800e78a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e740:	2200      	movs	r2, #0
 800e742:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e744:	4b1f      	ldr	r3, [pc, #124]	; (800e7c4 <tcp_slowtmr+0x5a4>)
 800e746:	2200      	movs	r2, #0
 800e748:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00b      	beq.n	800e76c <tcp_slowtmr+0x54c>
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e75c:	6912      	ldr	r2, [r2, #16]
 800e75e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e760:	4610      	mov	r0, r2
 800e762:	4798      	blx	r3
 800e764:	4603      	mov	r3, r0
 800e766:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e76a:	e002      	b.n	800e772 <tcp_slowtmr+0x552>
 800e76c:	2300      	movs	r3, #0
 800e76e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e772:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <tcp_slowtmr+0x5a4>)
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d000      	beq.n	800e77c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e77a:	e562      	b.n	800e242 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e77c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e780:	2b00      	cmp	r3, #0
 800e782:	d102      	bne.n	800e78a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e786:	f004 f8bb 	bl	8012900 <tcp_output>
  while (pcb != NULL) {
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f47f ad5e 	bne.w	800e24e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e792:	2300      	movs	r3, #0
 800e794:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e796:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <tcp_slowtmr+0x5a8>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e79c:	e069      	b.n	800e872 <tcp_slowtmr+0x652>
 800e79e:	bf00      	nop
 800e7a0:	24003618 	.word	0x24003618
 800e7a4:	000a4cb8 	.word	0x000a4cb8
 800e7a8:	10624dd3 	.word	0x10624dd3
 800e7ac:	000124f8 	.word	0x000124f8
 800e7b0:	24003614 	.word	0x24003614
 800e7b4:	080181b8 	.word	0x080181b8
 800e7b8:	080185f0 	.word	0x080185f0
 800e7bc:	080181fc 	.word	0x080181fc
 800e7c0:	0801861c 	.word	0x0801861c
 800e7c4:	24003610 	.word	0x24003610
 800e7c8:	24003624 	.word	0x24003624
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	7d1b      	ldrb	r3, [r3, #20]
 800e7d0:	2b0a      	cmp	r3, #10
 800e7d2:	d006      	beq.n	800e7e2 <tcp_slowtmr+0x5c2>
 800e7d4:	4b2b      	ldr	r3, [pc, #172]	; (800e884 <tcp_slowtmr+0x664>)
 800e7d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e7da:	492b      	ldr	r1, [pc, #172]	; (800e888 <tcp_slowtmr+0x668>)
 800e7dc:	482b      	ldr	r0, [pc, #172]	; (800e88c <tcp_slowtmr+0x66c>)
 800e7de:	f007 fec9 	bl	8016574 <iprintf>
    pcb_remove = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7e8:	4b29      	ldr	r3, [pc, #164]	; (800e890 <tcp_slowtmr+0x670>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ee:	6a1b      	ldr	r3, [r3, #32]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	2bf0      	cmp	r3, #240	; 0xf0
 800e7f4:	d904      	bls.n	800e800 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e7f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e804:	2b00      	cmp	r3, #0
 800e806:	d02f      	beq.n	800e868 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e80a:	f000 fc11 	bl	800f030 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	2b00      	cmp	r3, #0
 800e812:	d010      	beq.n	800e836 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e814:	4b1f      	ldr	r3, [pc, #124]	; (800e894 <tcp_slowtmr+0x674>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d106      	bne.n	800e82c <tcp_slowtmr+0x60c>
 800e81e:	4b19      	ldr	r3, [pc, #100]	; (800e884 <tcp_slowtmr+0x664>)
 800e820:	f240 52af 	movw	r2, #1455	; 0x5af
 800e824:	491c      	ldr	r1, [pc, #112]	; (800e898 <tcp_slowtmr+0x678>)
 800e826:	4819      	ldr	r0, [pc, #100]	; (800e88c <tcp_slowtmr+0x66c>)
 800e828:	f007 fea4 	bl	8016574 <iprintf>
        prev->next = pcb->next;
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	68da      	ldr	r2, [r3, #12]
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	60da      	str	r2, [r3, #12]
 800e834:	e00f      	b.n	800e856 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e836:	4b17      	ldr	r3, [pc, #92]	; (800e894 <tcp_slowtmr+0x674>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d006      	beq.n	800e84e <tcp_slowtmr+0x62e>
 800e840:	4b10      	ldr	r3, [pc, #64]	; (800e884 <tcp_slowtmr+0x664>)
 800e842:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e846:	4915      	ldr	r1, [pc, #84]	; (800e89c <tcp_slowtmr+0x67c>)
 800e848:	4810      	ldr	r0, [pc, #64]	; (800e88c <tcp_slowtmr+0x66c>)
 800e84a:	f007 fe93 	bl	8016574 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	4a10      	ldr	r2, [pc, #64]	; (800e894 <tcp_slowtmr+0x674>)
 800e854:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e860:	69f8      	ldr	r0, [r7, #28]
 800e862:	f7fe ff85 	bl	800d770 <tcp_free>
 800e866:	e004      	b.n	800e872 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1a9      	bne.n	800e7cc <tcp_slowtmr+0x5ac>
    }
  }
}
 800e878:	bf00      	nop
 800e87a:	bf00      	nop
 800e87c:	3730      	adds	r7, #48	; 0x30
 800e87e:	46bd      	mov	sp, r7
 800e880:	bdb0      	pop	{r4, r5, r7, pc}
 800e882:	bf00      	nop
 800e884:	080181b8 	.word	0x080181b8
 800e888:	08018648 	.word	0x08018648
 800e88c:	080181fc 	.word	0x080181fc
 800e890:	24003618 	.word	0x24003618
 800e894:	24003624 	.word	0x24003624
 800e898:	08018678 	.word	0x08018678
 800e89c:	080186a0 	.word	0x080186a0

0800e8a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8a6:	4b2d      	ldr	r3, [pc, #180]	; (800e95c <tcp_fasttmr+0xbc>)
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	4b2b      	ldr	r3, [pc, #172]	; (800e95c <tcp_fasttmr+0xbc>)
 800e8b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8b2:	4b2b      	ldr	r3, [pc, #172]	; (800e960 <tcp_fasttmr+0xc0>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8b8:	e048      	b.n	800e94c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	7f9a      	ldrb	r2, [r3, #30]
 800e8be:	4b27      	ldr	r3, [pc, #156]	; (800e95c <tcp_fasttmr+0xbc>)
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d03f      	beq.n	800e946 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e8c6:	4b25      	ldr	r3, [pc, #148]	; (800e95c <tcp_fasttmr+0xbc>)
 800e8c8:	781a      	ldrb	r2, [r3, #0]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	8b5b      	ldrh	r3, [r3, #26]
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d010      	beq.n	800e8fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8b5b      	ldrh	r3, [r3, #26]
 800e8de:	f043 0302 	orr.w	r3, r3, #2
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f004 f809 	bl	8012900 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8b5b      	ldrh	r3, [r3, #26]
 800e8f2:	f023 0303 	bic.w	r3, r3, #3
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	8b5b      	ldrh	r3, [r3, #26]
 800e900:	f003 0308 	and.w	r3, r3, #8
 800e904:	2b00      	cmp	r3, #0
 800e906:	d009      	beq.n	800e91c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8b5b      	ldrh	r3, [r3, #26]
 800e90c:	f023 0308 	bic.w	r3, r3, #8
 800e910:	b29a      	uxth	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7ff f8be 	bl	800da98 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00a      	beq.n	800e940 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e92a:	4b0e      	ldr	r3, [pc, #56]	; (800e964 <tcp_fasttmr+0xc4>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f819 	bl	800e968 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e936:	4b0b      	ldr	r3, [pc, #44]	; (800e964 <tcp_fasttmr+0xc4>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d000      	beq.n	800e940 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e93e:	e7b8      	b.n	800e8b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	607b      	str	r3, [r7, #4]
 800e944:	e002      	b.n	800e94c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1b3      	bne.n	800e8ba <tcp_fasttmr+0x1a>
    }
  }
}
 800e952:	bf00      	nop
 800e954:	bf00      	nop
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	240000f2 	.word	0x240000f2
 800e960:	24003614 	.word	0x24003614
 800e964:	24003610 	.word	0x24003610

0800e968 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e968:	b590      	push	{r4, r7, lr}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d109      	bne.n	800e98a <tcp_process_refused_data+0x22>
 800e976:	4b37      	ldr	r3, [pc, #220]	; (800ea54 <tcp_process_refused_data+0xec>)
 800e978:	f240 6209 	movw	r2, #1545	; 0x609
 800e97c:	4936      	ldr	r1, [pc, #216]	; (800ea58 <tcp_process_refused_data+0xf0>)
 800e97e:	4837      	ldr	r0, [pc, #220]	; (800ea5c <tcp_process_refused_data+0xf4>)
 800e980:	f007 fdf8 	bl	8016574 <iprintf>
 800e984:	f06f 030f 	mvn.w	r3, #15
 800e988:	e060      	b.n	800ea4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e98e:	7b5b      	ldrb	r3, [r3, #13]
 800e990:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e996:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00b      	beq.n	800e9c0 <tcp_process_refused_data+0x58>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6918      	ldr	r0, [r3, #16]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	6879      	ldr	r1, [r7, #4]
 800e9b8:	47a0      	blx	r4
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	73fb      	strb	r3, [r7, #15]
 800e9be:	e007      	b.n	800e9d0 <tcp_process_refused_data+0x68>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	6879      	ldr	r1, [r7, #4]
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	f000 f8c2 	bl	800eb50 <tcp_recv_null>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d12a      	bne.n	800ea2e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e9d8:	7bbb      	ldrb	r3, [r7, #14]
 800e9da:	f003 0320 	and.w	r3, r3, #32
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d033      	beq.n	800ea4a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9ea:	d005      	beq.n	800e9f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00b      	beq.n	800ea1a <tcp_process_refused_data+0xb2>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6918      	ldr	r0, [r3, #16]
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	2200      	movs	r2, #0
 800ea10:	6879      	ldr	r1, [r7, #4]
 800ea12:	47a0      	blx	r4
 800ea14:	4603      	mov	r3, r0
 800ea16:	73fb      	strb	r3, [r7, #15]
 800ea18:	e001      	b.n	800ea1e <tcp_process_refused_data+0xb6>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea22:	f113 0f0d 	cmn.w	r3, #13
 800ea26:	d110      	bne.n	800ea4a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea28:	f06f 030c 	mvn.w	r3, #12
 800ea2c:	e00e      	b.n	800ea4c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea32:	f113 0f0d 	cmn.w	r3, #13
 800ea36:	d102      	bne.n	800ea3e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea38:	f06f 030c 	mvn.w	r3, #12
 800ea3c:	e006      	b.n	800ea4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ea44:	f06f 0304 	mvn.w	r3, #4
 800ea48:	e000      	b.n	800ea4c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd90      	pop	{r4, r7, pc}
 800ea54:	080181b8 	.word	0x080181b8
 800ea58:	080186c8 	.word	0x080186c8
 800ea5c:	080181fc 	.word	0x080181fc

0800ea60 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea68:	e007      	b.n	800ea7a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 f80a 	bl	800ea8a <tcp_seg_free>
    seg = next;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1f4      	bne.n	800ea6a <tcp_segs_free+0xa>
  }
}
 800ea80:	bf00      	nop
 800ea82:	bf00      	nop
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00c      	beq.n	800eab2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d004      	beq.n	800eaaa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe fbb3 	bl	800d210 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eaaa:	6879      	ldr	r1, [r7, #4]
 800eaac:	2003      	movs	r0, #3
 800eaae:	f7fd fd39 	bl	800c524 <memp_free>
  }
}
 800eab2:	bf00      	nop
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
	...

0800eabc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d107      	bne.n	800eade <tcp_setprio+0x22>
 800eace:	4b07      	ldr	r3, [pc, #28]	; (800eaec <tcp_setprio+0x30>)
 800ead0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ead4:	4906      	ldr	r1, [pc, #24]	; (800eaf0 <tcp_setprio+0x34>)
 800ead6:	4807      	ldr	r0, [pc, #28]	; (800eaf4 <tcp_setprio+0x38>)
 800ead8:	f007 fd4c 	bl	8016574 <iprintf>
 800eadc:	e002      	b.n	800eae4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	78fa      	ldrb	r2, [r7, #3]
 800eae2:	755a      	strb	r2, [r3, #21]
}
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	080181b8 	.word	0x080181b8
 800eaf0:	080186f0 	.word	0x080186f0
 800eaf4:	080181fc 	.word	0x080181fc

0800eaf8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d106      	bne.n	800eb14 <tcp_seg_copy+0x1c>
 800eb06:	4b0f      	ldr	r3, [pc, #60]	; (800eb44 <tcp_seg_copy+0x4c>)
 800eb08:	f240 6282 	movw	r2, #1666	; 0x682
 800eb0c:	490e      	ldr	r1, [pc, #56]	; (800eb48 <tcp_seg_copy+0x50>)
 800eb0e:	480f      	ldr	r0, [pc, #60]	; (800eb4c <tcp_seg_copy+0x54>)
 800eb10:	f007 fd30 	bl	8016574 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb14:	2003      	movs	r0, #3
 800eb16:	f7fd fc95 	bl	800c444 <memp_malloc>
 800eb1a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <tcp_seg_copy+0x2e>
    return NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e00a      	b.n	800eb3c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb26:	2210      	movs	r2, #16
 800eb28:	6879      	ldr	r1, [r7, #4]
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f007 fd0c 	bl	8016548 <memcpy>
  pbuf_ref(cseg->p);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe fc0b 	bl	800d350 <pbuf_ref>
  return cseg;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	080181b8 	.word	0x080181b8
 800eb48:	0801870c 	.word	0x0801870c
 800eb4c:	080181fc 	.word	0x080181fc

0800eb50 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <tcp_recv_null+0x28>
 800eb64:	4b12      	ldr	r3, [pc, #72]	; (800ebb0 <tcp_recv_null+0x60>)
 800eb66:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eb6a:	4912      	ldr	r1, [pc, #72]	; (800ebb4 <tcp_recv_null+0x64>)
 800eb6c:	4812      	ldr	r0, [pc, #72]	; (800ebb8 <tcp_recv_null+0x68>)
 800eb6e:	f007 fd01 	bl	8016574 <iprintf>
 800eb72:	f06f 030f 	mvn.w	r3, #15
 800eb76:	e016      	b.n	800eba6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d009      	beq.n	800eb92 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	891b      	ldrh	r3, [r3, #8]
 800eb82:	4619      	mov	r1, r3
 800eb84:	68b8      	ldr	r0, [r7, #8]
 800eb86:	f7ff fab5 	bl	800e0f4 <tcp_recved>
    pbuf_free(p);
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7fe fb40 	bl	800d210 <pbuf_free>
 800eb90:	e008      	b.n	800eba4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eb92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d104      	bne.n	800eba4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eb9a:	68b8      	ldr	r0, [r7, #8]
 800eb9c:	f7fe ffe6 	bl	800db6c <tcp_close>
 800eba0:	4603      	mov	r3, r0
 800eba2:	e000      	b.n	800eba6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	080181b8 	.word	0x080181b8
 800ebb4:	08018728 	.word	0x08018728
 800ebb8:	080181fc 	.word	0x080181fc

0800ebbc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ebc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	db01      	blt.n	800ebd2 <tcp_kill_prio+0x16>
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	e000      	b.n	800ebd4 <tcp_kill_prio+0x18>
 800ebd2:	237f      	movs	r3, #127	; 0x7f
 800ebd4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ebd6:	7afb      	ldrb	r3, [r7, #11]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d034      	beq.n	800ec46 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ebdc:	7afb      	ldrb	r3, [r7, #11]
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebea:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <tcp_kill_prio+0x94>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	617b      	str	r3, [r7, #20]
 800ebf0:	e01f      	b.n	800ec32 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	7d5b      	ldrb	r3, [r3, #21]
 800ebf6:	7afa      	ldrb	r2, [r7, #11]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d80c      	bhi.n	800ec16 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ec00:	7afa      	ldrb	r2, [r7, #11]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d112      	bne.n	800ec2c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec06:	4b13      	ldr	r3, [pc, #76]	; (800ec54 <tcp_kill_prio+0x98>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d80a      	bhi.n	800ec2c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec16:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <tcp_kill_prio+0x98>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	7d5b      	ldrb	r3, [r3, #21]
 800ec2a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1dc      	bne.n	800ebf2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d004      	beq.n	800ec48 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec3e:	6938      	ldr	r0, [r7, #16]
 800ec40:	f7ff f87e 	bl	800dd40 <tcp_abort>
 800ec44:	e000      	b.n	800ec48 <tcp_kill_prio+0x8c>
    return;
 800ec46:	bf00      	nop
  }
}
 800ec48:	3718      	adds	r7, #24
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	24003614 	.word	0x24003614
 800ec54:	24003618 	.word	0x24003618

0800ec58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec62:	79fb      	ldrb	r3, [r7, #7]
 800ec64:	2b08      	cmp	r3, #8
 800ec66:	d009      	beq.n	800ec7c <tcp_kill_state+0x24>
 800ec68:	79fb      	ldrb	r3, [r7, #7]
 800ec6a:	2b09      	cmp	r3, #9
 800ec6c:	d006      	beq.n	800ec7c <tcp_kill_state+0x24>
 800ec6e:	4b1a      	ldr	r3, [pc, #104]	; (800ecd8 <tcp_kill_state+0x80>)
 800ec70:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ec74:	4919      	ldr	r1, [pc, #100]	; (800ecdc <tcp_kill_state+0x84>)
 800ec76:	481a      	ldr	r0, [pc, #104]	; (800ece0 <tcp_kill_state+0x88>)
 800ec78:	f007 fc7c 	bl	8016574 <iprintf>

  inactivity = 0;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec80:	2300      	movs	r3, #0
 800ec82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec84:	4b17      	ldr	r3, [pc, #92]	; (800ece4 <tcp_kill_state+0x8c>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	e017      	b.n	800ecbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	7d1b      	ldrb	r3, [r3, #20]
 800ec90:	79fa      	ldrb	r2, [r7, #7]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d10f      	bne.n	800ecb6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec96:	4b14      	ldr	r3, [pc, #80]	; (800ece8 <tcp_kill_state+0x90>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d807      	bhi.n	800ecb6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eca6:	4b10      	ldr	r3, [pc, #64]	; (800ece8 <tcp_kill_state+0x90>)
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	6a1b      	ldr	r3, [r3, #32]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	617b      	str	r3, [r7, #20]
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1e4      	bne.n	800ec8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d003      	beq.n	800ecd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ecc8:	2100      	movs	r1, #0
 800ecca:	6938      	ldr	r0, [r7, #16]
 800eccc:	f7fe ff7a 	bl	800dbc4 <tcp_abandon>
  }
}
 800ecd0:	bf00      	nop
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	080181b8 	.word	0x080181b8
 800ecdc:	08018744 	.word	0x08018744
 800ece0:	080181fc 	.word	0x080181fc
 800ece4:	24003614 	.word	0x24003614
 800ece8:	24003618 	.word	0x24003618

0800ecec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecfa:	4b12      	ldr	r3, [pc, #72]	; (800ed44 <tcp_kill_timewait+0x58>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	60fb      	str	r3, [r7, #12]
 800ed00:	e012      	b.n	800ed28 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed02:	4b11      	ldr	r3, [pc, #68]	; (800ed48 <tcp_kill_timewait+0x5c>)
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d807      	bhi.n	800ed22 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed12:	4b0d      	ldr	r3, [pc, #52]	; (800ed48 <tcp_kill_timewait+0x5c>)
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	60fb      	str	r3, [r7, #12]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d1e9      	bne.n	800ed02 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed34:	68b8      	ldr	r0, [r7, #8]
 800ed36:	f7ff f803 	bl	800dd40 <tcp_abort>
  }
}
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	24003624 	.word	0x24003624
 800ed48:	24003618 	.word	0x24003618

0800ed4c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed52:	4b10      	ldr	r3, [pc, #64]	; (800ed94 <tcp_handle_closepend+0x48>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed58:	e014      	b.n	800ed84 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	8b5b      	ldrh	r3, [r3, #26]
 800ed64:	f003 0308 	and.w	r3, r3, #8
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d009      	beq.n	800ed80 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	8b5b      	ldrh	r3, [r3, #26]
 800ed70:	f023 0308 	bic.w	r3, r3, #8
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7fe fe8c 	bl	800da98 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1e7      	bne.n	800ed5a <tcp_handle_closepend+0xe>
  }
}
 800ed8a:	bf00      	nop
 800ed8c:	bf00      	nop
 800ed8e:	3708      	adds	r7, #8
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	24003614 	.word	0x24003614

0800ed98 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eda2:	2001      	movs	r0, #1
 800eda4:	f7fd fb4e 	bl	800c444 <memp_malloc>
 800eda8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d126      	bne.n	800edfe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800edb0:	f7ff ffcc 	bl	800ed4c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800edb4:	f7ff ff9a 	bl	800ecec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edb8:	2001      	movs	r0, #1
 800edba:	f7fd fb43 	bl	800c444 <memp_malloc>
 800edbe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d11b      	bne.n	800edfe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800edc6:	2009      	movs	r0, #9
 800edc8:	f7ff ff46 	bl	800ec58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edcc:	2001      	movs	r0, #1
 800edce:	f7fd fb39 	bl	800c444 <memp_malloc>
 800edd2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d111      	bne.n	800edfe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edda:	2008      	movs	r0, #8
 800eddc:	f7ff ff3c 	bl	800ec58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ede0:	2001      	movs	r0, #1
 800ede2:	f7fd fb2f 	bl	800c444 <memp_malloc>
 800ede6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d107      	bne.n	800edfe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff fee3 	bl	800ebbc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edf6:	2001      	movs	r0, #1
 800edf8:	f7fd fb24 	bl	800c444 <memp_malloc>
 800edfc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d03f      	beq.n	800ee84 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ee04:	229c      	movs	r2, #156	; 0x9c
 800ee06:	2100      	movs	r1, #0
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f007 fbab 	bl	8016564 <memset>
    pcb->prio = prio;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	79fa      	ldrb	r2, [r7, #7]
 800ee12:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee24:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	22ff      	movs	r2, #255	; 0xff
 800ee32:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee3a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2206      	movs	r2, #6
 800ee40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2206      	movs	r2, #6
 800ee48:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee50:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2201      	movs	r2, #1
 800ee56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ee5a:	4b0d      	ldr	r3, [pc, #52]	; (800ee90 <tcp_alloc+0xf8>)
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee62:	4b0c      	ldr	r3, [pc, #48]	; (800ee94 <tcp_alloc+0xfc>)
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	4a08      	ldr	r2, [pc, #32]	; (800ee98 <tcp_alloc+0x100>)
 800ee78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4a07      	ldr	r2, [pc, #28]	; (800ee9c <tcp_alloc+0x104>)
 800ee80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee84:	68fb      	ldr	r3, [r7, #12]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	24003618 	.word	0x24003618
 800ee94:	240000f2 	.word	0x240000f2
 800ee98:	0800eb51 	.word	0x0800eb51
 800ee9c:	006ddd00 	.word	0x006ddd00

0800eea0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800eea4:	2040      	movs	r0, #64	; 0x40
 800eea6:	f7ff ff77 	bl	800ed98 <tcp_alloc>
 800eeaa:	4603      	mov	r3, r0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d002      	beq.n	800eec6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	611a      	str	r2, [r3, #16]
  }
}
 800eec6:	bf00      	nop
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
	...

0800eed4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00e      	beq.n	800ef02 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d106      	bne.n	800eefa <tcp_recv+0x26>
 800eeec:	4b07      	ldr	r3, [pc, #28]	; (800ef0c <tcp_recv+0x38>)
 800eeee:	f240 72df 	movw	r2, #2015	; 0x7df
 800eef2:	4907      	ldr	r1, [pc, #28]	; (800ef10 <tcp_recv+0x3c>)
 800eef4:	4807      	ldr	r0, [pc, #28]	; (800ef14 <tcp_recv+0x40>)
 800eef6:	f007 fb3d 	bl	8016574 <iprintf>
    pcb->recv = recv;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ef02:	bf00      	nop
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	080181b8 	.word	0x080181b8
 800ef10:	08018754 	.word	0x08018754
 800ef14:	080181fc 	.word	0x080181fc

0800ef18 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00e      	beq.n	800ef46 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	7d1b      	ldrb	r3, [r3, #20]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d106      	bne.n	800ef3e <tcp_sent+0x26>
 800ef30:	4b07      	ldr	r3, [pc, #28]	; (800ef50 <tcp_sent+0x38>)
 800ef32:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ef36:	4907      	ldr	r1, [pc, #28]	; (800ef54 <tcp_sent+0x3c>)
 800ef38:	4807      	ldr	r0, [pc, #28]	; (800ef58 <tcp_sent+0x40>)
 800ef3a:	f007 fb1b 	bl	8016574 <iprintf>
    pcb->sent = sent;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ef46:	bf00      	nop
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	080181b8 	.word	0x080181b8
 800ef54:	0801877c 	.word	0x0801877c
 800ef58:	080181fc 	.word	0x080181fc

0800ef5c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00e      	beq.n	800ef8a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	7d1b      	ldrb	r3, [r3, #20]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d106      	bne.n	800ef82 <tcp_err+0x26>
 800ef74:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <tcp_err+0x38>)
 800ef76:	f640 020d 	movw	r2, #2061	; 0x80d
 800ef7a:	4907      	ldr	r1, [pc, #28]	; (800ef98 <tcp_err+0x3c>)
 800ef7c:	4807      	ldr	r0, [pc, #28]	; (800ef9c <tcp_err+0x40>)
 800ef7e:	f007 faf9 	bl	8016574 <iprintf>
    pcb->errf = err;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	683a      	ldr	r2, [r7, #0]
 800ef86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ef8a:	bf00      	nop
 800ef8c:	3708      	adds	r7, #8
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	080181b8 	.word	0x080181b8
 800ef98:	080187a4 	.word	0x080187a4
 800ef9c:	080181fc 	.word	0x080181fc

0800efa0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d008      	beq.n	800efc2 <tcp_accept+0x22>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	7d1b      	ldrb	r3, [r3, #20]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d104      	bne.n	800efc2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	683a      	ldr	r2, [r7, #0]
 800efc0:	619a      	str	r2, [r3, #24]
  }
}
 800efc2:	bf00      	nop
 800efc4:	3714      	adds	r7, #20
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
	...

0800efd0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	4613      	mov	r3, r2
 800efdc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d107      	bne.n	800eff4 <tcp_poll+0x24>
 800efe4:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <tcp_poll+0x50>)
 800efe6:	f640 023d 	movw	r2, #2109	; 0x83d
 800efea:	490e      	ldr	r1, [pc, #56]	; (800f024 <tcp_poll+0x54>)
 800efec:	480e      	ldr	r0, [pc, #56]	; (800f028 <tcp_poll+0x58>)
 800efee:	f007 fac1 	bl	8016574 <iprintf>
 800eff2:	e011      	b.n	800f018 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	7d1b      	ldrb	r3, [r3, #20]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d106      	bne.n	800f00a <tcp_poll+0x3a>
 800effc:	4b08      	ldr	r3, [pc, #32]	; (800f020 <tcp_poll+0x50>)
 800effe:	f640 023e 	movw	r2, #2110	; 0x83e
 800f002:	490a      	ldr	r1, [pc, #40]	; (800f02c <tcp_poll+0x5c>)
 800f004:	4808      	ldr	r0, [pc, #32]	; (800f028 <tcp_poll+0x58>)
 800f006:	f007 fab5 	bl	8016574 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	79fa      	ldrb	r2, [r7, #7]
 800f016:	775a      	strb	r2, [r3, #29]
}
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	080181b8 	.word	0x080181b8
 800f024:	080187cc 	.word	0x080187cc
 800f028:	080181fc 	.word	0x080181fc
 800f02c:	080187e4 	.word	0x080187e4

0800f030 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d107      	bne.n	800f04e <tcp_pcb_purge+0x1e>
 800f03e:	4b21      	ldr	r3, [pc, #132]	; (800f0c4 <tcp_pcb_purge+0x94>)
 800f040:	f640 0251 	movw	r2, #2129	; 0x851
 800f044:	4920      	ldr	r1, [pc, #128]	; (800f0c8 <tcp_pcb_purge+0x98>)
 800f046:	4821      	ldr	r0, [pc, #132]	; (800f0cc <tcp_pcb_purge+0x9c>)
 800f048:	f007 fa94 	bl	8016574 <iprintf>
 800f04c:	e037      	b.n	800f0be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	7d1b      	ldrb	r3, [r3, #20]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d033      	beq.n	800f0be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f05a:	2b0a      	cmp	r3, #10
 800f05c:	d02f      	beq.n	800f0be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f062:	2b01      	cmp	r3, #1
 800f064:	d02b      	beq.n	800f0be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d007      	beq.n	800f07e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f072:	4618      	mov	r0, r3
 800f074:	f7fe f8cc 	bl	800d210 <pbuf_free>
      pcb->refused_data = NULL;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f082:	2b00      	cmp	r3, #0
 800f084:	d002      	beq.n	800f08c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f986 	bl	800f398 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f092:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f098:	4618      	mov	r0, r3
 800f09a:	f7ff fce1 	bl	800ea60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff fcdc 	bl	800ea60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	66da      	str	r2, [r3, #108]	; 0x6c
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	080181b8 	.word	0x080181b8
 800f0c8:	08018804 	.word	0x08018804
 800f0cc:	080181fc 	.word	0x080181fc

0800f0d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d106      	bne.n	800f0ee <tcp_pcb_remove+0x1e>
 800f0e0:	4b3e      	ldr	r3, [pc, #248]	; (800f1dc <tcp_pcb_remove+0x10c>)
 800f0e2:	f640 0283 	movw	r2, #2179	; 0x883
 800f0e6:	493e      	ldr	r1, [pc, #248]	; (800f1e0 <tcp_pcb_remove+0x110>)
 800f0e8:	483e      	ldr	r0, [pc, #248]	; (800f1e4 <tcp_pcb_remove+0x114>)
 800f0ea:	f007 fa43 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d106      	bne.n	800f102 <tcp_pcb_remove+0x32>
 800f0f4:	4b39      	ldr	r3, [pc, #228]	; (800f1dc <tcp_pcb_remove+0x10c>)
 800f0f6:	f640 0284 	movw	r2, #2180	; 0x884
 800f0fa:	493b      	ldr	r1, [pc, #236]	; (800f1e8 <tcp_pcb_remove+0x118>)
 800f0fc:	4839      	ldr	r0, [pc, #228]	; (800f1e4 <tcp_pcb_remove+0x114>)
 800f0fe:	f007 fa39 	bl	8016574 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d105      	bne.n	800f118 <tcp_pcb_remove+0x48>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	68da      	ldr	r2, [r3, #12]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	e013      	b.n	800f140 <tcp_pcb_remove+0x70>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	e00c      	b.n	800f13a <tcp_pcb_remove+0x6a>
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	429a      	cmp	r2, r3
 800f128:	d104      	bne.n	800f134 <tcp_pcb_remove+0x64>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	68da      	ldr	r2, [r3, #12]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	60da      	str	r2, [r3, #12]
 800f132:	e005      	b.n	800f140 <tcp_pcb_remove+0x70>
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	60fb      	str	r3, [r7, #12]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1ef      	bne.n	800f120 <tcp_pcb_remove+0x50>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2200      	movs	r2, #0
 800f144:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f146:	6838      	ldr	r0, [r7, #0]
 800f148:	f7ff ff72 	bl	800f030 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	7d1b      	ldrb	r3, [r3, #20]
 800f150:	2b0a      	cmp	r3, #10
 800f152:	d013      	beq.n	800f17c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d00f      	beq.n	800f17c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	8b5b      	ldrh	r3, [r3, #26]
 800f160:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f164:	2b00      	cmp	r3, #0
 800f166:	d009      	beq.n	800f17c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	8b5b      	ldrh	r3, [r3, #26]
 800f16c:	f043 0302 	orr.w	r3, r3, #2
 800f170:	b29a      	uxth	r2, r3
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f176:	6838      	ldr	r0, [r7, #0]
 800f178:	f003 fbc2 	bl	8012900 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	7d1b      	ldrb	r3, [r3, #20]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d020      	beq.n	800f1c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d006      	beq.n	800f19a <tcp_pcb_remove+0xca>
 800f18c:	4b13      	ldr	r3, [pc, #76]	; (800f1dc <tcp_pcb_remove+0x10c>)
 800f18e:	f640 0293 	movw	r2, #2195	; 0x893
 800f192:	4916      	ldr	r1, [pc, #88]	; (800f1ec <tcp_pcb_remove+0x11c>)
 800f194:	4813      	ldr	r0, [pc, #76]	; (800f1e4 <tcp_pcb_remove+0x114>)
 800f196:	f007 f9ed 	bl	8016574 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d006      	beq.n	800f1b0 <tcp_pcb_remove+0xe0>
 800f1a2:	4b0e      	ldr	r3, [pc, #56]	; (800f1dc <tcp_pcb_remove+0x10c>)
 800f1a4:	f640 0294 	movw	r2, #2196	; 0x894
 800f1a8:	4911      	ldr	r1, [pc, #68]	; (800f1f0 <tcp_pcb_remove+0x120>)
 800f1aa:	480e      	ldr	r0, [pc, #56]	; (800f1e4 <tcp_pcb_remove+0x114>)
 800f1ac:	f007 f9e2 	bl	8016574 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d006      	beq.n	800f1c6 <tcp_pcb_remove+0xf6>
 800f1b8:	4b08      	ldr	r3, [pc, #32]	; (800f1dc <tcp_pcb_remove+0x10c>)
 800f1ba:	f640 0296 	movw	r2, #2198	; 0x896
 800f1be:	490d      	ldr	r1, [pc, #52]	; (800f1f4 <tcp_pcb_remove+0x124>)
 800f1c0:	4808      	ldr	r0, [pc, #32]	; (800f1e4 <tcp_pcb_remove+0x114>)
 800f1c2:	f007 f9d7 	bl	8016574 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f1d2:	bf00      	nop
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	080181b8 	.word	0x080181b8
 800f1e0:	08018820 	.word	0x08018820
 800f1e4:	080181fc 	.word	0x080181fc
 800f1e8:	0801883c 	.word	0x0801883c
 800f1ec:	0801885c 	.word	0x0801885c
 800f1f0:	08018874 	.word	0x08018874
 800f1f4:	08018890 	.word	0x08018890

0800f1f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d106      	bne.n	800f214 <tcp_next_iss+0x1c>
 800f206:	4b0a      	ldr	r3, [pc, #40]	; (800f230 <tcp_next_iss+0x38>)
 800f208:	f640 02af 	movw	r2, #2223	; 0x8af
 800f20c:	4909      	ldr	r1, [pc, #36]	; (800f234 <tcp_next_iss+0x3c>)
 800f20e:	480a      	ldr	r0, [pc, #40]	; (800f238 <tcp_next_iss+0x40>)
 800f210:	f007 f9b0 	bl	8016574 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f214:	4b09      	ldr	r3, [pc, #36]	; (800f23c <tcp_next_iss+0x44>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	4b09      	ldr	r3, [pc, #36]	; (800f240 <tcp_next_iss+0x48>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4413      	add	r3, r2
 800f21e:	4a07      	ldr	r2, [pc, #28]	; (800f23c <tcp_next_iss+0x44>)
 800f220:	6013      	str	r3, [r2, #0]
  return iss;
 800f222:	4b06      	ldr	r3, [pc, #24]	; (800f23c <tcp_next_iss+0x44>)
 800f224:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f226:	4618      	mov	r0, r3
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	080181b8 	.word	0x080181b8
 800f234:	080188a8 	.word	0x080188a8
 800f238:	080181fc 	.word	0x080181fc
 800f23c:	24000030 	.word	0x24000030
 800f240:	24003618 	.word	0x24003618

0800f244 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b086      	sub	sp, #24
 800f248:	af00      	add	r7, sp, #0
 800f24a:	4603      	mov	r3, r0
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
 800f250:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d106      	bne.n	800f266 <tcp_eff_send_mss_netif+0x22>
 800f258:	4b14      	ldr	r3, [pc, #80]	; (800f2ac <tcp_eff_send_mss_netif+0x68>)
 800f25a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f25e:	4914      	ldr	r1, [pc, #80]	; (800f2b0 <tcp_eff_send_mss_netif+0x6c>)
 800f260:	4814      	ldr	r0, [pc, #80]	; (800f2b4 <tcp_eff_send_mss_netif+0x70>)
 800f262:	f007 f987 	bl	8016574 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f26c:	89fb      	ldrh	r3, [r7, #14]
 800f26e:	e019      	b.n	800f2a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f274:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f276:	8afb      	ldrh	r3, [r7, #22]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d012      	beq.n	800f2a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f27c:	2328      	movs	r3, #40	; 0x28
 800f27e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f280:	8afa      	ldrh	r2, [r7, #22]
 800f282:	8abb      	ldrh	r3, [r7, #20]
 800f284:	429a      	cmp	r2, r3
 800f286:	d904      	bls.n	800f292 <tcp_eff_send_mss_netif+0x4e>
 800f288:	8afa      	ldrh	r2, [r7, #22]
 800f28a:	8abb      	ldrh	r3, [r7, #20]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	b29b      	uxth	r3, r3
 800f290:	e000      	b.n	800f294 <tcp_eff_send_mss_netif+0x50>
 800f292:	2300      	movs	r3, #0
 800f294:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f296:	8a7a      	ldrh	r2, [r7, #18]
 800f298:	89fb      	ldrh	r3, [r7, #14]
 800f29a:	4293      	cmp	r3, r2
 800f29c:	bf28      	it	cs
 800f29e:	4613      	movcs	r3, r2
 800f2a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f2a2:	89fb      	ldrh	r3, [r7, #14]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}
 800f2ac:	080181b8 	.word	0x080181b8
 800f2b0:	080188c4 	.word	0x080188c4
 800f2b4:	080181fc 	.word	0x080181fc

0800f2b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d119      	bne.n	800f300 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f2cc:	4b10      	ldr	r3, [pc, #64]	; (800f310 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f2ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f2d2:	4910      	ldr	r1, [pc, #64]	; (800f314 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f2d4:	4810      	ldr	r0, [pc, #64]	; (800f318 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f2d6:	f007 f94d 	bl	8016574 <iprintf>

  while (pcb != NULL) {
 800f2da:	e011      	b.n	800f300 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d108      	bne.n	800f2fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f7fe fd26 	bl	800dd40 <tcp_abort>
      pcb = next;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	e002      	b.n	800f300 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1ea      	bne.n	800f2dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f306:	bf00      	nop
 800f308:	bf00      	nop
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	080181b8 	.word	0x080181b8
 800f314:	080188ec 	.word	0x080188ec
 800f318:	080181fc 	.word	0x080181fc

0800f31c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d02a      	beq.n	800f382 <tcp_netif_ip_addr_changed+0x66>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d026      	beq.n	800f382 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f334:	4b15      	ldr	r3, [pc, #84]	; (800f38c <tcp_netif_ip_addr_changed+0x70>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff ffbc 	bl	800f2b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f340:	4b13      	ldr	r3, [pc, #76]	; (800f390 <tcp_netif_ip_addr_changed+0x74>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4619      	mov	r1, r3
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7ff ffb6 	bl	800f2b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d017      	beq.n	800f382 <tcp_netif_ip_addr_changed+0x66>
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d013      	beq.n	800f382 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f35a:	4b0e      	ldr	r3, [pc, #56]	; (800f394 <tcp_netif_ip_addr_changed+0x78>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	60fb      	str	r3, [r7, #12]
 800f360:	e00c      	b.n	800f37c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d103      	bne.n	800f376 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	60fb      	str	r3, [r7, #12]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d1ef      	bne.n	800f362 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f382:	bf00      	nop
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	24003614 	.word	0x24003614
 800f390:	24003620 	.word	0x24003620
 800f394:	2400361c 	.word	0x2400361c

0800f398 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d007      	beq.n	800f3b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7ff fb57 	bl	800ea60 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f3b8:	bf00      	nop
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f3c0:	b590      	push	{r4, r7, lr}
 800f3c2:	b08d      	sub	sp, #52	; 0x34
 800f3c4:	af04      	add	r7, sp, #16
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d105      	bne.n	800f3dc <tcp_input+0x1c>
 800f3d0:	4b9b      	ldr	r3, [pc, #620]	; (800f640 <tcp_input+0x280>)
 800f3d2:	2283      	movs	r2, #131	; 0x83
 800f3d4:	499b      	ldr	r1, [pc, #620]	; (800f644 <tcp_input+0x284>)
 800f3d6:	489c      	ldr	r0, [pc, #624]	; (800f648 <tcp_input+0x288>)
 800f3d8:	f007 f8cc 	bl	8016574 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	4a9a      	ldr	r2, [pc, #616]	; (800f64c <tcp_input+0x28c>)
 800f3e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	895b      	ldrh	r3, [r3, #10]
 800f3e8:	2b13      	cmp	r3, #19
 800f3ea:	f240 83c4 	bls.w	800fb76 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3ee:	4b98      	ldr	r3, [pc, #608]	; (800f650 <tcp_input+0x290>)
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	4a97      	ldr	r2, [pc, #604]	; (800f650 <tcp_input+0x290>)
 800f3f4:	6812      	ldr	r2, [r2, #0]
 800f3f6:	4611      	mov	r1, r2
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f006 f891 	bl	8015520 <ip4_addr_isbroadcast_u32>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b00      	cmp	r3, #0
 800f402:	f040 83ba 	bne.w	800fb7a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f406:	4b92      	ldr	r3, [pc, #584]	; (800f650 <tcp_input+0x290>)
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f40e:	2be0      	cmp	r3, #224	; 0xe0
 800f410:	f000 83b3 	beq.w	800fb7a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f414:	4b8d      	ldr	r3, [pc, #564]	; (800f64c <tcp_input+0x28c>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	899b      	ldrh	r3, [r3, #12]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fc fae1 	bl	800b9e4 <lwip_htons>
 800f422:	4603      	mov	r3, r0
 800f424:	0b1b      	lsrs	r3, r3, #12
 800f426:	b29b      	uxth	r3, r3
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f42e:	7cbb      	ldrb	r3, [r7, #18]
 800f430:	2b13      	cmp	r3, #19
 800f432:	f240 83a4 	bls.w	800fb7e <tcp_input+0x7be>
 800f436:	7cbb      	ldrb	r3, [r7, #18]
 800f438:	b29a      	uxth	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	891b      	ldrh	r3, [r3, #8]
 800f43e:	429a      	cmp	r2, r3
 800f440:	f200 839d 	bhi.w	800fb7e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f444:	7cbb      	ldrb	r3, [r7, #18]
 800f446:	b29b      	uxth	r3, r3
 800f448:	3b14      	subs	r3, #20
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	4b81      	ldr	r3, [pc, #516]	; (800f654 <tcp_input+0x294>)
 800f44e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f450:	4b81      	ldr	r3, [pc, #516]	; (800f658 <tcp_input+0x298>)
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	895a      	ldrh	r2, [r3, #10]
 800f45a:	7cbb      	ldrb	r3, [r7, #18]
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	429a      	cmp	r2, r3
 800f460:	d309      	bcc.n	800f476 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f462:	4b7c      	ldr	r3, [pc, #496]	; (800f654 <tcp_input+0x294>)
 800f464:	881a      	ldrh	r2, [r3, #0]
 800f466:	4b7d      	ldr	r3, [pc, #500]	; (800f65c <tcp_input+0x29c>)
 800f468:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f46a:	7cbb      	ldrb	r3, [r7, #18]
 800f46c:	4619      	mov	r1, r3
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7fd fe48 	bl	800d104 <pbuf_remove_header>
 800f474:	e04e      	b.n	800f514 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d105      	bne.n	800f48a <tcp_input+0xca>
 800f47e:	4b70      	ldr	r3, [pc, #448]	; (800f640 <tcp_input+0x280>)
 800f480:	22c2      	movs	r2, #194	; 0xc2
 800f482:	4977      	ldr	r1, [pc, #476]	; (800f660 <tcp_input+0x2a0>)
 800f484:	4870      	ldr	r0, [pc, #448]	; (800f648 <tcp_input+0x288>)
 800f486:	f007 f875 	bl	8016574 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f48a:	2114      	movs	r1, #20
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7fd fe39 	bl	800d104 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	895a      	ldrh	r2, [r3, #10]
 800f496:	4b71      	ldr	r3, [pc, #452]	; (800f65c <tcp_input+0x29c>)
 800f498:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f49a:	4b6e      	ldr	r3, [pc, #440]	; (800f654 <tcp_input+0x294>)
 800f49c:	881a      	ldrh	r2, [r3, #0]
 800f49e:	4b6f      	ldr	r3, [pc, #444]	; (800f65c <tcp_input+0x29c>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f4a6:	4b6d      	ldr	r3, [pc, #436]	; (800f65c <tcp_input+0x29c>)
 800f4a8:	881b      	ldrh	r3, [r3, #0]
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7fd fe29 	bl	800d104 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	895b      	ldrh	r3, [r3, #10]
 800f4b8:	8a3a      	ldrh	r2, [r7, #16]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	f200 8361 	bhi.w	800fb82 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	4a64      	ldr	r2, [pc, #400]	; (800f658 <tcp_input+0x298>)
 800f4c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	8a3a      	ldrh	r2, [r7, #16]
 800f4d0:	4611      	mov	r1, r2
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fd fe16 	bl	800d104 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	891a      	ldrh	r2, [r3, #8]
 800f4dc:	8a3b      	ldrh	r3, [r7, #16]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	895b      	ldrh	r3, [r3, #10]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d005      	beq.n	800f4fa <tcp_input+0x13a>
 800f4ee:	4b54      	ldr	r3, [pc, #336]	; (800f640 <tcp_input+0x280>)
 800f4f0:	22df      	movs	r2, #223	; 0xdf
 800f4f2:	495c      	ldr	r1, [pc, #368]	; (800f664 <tcp_input+0x2a4>)
 800f4f4:	4854      	ldr	r0, [pc, #336]	; (800f648 <tcp_input+0x288>)
 800f4f6:	f007 f83d 	bl	8016574 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	891a      	ldrh	r2, [r3, #8]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	891b      	ldrh	r3, [r3, #8]
 800f504:	429a      	cmp	r2, r3
 800f506:	d005      	beq.n	800f514 <tcp_input+0x154>
 800f508:	4b4d      	ldr	r3, [pc, #308]	; (800f640 <tcp_input+0x280>)
 800f50a:	22e0      	movs	r2, #224	; 0xe0
 800f50c:	4956      	ldr	r1, [pc, #344]	; (800f668 <tcp_input+0x2a8>)
 800f50e:	484e      	ldr	r0, [pc, #312]	; (800f648 <tcp_input+0x288>)
 800f510:	f007 f830 	bl	8016574 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f514:	4b4d      	ldr	r3, [pc, #308]	; (800f64c <tcp_input+0x28c>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4a4b      	ldr	r2, [pc, #300]	; (800f64c <tcp_input+0x28c>)
 800f51e:	6814      	ldr	r4, [r2, #0]
 800f520:	4618      	mov	r0, r3
 800f522:	f7fc fa5f 	bl	800b9e4 <lwip_htons>
 800f526:	4603      	mov	r3, r0
 800f528:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f52a:	4b48      	ldr	r3, [pc, #288]	; (800f64c <tcp_input+0x28c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	885b      	ldrh	r3, [r3, #2]
 800f530:	b29b      	uxth	r3, r3
 800f532:	4a46      	ldr	r2, [pc, #280]	; (800f64c <tcp_input+0x28c>)
 800f534:	6814      	ldr	r4, [r2, #0]
 800f536:	4618      	mov	r0, r3
 800f538:	f7fc fa54 	bl	800b9e4 <lwip_htons>
 800f53c:	4603      	mov	r3, r0
 800f53e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f540:	4b42      	ldr	r3, [pc, #264]	; (800f64c <tcp_input+0x28c>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	4a41      	ldr	r2, [pc, #260]	; (800f64c <tcp_input+0x28c>)
 800f548:	6814      	ldr	r4, [r2, #0]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fc fa5f 	bl	800ba0e <lwip_htonl>
 800f550:	4603      	mov	r3, r0
 800f552:	6063      	str	r3, [r4, #4]
 800f554:	6863      	ldr	r3, [r4, #4]
 800f556:	4a45      	ldr	r2, [pc, #276]	; (800f66c <tcp_input+0x2ac>)
 800f558:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f55a:	4b3c      	ldr	r3, [pc, #240]	; (800f64c <tcp_input+0x28c>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	4a3a      	ldr	r2, [pc, #232]	; (800f64c <tcp_input+0x28c>)
 800f562:	6814      	ldr	r4, [r2, #0]
 800f564:	4618      	mov	r0, r3
 800f566:	f7fc fa52 	bl	800ba0e <lwip_htonl>
 800f56a:	4603      	mov	r3, r0
 800f56c:	60a3      	str	r3, [r4, #8]
 800f56e:	68a3      	ldr	r3, [r4, #8]
 800f570:	4a3f      	ldr	r2, [pc, #252]	; (800f670 <tcp_input+0x2b0>)
 800f572:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f574:	4b35      	ldr	r3, [pc, #212]	; (800f64c <tcp_input+0x28c>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	89db      	ldrh	r3, [r3, #14]
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	4a33      	ldr	r2, [pc, #204]	; (800f64c <tcp_input+0x28c>)
 800f57e:	6814      	ldr	r4, [r2, #0]
 800f580:	4618      	mov	r0, r3
 800f582:	f7fc fa2f 	bl	800b9e4 <lwip_htons>
 800f586:	4603      	mov	r3, r0
 800f588:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f58a:	4b30      	ldr	r3, [pc, #192]	; (800f64c <tcp_input+0x28c>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	899b      	ldrh	r3, [r3, #12]
 800f590:	b29b      	uxth	r3, r3
 800f592:	4618      	mov	r0, r3
 800f594:	f7fc fa26 	bl	800b9e4 <lwip_htons>
 800f598:	4603      	mov	r3, r0
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	4b34      	ldr	r3, [pc, #208]	; (800f674 <tcp_input+0x2b4>)
 800f5a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	891a      	ldrh	r2, [r3, #8]
 800f5aa:	4b33      	ldr	r3, [pc, #204]	; (800f678 <tcp_input+0x2b8>)
 800f5ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f5ae:	4b31      	ldr	r3, [pc, #196]	; (800f674 <tcp_input+0x2b4>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	f003 0303 	and.w	r3, r3, #3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00c      	beq.n	800f5d4 <tcp_input+0x214>
    tcplen++;
 800f5ba:	4b2f      	ldr	r3, [pc, #188]	; (800f678 <tcp_input+0x2b8>)
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	4b2d      	ldr	r3, [pc, #180]	; (800f678 <tcp_input+0x2b8>)
 800f5c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	891a      	ldrh	r2, [r3, #8]
 800f5ca:	4b2b      	ldr	r3, [pc, #172]	; (800f678 <tcp_input+0x2b8>)
 800f5cc:	881b      	ldrh	r3, [r3, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	f200 82d9 	bhi.w	800fb86 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5d8:	4b28      	ldr	r3, [pc, #160]	; (800f67c <tcp_input+0x2bc>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	61fb      	str	r3, [r7, #28]
 800f5de:	e09d      	b.n	800f71c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f5e0:	69fb      	ldr	r3, [r7, #28]
 800f5e2:	7d1b      	ldrb	r3, [r3, #20]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d105      	bne.n	800f5f4 <tcp_input+0x234>
 800f5e8:	4b15      	ldr	r3, [pc, #84]	; (800f640 <tcp_input+0x280>)
 800f5ea:	22fb      	movs	r2, #251	; 0xfb
 800f5ec:	4924      	ldr	r1, [pc, #144]	; (800f680 <tcp_input+0x2c0>)
 800f5ee:	4816      	ldr	r0, [pc, #88]	; (800f648 <tcp_input+0x288>)
 800f5f0:	f006 ffc0 	bl	8016574 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	7d1b      	ldrb	r3, [r3, #20]
 800f5f8:	2b0a      	cmp	r3, #10
 800f5fa:	d105      	bne.n	800f608 <tcp_input+0x248>
 800f5fc:	4b10      	ldr	r3, [pc, #64]	; (800f640 <tcp_input+0x280>)
 800f5fe:	22fc      	movs	r2, #252	; 0xfc
 800f600:	4920      	ldr	r1, [pc, #128]	; (800f684 <tcp_input+0x2c4>)
 800f602:	4811      	ldr	r0, [pc, #68]	; (800f648 <tcp_input+0x288>)
 800f604:	f006 ffb6 	bl	8016574 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	7d1b      	ldrb	r3, [r3, #20]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d105      	bne.n	800f61c <tcp_input+0x25c>
 800f610:	4b0b      	ldr	r3, [pc, #44]	; (800f640 <tcp_input+0x280>)
 800f612:	22fd      	movs	r2, #253	; 0xfd
 800f614:	491c      	ldr	r1, [pc, #112]	; (800f688 <tcp_input+0x2c8>)
 800f616:	480c      	ldr	r0, [pc, #48]	; (800f648 <tcp_input+0x288>)
 800f618:	f006 ffac 	bl	8016574 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	7a1b      	ldrb	r3, [r3, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d033      	beq.n	800f68c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	7a1a      	ldrb	r2, [r3, #8]
 800f628:	4b09      	ldr	r3, [pc, #36]	; (800f650 <tcp_input+0x290>)
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f630:	3301      	adds	r3, #1
 800f632:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f634:	429a      	cmp	r2, r3
 800f636:	d029      	beq.n	800f68c <tcp_input+0x2cc>
      prev = pcb;
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	61bb      	str	r3, [r7, #24]
      continue;
 800f63c:	e06b      	b.n	800f716 <tcp_input+0x356>
 800f63e:	bf00      	nop
 800f640:	08018920 	.word	0x08018920
 800f644:	08018954 	.word	0x08018954
 800f648:	0801896c 	.word	0x0801896c
 800f64c:	24000104 	.word	0x24000104
 800f650:	24000724 	.word	0x24000724
 800f654:	24000108 	.word	0x24000108
 800f658:	2400010c 	.word	0x2400010c
 800f65c:	2400010a 	.word	0x2400010a
 800f660:	08018994 	.word	0x08018994
 800f664:	080189a4 	.word	0x080189a4
 800f668:	080189b0 	.word	0x080189b0
 800f66c:	24000114 	.word	0x24000114
 800f670:	24000118 	.word	0x24000118
 800f674:	24000120 	.word	0x24000120
 800f678:	2400011e 	.word	0x2400011e
 800f67c:	24003614 	.word	0x24003614
 800f680:	080189d0 	.word	0x080189d0
 800f684:	080189f8 	.word	0x080189f8
 800f688:	08018a24 	.word	0x08018a24
    }

    if (pcb->remote_port == tcphdr->src &&
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	8b1a      	ldrh	r2, [r3, #24]
 800f690:	4b94      	ldr	r3, [pc, #592]	; (800f8e4 <tcp_input+0x524>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	b29b      	uxth	r3, r3
 800f698:	429a      	cmp	r2, r3
 800f69a:	d13a      	bne.n	800f712 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	8ada      	ldrh	r2, [r3, #22]
 800f6a0:	4b90      	ldr	r3, [pc, #576]	; (800f8e4 <tcp_input+0x524>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	885b      	ldrh	r3, [r3, #2]
 800f6a6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d132      	bne.n	800f712 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	685a      	ldr	r2, [r3, #4]
 800f6b0:	4b8d      	ldr	r3, [pc, #564]	; (800f8e8 <tcp_input+0x528>)
 800f6b2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d12c      	bne.n	800f712 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	4b8a      	ldr	r3, [pc, #552]	; (800f8e8 <tcp_input+0x528>)
 800f6be:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d126      	bne.n	800f712 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	69fa      	ldr	r2, [r7, #28]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d106      	bne.n	800f6dc <tcp_input+0x31c>
 800f6ce:	4b87      	ldr	r3, [pc, #540]	; (800f8ec <tcp_input+0x52c>)
 800f6d0:	f240 120d 	movw	r2, #269	; 0x10d
 800f6d4:	4986      	ldr	r1, [pc, #536]	; (800f8f0 <tcp_input+0x530>)
 800f6d6:	4887      	ldr	r0, [pc, #540]	; (800f8f4 <tcp_input+0x534>)
 800f6d8:	f006 ff4c 	bl	8016574 <iprintf>
      if (prev != NULL) {
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00a      	beq.n	800f6f8 <tcp_input+0x338>
        prev->next = pcb->next;
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	68da      	ldr	r2, [r3, #12]
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f6ea:	4b83      	ldr	r3, [pc, #524]	; (800f8f8 <tcp_input+0x538>)
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f6f2:	4a81      	ldr	r2, [pc, #516]	; (800f8f8 <tcp_input+0x538>)
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	69fa      	ldr	r2, [r7, #28]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d111      	bne.n	800f726 <tcp_input+0x366>
 800f702:	4b7a      	ldr	r3, [pc, #488]	; (800f8ec <tcp_input+0x52c>)
 800f704:	f240 1215 	movw	r2, #277	; 0x115
 800f708:	497c      	ldr	r1, [pc, #496]	; (800f8fc <tcp_input+0x53c>)
 800f70a:	487a      	ldr	r0, [pc, #488]	; (800f8f4 <tcp_input+0x534>)
 800f70c:	f006 ff32 	bl	8016574 <iprintf>
      break;
 800f710:	e009      	b.n	800f726 <tcp_input+0x366>
    }
    prev = pcb;
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	61fb      	str	r3, [r7, #28]
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f47f af5e 	bne.w	800f5e0 <tcp_input+0x220>
 800f724:	e000      	b.n	800f728 <tcp_input+0x368>
      break;
 800f726:	bf00      	nop
  }

  if (pcb == NULL) {
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f040 8095 	bne.w	800f85a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f730:	4b73      	ldr	r3, [pc, #460]	; (800f900 <tcp_input+0x540>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	61fb      	str	r3, [r7, #28]
 800f736:	e03f      	b.n	800f7b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	2b0a      	cmp	r3, #10
 800f73e:	d006      	beq.n	800f74e <tcp_input+0x38e>
 800f740:	4b6a      	ldr	r3, [pc, #424]	; (800f8ec <tcp_input+0x52c>)
 800f742:	f240 121f 	movw	r2, #287	; 0x11f
 800f746:	496f      	ldr	r1, [pc, #444]	; (800f904 <tcp_input+0x544>)
 800f748:	486a      	ldr	r0, [pc, #424]	; (800f8f4 <tcp_input+0x534>)
 800f74a:	f006 ff13 	bl	8016574 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	7a1b      	ldrb	r3, [r3, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d009      	beq.n	800f76a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	7a1a      	ldrb	r2, [r3, #8]
 800f75a:	4b63      	ldr	r3, [pc, #396]	; (800f8e8 <tcp_input+0x528>)
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f762:	3301      	adds	r3, #1
 800f764:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f766:	429a      	cmp	r2, r3
 800f768:	d122      	bne.n	800f7b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	8b1a      	ldrh	r2, [r3, #24]
 800f76e:	4b5d      	ldr	r3, [pc, #372]	; (800f8e4 <tcp_input+0x524>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	b29b      	uxth	r3, r3
 800f776:	429a      	cmp	r2, r3
 800f778:	d11b      	bne.n	800f7b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	8ada      	ldrh	r2, [r3, #22]
 800f77e:	4b59      	ldr	r3, [pc, #356]	; (800f8e4 <tcp_input+0x524>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	885b      	ldrh	r3, [r3, #2]
 800f784:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f786:	429a      	cmp	r2, r3
 800f788:	d113      	bne.n	800f7b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	4b56      	ldr	r3, [pc, #344]	; (800f8e8 <tcp_input+0x528>)
 800f790:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f792:	429a      	cmp	r2, r3
 800f794:	d10d      	bne.n	800f7b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	4b53      	ldr	r3, [pc, #332]	; (800f8e8 <tcp_input+0x528>)
 800f79c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d107      	bne.n	800f7b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f7a2:	69f8      	ldr	r0, [r7, #28]
 800f7a4:	f000 fb54 	bl	800fe50 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7fd fd31 	bl	800d210 <pbuf_free>
        return;
 800f7ae:	e1f0      	b.n	800fb92 <tcp_input+0x7d2>
        continue;
 800f7b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	61fb      	str	r3, [r7, #28]
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d1bc      	bne.n	800f738 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7c2:	4b51      	ldr	r3, [pc, #324]	; (800f908 <tcp_input+0x548>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	617b      	str	r3, [r7, #20]
 800f7c8:	e02a      	b.n	800f820 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	7a1b      	ldrb	r3, [r3, #8]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00c      	beq.n	800f7ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	7a1a      	ldrb	r2, [r3, #8]
 800f7d6:	4b44      	ldr	r3, [pc, #272]	; (800f8e8 <tcp_input+0x528>)
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7de:	3301      	adds	r3, #1
 800f7e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d002      	beq.n	800f7ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	61bb      	str	r3, [r7, #24]
        continue;
 800f7ea:	e016      	b.n	800f81a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	8ada      	ldrh	r2, [r3, #22]
 800f7f0:	4b3c      	ldr	r3, [pc, #240]	; (800f8e4 <tcp_input+0x524>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	885b      	ldrh	r3, [r3, #2]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d10c      	bne.n	800f816 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	4b39      	ldr	r3, [pc, #228]	; (800f8e8 <tcp_input+0x528>)
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	429a      	cmp	r2, r3
 800f806:	d00f      	beq.n	800f828 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00d      	beq.n	800f82a <tcp_input+0x46a>
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d009      	beq.n	800f82a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1d1      	bne.n	800f7ca <tcp_input+0x40a>
 800f826:	e000      	b.n	800f82a <tcp_input+0x46a>
            break;
 800f828:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d014      	beq.n	800f85a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00a      	beq.n	800f84c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	68da      	ldr	r2, [r3, #12]
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f83e:	4b32      	ldr	r3, [pc, #200]	; (800f908 <tcp_input+0x548>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f846:	4a30      	ldr	r2, [pc, #192]	; (800f908 <tcp_input+0x548>)
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f84c:	6978      	ldr	r0, [r7, #20]
 800f84e:	f000 fa01 	bl	800fc54 <tcp_listen_input>
      }
      pbuf_free(p);
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7fd fcdc 	bl	800d210 <pbuf_free>
      return;
 800f858:	e19b      	b.n	800fb92 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f000 8160 	beq.w	800fb22 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f862:	4b2a      	ldr	r3, [pc, #168]	; (800f90c <tcp_input+0x54c>)
 800f864:	2200      	movs	r2, #0
 800f866:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	891a      	ldrh	r2, [r3, #8]
 800f86c:	4b27      	ldr	r3, [pc, #156]	; (800f90c <tcp_input+0x54c>)
 800f86e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f870:	4a26      	ldr	r2, [pc, #152]	; (800f90c <tcp_input+0x54c>)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f876:	4b1b      	ldr	r3, [pc, #108]	; (800f8e4 <tcp_input+0x524>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a24      	ldr	r2, [pc, #144]	; (800f90c <tcp_input+0x54c>)
 800f87c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f87e:	4b24      	ldr	r3, [pc, #144]	; (800f910 <tcp_input+0x550>)
 800f880:	2200      	movs	r2, #0
 800f882:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f884:	4b23      	ldr	r3, [pc, #140]	; (800f914 <tcp_input+0x554>)
 800f886:	2200      	movs	r2, #0
 800f888:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f88a:	4b23      	ldr	r3, [pc, #140]	; (800f918 <tcp_input+0x558>)
 800f88c:	2200      	movs	r2, #0
 800f88e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f890:	4b22      	ldr	r3, [pc, #136]	; (800f91c <tcp_input+0x55c>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	f003 0308 	and.w	r3, r3, #8
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d006      	beq.n	800f8aa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	7b5b      	ldrb	r3, [r3, #13]
 800f8a0:	f043 0301 	orr.w	r3, r3, #1
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d038      	beq.n	800f924 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8b2:	69f8      	ldr	r0, [r7, #28]
 800f8b4:	f7ff f858 	bl	800e968 <tcp_process_refused_data>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	f113 0f0d 	cmn.w	r3, #13
 800f8be:	d007      	beq.n	800f8d0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d02d      	beq.n	800f924 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8c8:	4b15      	ldr	r3, [pc, #84]	; (800f920 <tcp_input+0x560>)
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d029      	beq.n	800f924 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f040 8104 	bne.w	800fae2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f8da:	69f8      	ldr	r0, [r7, #28]
 800f8dc:	f003 fe16 	bl	801350c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f8e0:	e0ff      	b.n	800fae2 <tcp_input+0x722>
 800f8e2:	bf00      	nop
 800f8e4:	24000104 	.word	0x24000104
 800f8e8:	24000724 	.word	0x24000724
 800f8ec:	08018920 	.word	0x08018920
 800f8f0:	08018a4c 	.word	0x08018a4c
 800f8f4:	0801896c 	.word	0x0801896c
 800f8f8:	24003614 	.word	0x24003614
 800f8fc:	08018a78 	.word	0x08018a78
 800f900:	24003624 	.word	0x24003624
 800f904:	08018aa4 	.word	0x08018aa4
 800f908:	2400361c 	.word	0x2400361c
 800f90c:	240000f4 	.word	0x240000f4
 800f910:	24000124 	.word	0x24000124
 800f914:	24000121 	.word	0x24000121
 800f918:	2400011c 	.word	0x2400011c
 800f91c:	24000120 	.word	0x24000120
 800f920:	2400011e 	.word	0x2400011e
      }
    }
    tcp_input_pcb = pcb;
 800f924:	4a9c      	ldr	r2, [pc, #624]	; (800fb98 <tcp_input+0x7d8>)
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f92a:	69f8      	ldr	r0, [r7, #28]
 800f92c:	f000 fb0a 	bl	800ff44 <tcp_process>
 800f930:	4603      	mov	r3, r0
 800f932:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f934:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f938:	f113 0f0d 	cmn.w	r3, #13
 800f93c:	f000 80d3 	beq.w	800fae6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f940:	4b96      	ldr	r3, [pc, #600]	; (800fb9c <tcp_input+0x7dc>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	f003 0308 	and.w	r3, r3, #8
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d015      	beq.n	800f978 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f952:	2b00      	cmp	r3, #0
 800f954:	d008      	beq.n	800f968 <tcp_input+0x5a8>
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f95c:	69fa      	ldr	r2, [r7, #28]
 800f95e:	6912      	ldr	r2, [r2, #16]
 800f960:	f06f 010d 	mvn.w	r1, #13
 800f964:	4610      	mov	r0, r2
 800f966:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f968:	69f9      	ldr	r1, [r7, #28]
 800f96a:	488d      	ldr	r0, [pc, #564]	; (800fba0 <tcp_input+0x7e0>)
 800f96c:	f7ff fbb0 	bl	800f0d0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f970:	69f8      	ldr	r0, [r7, #28]
 800f972:	f7fd fefd 	bl	800d770 <tcp_free>
 800f976:	e0c1      	b.n	800fafc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f978:	2300      	movs	r3, #0
 800f97a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f97c:	4b89      	ldr	r3, [pc, #548]	; (800fba4 <tcp_input+0x7e4>)
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d01d      	beq.n	800f9c0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f984:	4b87      	ldr	r3, [pc, #540]	; (800fba4 <tcp_input+0x7e4>)
 800f986:	881b      	ldrh	r3, [r3, #0]
 800f988:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00a      	beq.n	800f9aa <tcp_input+0x5ea>
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f99a:	69fa      	ldr	r2, [r7, #28]
 800f99c:	6910      	ldr	r0, [r2, #16]
 800f99e:	89fa      	ldrh	r2, [r7, #14]
 800f9a0:	69f9      	ldr	r1, [r7, #28]
 800f9a2:	4798      	blx	r3
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	74fb      	strb	r3, [r7, #19]
 800f9a8:	e001      	b.n	800f9ae <tcp_input+0x5ee>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9b2:	f113 0f0d 	cmn.w	r3, #13
 800f9b6:	f000 8098 	beq.w	800faea <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f9ba:	4b7a      	ldr	r3, [pc, #488]	; (800fba4 <tcp_input+0x7e4>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f9c0:	69f8      	ldr	r0, [r7, #28]
 800f9c2:	f000 f907 	bl	800fbd4 <tcp_input_delayed_close>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f040 8090 	bne.w	800faee <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f9ce:	4b76      	ldr	r3, [pc, #472]	; (800fba8 <tcp_input+0x7e8>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d041      	beq.n	800fa5a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d006      	beq.n	800f9ec <tcp_input+0x62c>
 800f9de:	4b73      	ldr	r3, [pc, #460]	; (800fbac <tcp_input+0x7ec>)
 800f9e0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f9e4:	4972      	ldr	r1, [pc, #456]	; (800fbb0 <tcp_input+0x7f0>)
 800f9e6:	4873      	ldr	r0, [pc, #460]	; (800fbb4 <tcp_input+0x7f4>)
 800f9e8:	f006 fdc4 	bl	8016574 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	8b5b      	ldrh	r3, [r3, #26]
 800f9f0:	f003 0310 	and.w	r3, r3, #16
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d008      	beq.n	800fa0a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f9f8:	4b6b      	ldr	r3, [pc, #428]	; (800fba8 <tcp_input+0x7e8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fd fc07 	bl	800d210 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa02:	69f8      	ldr	r0, [r7, #28]
 800fa04:	f7fe f99c 	bl	800dd40 <tcp_abort>
            goto aborted;
 800fa08:	e078      	b.n	800fafc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00c      	beq.n	800fa2e <tcp_input+0x66e>
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	6918      	ldr	r0, [r3, #16]
 800fa1e:	4b62      	ldr	r3, [pc, #392]	; (800fba8 <tcp_input+0x7e8>)
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	2300      	movs	r3, #0
 800fa24:	69f9      	ldr	r1, [r7, #28]
 800fa26:	47a0      	blx	r4
 800fa28:	4603      	mov	r3, r0
 800fa2a:	74fb      	strb	r3, [r7, #19]
 800fa2c:	e008      	b.n	800fa40 <tcp_input+0x680>
 800fa2e:	4b5e      	ldr	r3, [pc, #376]	; (800fba8 <tcp_input+0x7e8>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	2300      	movs	r3, #0
 800fa34:	69f9      	ldr	r1, [r7, #28]
 800fa36:	2000      	movs	r0, #0
 800fa38:	f7ff f88a 	bl	800eb50 <tcp_recv_null>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa44:	f113 0f0d 	cmn.w	r3, #13
 800fa48:	d053      	beq.n	800faf2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa52:	4b55      	ldr	r3, [pc, #340]	; (800fba8 <tcp_input+0x7e8>)
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa5a:	4b50      	ldr	r3, [pc, #320]	; (800fb9c <tcp_input+0x7dc>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	f003 0320 	and.w	r3, r3, #32
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d030      	beq.n	800fac8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d009      	beq.n	800fa82 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa72:	7b5a      	ldrb	r2, [r3, #13]
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa78:	f042 0220 	orr.w	r2, r2, #32
 800fa7c:	b2d2      	uxtb	r2, r2
 800fa7e:	735a      	strb	r2, [r3, #13]
 800fa80:	e022      	b.n	800fac8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa8a:	d005      	beq.n	800fa98 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa90:	3301      	adds	r3, #1
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00b      	beq.n	800faba <tcp_input+0x6fa>
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	6918      	ldr	r0, [r3, #16]
 800faac:	2300      	movs	r3, #0
 800faae:	2200      	movs	r2, #0
 800fab0:	69f9      	ldr	r1, [r7, #28]
 800fab2:	47a0      	blx	r4
 800fab4:	4603      	mov	r3, r0
 800fab6:	74fb      	strb	r3, [r7, #19]
 800fab8:	e001      	b.n	800fabe <tcp_input+0x6fe>
 800faba:	2300      	movs	r3, #0
 800fabc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fabe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fac2:	f113 0f0d 	cmn.w	r3, #13
 800fac6:	d016      	beq.n	800faf6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fac8:	4b33      	ldr	r3, [pc, #204]	; (800fb98 <tcp_input+0x7d8>)
 800faca:	2200      	movs	r2, #0
 800facc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800face:	69f8      	ldr	r0, [r7, #28]
 800fad0:	f000 f880 	bl	800fbd4 <tcp_input_delayed_close>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d10f      	bne.n	800fafa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fada:	69f8      	ldr	r0, [r7, #28]
 800fadc:	f002 ff10 	bl	8012900 <tcp_output>
 800fae0:	e00c      	b.n	800fafc <tcp_input+0x73c>
        goto aborted;
 800fae2:	bf00      	nop
 800fae4:	e00a      	b.n	800fafc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fae6:	bf00      	nop
 800fae8:	e008      	b.n	800fafc <tcp_input+0x73c>
              goto aborted;
 800faea:	bf00      	nop
 800faec:	e006      	b.n	800fafc <tcp_input+0x73c>
          goto aborted;
 800faee:	bf00      	nop
 800faf0:	e004      	b.n	800fafc <tcp_input+0x73c>
            goto aborted;
 800faf2:	bf00      	nop
 800faf4:	e002      	b.n	800fafc <tcp_input+0x73c>
              goto aborted;
 800faf6:	bf00      	nop
 800faf8:	e000      	b.n	800fafc <tcp_input+0x73c>
          goto aborted;
 800fafa:	bf00      	nop
    tcp_input_pcb = NULL;
 800fafc:	4b26      	ldr	r3, [pc, #152]	; (800fb98 <tcp_input+0x7d8>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb02:	4b29      	ldr	r3, [pc, #164]	; (800fba8 <tcp_input+0x7e8>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb08:	4b2b      	ldr	r3, [pc, #172]	; (800fbb8 <tcp_input+0x7f8>)
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d03f      	beq.n	800fb90 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fb10:	4b29      	ldr	r3, [pc, #164]	; (800fbb8 <tcp_input+0x7f8>)
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fd fb7b 	bl	800d210 <pbuf_free>
      inseg.p = NULL;
 800fb1a:	4b27      	ldr	r3, [pc, #156]	; (800fbb8 <tcp_input+0x7f8>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb20:	e036      	b.n	800fb90 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb22:	4b26      	ldr	r3, [pc, #152]	; (800fbbc <tcp_input+0x7fc>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	899b      	ldrh	r3, [r3, #12]
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fb ff5a 	bl	800b9e4 <lwip_htons>
 800fb30:	4603      	mov	r3, r0
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	f003 0304 	and.w	r3, r3, #4
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d118      	bne.n	800fb6e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb3c:	4b20      	ldr	r3, [pc, #128]	; (800fbc0 <tcp_input+0x800>)
 800fb3e:	6819      	ldr	r1, [r3, #0]
 800fb40:	4b20      	ldr	r3, [pc, #128]	; (800fbc4 <tcp_input+0x804>)
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	461a      	mov	r2, r3
 800fb46:	4b20      	ldr	r3, [pc, #128]	; (800fbc8 <tcp_input+0x808>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb4c:	4b1b      	ldr	r3, [pc, #108]	; (800fbbc <tcp_input+0x7fc>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb50:	885b      	ldrh	r3, [r3, #2]
 800fb52:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb54:	4a19      	ldr	r2, [pc, #100]	; (800fbbc <tcp_input+0x7fc>)
 800fb56:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb58:	8812      	ldrh	r2, [r2, #0]
 800fb5a:	b292      	uxth	r2, r2
 800fb5c:	9202      	str	r2, [sp, #8]
 800fb5e:	9301      	str	r3, [sp, #4]
 800fb60:	4b1a      	ldr	r3, [pc, #104]	; (800fbcc <tcp_input+0x80c>)
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	4b1a      	ldr	r3, [pc, #104]	; (800fbd0 <tcp_input+0x810>)
 800fb66:	4602      	mov	r2, r0
 800fb68:	2000      	movs	r0, #0
 800fb6a:	f003 fc7d 	bl	8013468 <tcp_rst>
    pbuf_free(p);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7fd fb4e 	bl	800d210 <pbuf_free>
  return;
 800fb74:	e00c      	b.n	800fb90 <tcp_input+0x7d0>
    goto dropped;
 800fb76:	bf00      	nop
 800fb78:	e006      	b.n	800fb88 <tcp_input+0x7c8>
    goto dropped;
 800fb7a:	bf00      	nop
 800fb7c:	e004      	b.n	800fb88 <tcp_input+0x7c8>
    goto dropped;
 800fb7e:	bf00      	nop
 800fb80:	e002      	b.n	800fb88 <tcp_input+0x7c8>
      goto dropped;
 800fb82:	bf00      	nop
 800fb84:	e000      	b.n	800fb88 <tcp_input+0x7c8>
      goto dropped;
 800fb86:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f7fd fb41 	bl	800d210 <pbuf_free>
 800fb8e:	e000      	b.n	800fb92 <tcp_input+0x7d2>
  return;
 800fb90:	bf00      	nop
}
 800fb92:	3724      	adds	r7, #36	; 0x24
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd90      	pop	{r4, r7, pc}
 800fb98:	24003628 	.word	0x24003628
 800fb9c:	24000121 	.word	0x24000121
 800fba0:	24003614 	.word	0x24003614
 800fba4:	2400011c 	.word	0x2400011c
 800fba8:	24000124 	.word	0x24000124
 800fbac:	08018920 	.word	0x08018920
 800fbb0:	08018ad4 	.word	0x08018ad4
 800fbb4:	0801896c 	.word	0x0801896c
 800fbb8:	240000f4 	.word	0x240000f4
 800fbbc:	24000104 	.word	0x24000104
 800fbc0:	24000118 	.word	0x24000118
 800fbc4:	2400011e 	.word	0x2400011e
 800fbc8:	24000114 	.word	0x24000114
 800fbcc:	24000734 	.word	0x24000734
 800fbd0:	24000738 	.word	0x24000738

0800fbd4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <tcp_input_delayed_close+0x1c>
 800fbe2:	4b17      	ldr	r3, [pc, #92]	; (800fc40 <tcp_input_delayed_close+0x6c>)
 800fbe4:	f240 225a 	movw	r2, #602	; 0x25a
 800fbe8:	4916      	ldr	r1, [pc, #88]	; (800fc44 <tcp_input_delayed_close+0x70>)
 800fbea:	4817      	ldr	r0, [pc, #92]	; (800fc48 <tcp_input_delayed_close+0x74>)
 800fbec:	f006 fcc2 	bl	8016574 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fbf0:	4b16      	ldr	r3, [pc, #88]	; (800fc4c <tcp_input_delayed_close+0x78>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f003 0310 	and.w	r3, r3, #16
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d01c      	beq.n	800fc36 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	8b5b      	ldrh	r3, [r3, #26]
 800fc00:	f003 0310 	and.w	r3, r3, #16
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10d      	bne.n	800fc24 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d008      	beq.n	800fc24 <tcp_input_delayed_close+0x50>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	6912      	ldr	r2, [r2, #16]
 800fc1c:	f06f 010e 	mvn.w	r1, #14
 800fc20:	4610      	mov	r0, r2
 800fc22:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc24:	6879      	ldr	r1, [r7, #4]
 800fc26:	480a      	ldr	r0, [pc, #40]	; (800fc50 <tcp_input_delayed_close+0x7c>)
 800fc28:	f7ff fa52 	bl	800f0d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7fd fd9f 	bl	800d770 <tcp_free>
    return 1;
 800fc32:	2301      	movs	r3, #1
 800fc34:	e000      	b.n	800fc38 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	08018920 	.word	0x08018920
 800fc44:	08018af0 	.word	0x08018af0
 800fc48:	0801896c 	.word	0x0801896c
 800fc4c:	24000121 	.word	0x24000121
 800fc50:	24003614 	.word	0x24003614

0800fc54 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	b08b      	sub	sp, #44	; 0x2c
 800fc58:	af04      	add	r7, sp, #16
 800fc5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fc5c:	4b6f      	ldr	r3, [pc, #444]	; (800fe1c <tcp_listen_input+0x1c8>)
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	f003 0304 	and.w	r3, r3, #4
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f040 80d2 	bne.w	800fe0e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <tcp_listen_input+0x2a>
 800fc70:	4b6b      	ldr	r3, [pc, #428]	; (800fe20 <tcp_listen_input+0x1cc>)
 800fc72:	f240 2281 	movw	r2, #641	; 0x281
 800fc76:	496b      	ldr	r1, [pc, #428]	; (800fe24 <tcp_listen_input+0x1d0>)
 800fc78:	486b      	ldr	r0, [pc, #428]	; (800fe28 <tcp_listen_input+0x1d4>)
 800fc7a:	f006 fc7b 	bl	8016574 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fc7e:	4b67      	ldr	r3, [pc, #412]	; (800fe1c <tcp_listen_input+0x1c8>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	f003 0310 	and.w	r3, r3, #16
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d019      	beq.n	800fcbe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc8a:	4b68      	ldr	r3, [pc, #416]	; (800fe2c <tcp_listen_input+0x1d8>)
 800fc8c:	6819      	ldr	r1, [r3, #0]
 800fc8e:	4b68      	ldr	r3, [pc, #416]	; (800fe30 <tcp_listen_input+0x1dc>)
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	4b67      	ldr	r3, [pc, #412]	; (800fe34 <tcp_listen_input+0x1e0>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc9a:	4b67      	ldr	r3, [pc, #412]	; (800fe38 <tcp_listen_input+0x1e4>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc9e:	885b      	ldrh	r3, [r3, #2]
 800fca0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fca2:	4a65      	ldr	r2, [pc, #404]	; (800fe38 <tcp_listen_input+0x1e4>)
 800fca4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fca6:	8812      	ldrh	r2, [r2, #0]
 800fca8:	b292      	uxth	r2, r2
 800fcaa:	9202      	str	r2, [sp, #8]
 800fcac:	9301      	str	r3, [sp, #4]
 800fcae:	4b63      	ldr	r3, [pc, #396]	; (800fe3c <tcp_listen_input+0x1e8>)
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	4b63      	ldr	r3, [pc, #396]	; (800fe40 <tcp_listen_input+0x1ec>)
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f003 fbd6 	bl	8013468 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fcbc:	e0a9      	b.n	800fe12 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fcbe:	4b57      	ldr	r3, [pc, #348]	; (800fe1c <tcp_listen_input+0x1c8>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f003 0302 	and.w	r3, r3, #2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 80a3 	beq.w	800fe12 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	7d5b      	ldrb	r3, [r3, #21]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff f861 	bl	800ed98 <tcp_alloc>
 800fcd6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d111      	bne.n	800fd02 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00a      	beq.n	800fcfc <tcp_listen_input+0xa8>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	699b      	ldr	r3, [r3, #24]
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	6910      	ldr	r0, [r2, #16]
 800fcee:	f04f 32ff 	mov.w	r2, #4294967295
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	4798      	blx	r3
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	73bb      	strb	r3, [r7, #14]
      return;
 800fcfa:	e08b      	b.n	800fe14 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcfc:	23f0      	movs	r3, #240	; 0xf0
 800fcfe:	73bb      	strb	r3, [r7, #14]
      return;
 800fd00:	e088      	b.n	800fe14 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd02:	4b50      	ldr	r3, [pc, #320]	; (800fe44 <tcp_listen_input+0x1f0>)
 800fd04:	695a      	ldr	r2, [r3, #20]
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd0a:	4b4e      	ldr	r3, [pc, #312]	; (800fe44 <tcp_listen_input+0x1f0>)
 800fd0c:	691a      	ldr	r2, [r3, #16]
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	8ada      	ldrh	r2, [r3, #22]
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd1a:	4b47      	ldr	r3, [pc, #284]	; (800fe38 <tcp_listen_input+0x1e4>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	2203      	movs	r2, #3
 800fd2a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd2c:	4b41      	ldr	r3, [pc, #260]	; (800fe34 <tcp_listen_input+0x1e0>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	1c5a      	adds	r2, r3, #1
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fd3e:	6978      	ldr	r0, [r7, #20]
 800fd40:	f7ff fa5a 	bl	800f1f8 <tcp_next_iss>
 800fd44:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	693a      	ldr	r2, [r7, #16]
 800fd56:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	693a      	ldr	r2, [r7, #16]
 800fd5c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd5e:	4b35      	ldr	r3, [pc, #212]	; (800fe34 <tcp_listen_input+0x1e0>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	1e5a      	subs	r2, r3, #1
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	691a      	ldr	r2, [r3, #16]
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	7a5b      	ldrb	r3, [r3, #9]
 800fd7a:	f003 030c 	and.w	r3, r3, #12
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	7a1a      	ldrb	r2, [r3, #8]
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fd8c:	4b2e      	ldr	r3, [pc, #184]	; (800fe48 <tcp_listen_input+0x1f4>)
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	60da      	str	r2, [r3, #12]
 800fd94:	4a2c      	ldr	r2, [pc, #176]	; (800fe48 <tcp_listen_input+0x1f4>)
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	6013      	str	r3, [r2, #0]
 800fd9a:	f003 fd27 	bl	80137ec <tcp_timer_needed>
 800fd9e:	4b2b      	ldr	r3, [pc, #172]	; (800fe4c <tcp_listen_input+0x1f8>)
 800fda0:	2201      	movs	r2, #1
 800fda2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fda4:	6978      	ldr	r0, [r7, #20]
 800fda6:	f001 fd8d 	bl	80118c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fdaa:	4b23      	ldr	r3, [pc, #140]	; (800fe38 <tcp_listen_input+0x1e4>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	89db      	ldrh	r3, [r3, #14]
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	3304      	adds	r3, #4
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f005 f911 	bl	8014ff4 <ip4_route>
 800fdd2:	4601      	mov	r1, r0
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	461a      	mov	r2, r3
 800fdda:	4620      	mov	r0, r4
 800fddc:	f7ff fa32 	bl	800f244 <tcp_eff_send_mss_netif>
 800fde0:	4603      	mov	r3, r0
 800fde2:	461a      	mov	r2, r3
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fde8:	2112      	movs	r1, #18
 800fdea:	6978      	ldr	r0, [r7, #20]
 800fdec:	f002 fc9a 	bl	8012724 <tcp_enqueue_flags>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fdf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d004      	beq.n	800fe06 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	6978      	ldr	r0, [r7, #20]
 800fe00:	f7fd fee0 	bl	800dbc4 <tcp_abandon>
      return;
 800fe04:	e006      	b.n	800fe14 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe06:	6978      	ldr	r0, [r7, #20]
 800fe08:	f002 fd7a 	bl	8012900 <tcp_output>
  return;
 800fe0c:	e001      	b.n	800fe12 <tcp_listen_input+0x1be>
    return;
 800fe0e:	bf00      	nop
 800fe10:	e000      	b.n	800fe14 <tcp_listen_input+0x1c0>
  return;
 800fe12:	bf00      	nop
}
 800fe14:	371c      	adds	r7, #28
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd90      	pop	{r4, r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	24000120 	.word	0x24000120
 800fe20:	08018920 	.word	0x08018920
 800fe24:	08018b18 	.word	0x08018b18
 800fe28:	0801896c 	.word	0x0801896c
 800fe2c:	24000118 	.word	0x24000118
 800fe30:	2400011e 	.word	0x2400011e
 800fe34:	24000114 	.word	0x24000114
 800fe38:	24000104 	.word	0x24000104
 800fe3c:	24000734 	.word	0x24000734
 800fe40:	24000738 	.word	0x24000738
 800fe44:	24000724 	.word	0x24000724
 800fe48:	24003614 	.word	0x24003614
 800fe4c:	24003610 	.word	0x24003610

0800fe50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af04      	add	r7, sp, #16
 800fe56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fe58:	4b2f      	ldr	r3, [pc, #188]	; (800ff18 <tcp_timewait_input+0xc8>)
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	f003 0304 	and.w	r3, r3, #4
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d153      	bne.n	800ff0c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d106      	bne.n	800fe78 <tcp_timewait_input+0x28>
 800fe6a:	4b2c      	ldr	r3, [pc, #176]	; (800ff1c <tcp_timewait_input+0xcc>)
 800fe6c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fe70:	492b      	ldr	r1, [pc, #172]	; (800ff20 <tcp_timewait_input+0xd0>)
 800fe72:	482c      	ldr	r0, [pc, #176]	; (800ff24 <tcp_timewait_input+0xd4>)
 800fe74:	f006 fb7e 	bl	8016574 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fe78:	4b27      	ldr	r3, [pc, #156]	; (800ff18 <tcp_timewait_input+0xc8>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	f003 0302 	and.w	r3, r3, #2
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d02a      	beq.n	800feda <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fe84:	4b28      	ldr	r3, [pc, #160]	; (800ff28 <tcp_timewait_input+0xd8>)
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	db2d      	blt.n	800feee <tcp_timewait_input+0x9e>
 800fe92:	4b25      	ldr	r3, [pc, #148]	; (800ff28 <tcp_timewait_input+0xd8>)
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe9e:	440b      	add	r3, r1
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	dc23      	bgt.n	800feee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea6:	4b21      	ldr	r3, [pc, #132]	; (800ff2c <tcp_timewait_input+0xdc>)
 800fea8:	6819      	ldr	r1, [r3, #0]
 800feaa:	4b21      	ldr	r3, [pc, #132]	; (800ff30 <tcp_timewait_input+0xe0>)
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	461a      	mov	r2, r3
 800feb0:	4b1d      	ldr	r3, [pc, #116]	; (800ff28 <tcp_timewait_input+0xd8>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feb6:	4b1f      	ldr	r3, [pc, #124]	; (800ff34 <tcp_timewait_input+0xe4>)
 800feb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feba:	885b      	ldrh	r3, [r3, #2]
 800febc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800febe:	4a1d      	ldr	r2, [pc, #116]	; (800ff34 <tcp_timewait_input+0xe4>)
 800fec0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec2:	8812      	ldrh	r2, [r2, #0]
 800fec4:	b292      	uxth	r2, r2
 800fec6:	9202      	str	r2, [sp, #8]
 800fec8:	9301      	str	r3, [sp, #4]
 800feca:	4b1b      	ldr	r3, [pc, #108]	; (800ff38 <tcp_timewait_input+0xe8>)
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	4b1b      	ldr	r3, [pc, #108]	; (800ff3c <tcp_timewait_input+0xec>)
 800fed0:	4602      	mov	r2, r0
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f003 fac8 	bl	8013468 <tcp_rst>
      return;
 800fed8:	e01b      	b.n	800ff12 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800feda:	4b0f      	ldr	r3, [pc, #60]	; (800ff18 <tcp_timewait_input+0xc8>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fee6:	4b16      	ldr	r3, [pc, #88]	; (800ff40 <tcp_timewait_input+0xf0>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800feee:	4b10      	ldr	r3, [pc, #64]	; (800ff30 <tcp_timewait_input+0xe0>)
 800fef0:	881b      	ldrh	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00c      	beq.n	800ff10 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	8b5b      	ldrh	r3, [r3, #26]
 800fefa:	f043 0302 	orr.w	r3, r3, #2
 800fefe:	b29a      	uxth	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f002 fcfb 	bl	8012900 <tcp_output>
  }
  return;
 800ff0a:	e001      	b.n	800ff10 <tcp_timewait_input+0xc0>
    return;
 800ff0c:	bf00      	nop
 800ff0e:	e000      	b.n	800ff12 <tcp_timewait_input+0xc2>
  return;
 800ff10:	bf00      	nop
}
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	24000120 	.word	0x24000120
 800ff1c:	08018920 	.word	0x08018920
 800ff20:	08018b38 	.word	0x08018b38
 800ff24:	0801896c 	.word	0x0801896c
 800ff28:	24000114 	.word	0x24000114
 800ff2c:	24000118 	.word	0x24000118
 800ff30:	2400011e 	.word	0x2400011e
 800ff34:	24000104 	.word	0x24000104
 800ff38:	24000734 	.word	0x24000734
 800ff3c:	24000738 	.word	0x24000738
 800ff40:	24003618 	.word	0x24003618

0800ff44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b08d      	sub	sp, #52	; 0x34
 800ff48:	af04      	add	r7, sp, #16
 800ff4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d106      	bne.n	800ff68 <tcp_process+0x24>
 800ff5a:	4ba5      	ldr	r3, [pc, #660]	; (80101f0 <tcp_process+0x2ac>)
 800ff5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ff60:	49a4      	ldr	r1, [pc, #656]	; (80101f4 <tcp_process+0x2b0>)
 800ff62:	48a5      	ldr	r0, [pc, #660]	; (80101f8 <tcp_process+0x2b4>)
 800ff64:	f006 fb06 	bl	8016574 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ff68:	4ba4      	ldr	r3, [pc, #656]	; (80101fc <tcp_process+0x2b8>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f003 0304 	and.w	r3, r3, #4
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d04e      	beq.n	8010012 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	7d1b      	ldrb	r3, [r3, #20]
 800ff78:	2b02      	cmp	r3, #2
 800ff7a:	d108      	bne.n	800ff8e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff80:	4b9f      	ldr	r3, [pc, #636]	; (8010200 <tcp_process+0x2bc>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d123      	bne.n	800ffd0 <tcp_process+0x8c>
        acceptable = 1;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	76fb      	strb	r3, [r7, #27]
 800ff8c:	e020      	b.n	800ffd0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff92:	4b9c      	ldr	r3, [pc, #624]	; (8010204 <tcp_process+0x2c0>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d102      	bne.n	800ffa0 <tcp_process+0x5c>
        acceptable = 1;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	76fb      	strb	r3, [r7, #27]
 800ff9e:	e017      	b.n	800ffd0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffa0:	4b98      	ldr	r3, [pc, #608]	; (8010204 <tcp_process+0x2c0>)
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa8:	1ad3      	subs	r3, r2, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	db10      	blt.n	800ffd0 <tcp_process+0x8c>
 800ffae:	4b95      	ldr	r3, [pc, #596]	; (8010204 <tcp_process+0x2c0>)
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb6:	6879      	ldr	r1, [r7, #4]
 800ffb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffba:	440b      	add	r3, r1
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dc06      	bgt.n	800ffd0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8b5b      	ldrh	r3, [r3, #26]
 800ffc6:	f043 0302 	orr.w	r3, r3, #2
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ffd0:	7efb      	ldrb	r3, [r7, #27]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d01b      	beq.n	801000e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7d1b      	ldrb	r3, [r3, #20]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d106      	bne.n	800ffec <tcp_process+0xa8>
 800ffde:	4b84      	ldr	r3, [pc, #528]	; (80101f0 <tcp_process+0x2ac>)
 800ffe0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ffe4:	4988      	ldr	r1, [pc, #544]	; (8010208 <tcp_process+0x2c4>)
 800ffe6:	4884      	ldr	r0, [pc, #528]	; (80101f8 <tcp_process+0x2b4>)
 800ffe8:	f006 fac4 	bl	8016574 <iprintf>
      recv_flags |= TF_RESET;
 800ffec:	4b87      	ldr	r3, [pc, #540]	; (801020c <tcp_process+0x2c8>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f043 0308 	orr.w	r3, r3, #8
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	4b85      	ldr	r3, [pc, #532]	; (801020c <tcp_process+0x2c8>)
 800fff8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8b5b      	ldrh	r3, [r3, #26]
 800fffe:	f023 0301 	bic.w	r3, r3, #1
 8010002:	b29a      	uxth	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010008:	f06f 030d 	mvn.w	r3, #13
 801000c:	e37a      	b.n	8010704 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801000e:	2300      	movs	r3, #0
 8010010:	e378      	b.n	8010704 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010012:	4b7a      	ldr	r3, [pc, #488]	; (80101fc <tcp_process+0x2b8>)
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	f003 0302 	and.w	r3, r3, #2
 801001a:	2b00      	cmp	r3, #0
 801001c:	d010      	beq.n	8010040 <tcp_process+0xfc>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	7d1b      	ldrb	r3, [r3, #20]
 8010022:	2b02      	cmp	r3, #2
 8010024:	d00c      	beq.n	8010040 <tcp_process+0xfc>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	7d1b      	ldrb	r3, [r3, #20]
 801002a:	2b03      	cmp	r3, #3
 801002c:	d008      	beq.n	8010040 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	8b5b      	ldrh	r3, [r3, #26]
 8010032:	f043 0302 	orr.w	r3, r3, #2
 8010036:	b29a      	uxth	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801003c:	2300      	movs	r3, #0
 801003e:	e361      	b.n	8010704 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	8b5b      	ldrh	r3, [r3, #26]
 8010044:	f003 0310 	and.w	r3, r3, #16
 8010048:	2b00      	cmp	r3, #0
 801004a:	d103      	bne.n	8010054 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801004c:	4b70      	ldr	r3, [pc, #448]	; (8010210 <tcp_process+0x2cc>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f001 fc2d 	bl	80118c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	7d1b      	ldrb	r3, [r3, #20]
 801006e:	3b02      	subs	r3, #2
 8010070:	2b07      	cmp	r3, #7
 8010072:	f200 8337 	bhi.w	80106e4 <tcp_process+0x7a0>
 8010076:	a201      	add	r2, pc, #4	; (adr r2, 801007c <tcp_process+0x138>)
 8010078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007c:	0801009d 	.word	0x0801009d
 8010080:	080102cd 	.word	0x080102cd
 8010084:	08010445 	.word	0x08010445
 8010088:	0801046f 	.word	0x0801046f
 801008c:	08010593 	.word	0x08010593
 8010090:	08010445 	.word	0x08010445
 8010094:	0801061f 	.word	0x0801061f
 8010098:	080106af 	.word	0x080106af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801009c:	4b57      	ldr	r3, [pc, #348]	; (80101fc <tcp_process+0x2b8>)
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	f003 0310 	and.w	r3, r3, #16
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 80e4 	beq.w	8010272 <tcp_process+0x32e>
 80100aa:	4b54      	ldr	r3, [pc, #336]	; (80101fc <tcp_process+0x2b8>)
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	f003 0302 	and.w	r3, r3, #2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f000 80dd 	beq.w	8010272 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100bc:	1c5a      	adds	r2, r3, #1
 80100be:	4b50      	ldr	r3, [pc, #320]	; (8010200 <tcp_process+0x2bc>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	f040 80d5 	bne.w	8010272 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80100c8:	4b4e      	ldr	r3, [pc, #312]	; (8010204 <tcp_process+0x2c0>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80100da:	4b49      	ldr	r3, [pc, #292]	; (8010200 <tcp_process+0x2bc>)
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80100e2:	4b4c      	ldr	r3, [pc, #304]	; (8010214 <tcp_process+0x2d0>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	89db      	ldrh	r3, [r3, #14]
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80100fc:	4b41      	ldr	r3, [pc, #260]	; (8010204 <tcp_process+0x2c0>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	1e5a      	subs	r2, r3, #1
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2204      	movs	r2, #4
 801010a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3304      	adds	r3, #4
 8010114:	4618      	mov	r0, r3
 8010116:	f004 ff6d 	bl	8014ff4 <ip4_route>
 801011a:	4601      	mov	r1, r0
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	3304      	adds	r3, #4
 8010120:	461a      	mov	r2, r3
 8010122:	4620      	mov	r0, r4
 8010124:	f7ff f88e 	bl	800f244 <tcp_eff_send_mss_netif>
 8010128:	4603      	mov	r3, r0
 801012a:	461a      	mov	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010134:	009a      	lsls	r2, r3, #2
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010140:	428b      	cmp	r3, r1
 8010142:	bf38      	it	cc
 8010144:	460b      	movcc	r3, r1
 8010146:	429a      	cmp	r2, r3
 8010148:	d204      	bcs.n	8010154 <tcp_process+0x210>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	b29b      	uxth	r3, r3
 8010152:	e00d      	b.n	8010170 <tcp_process+0x22c>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	f241 121c 	movw	r2, #4380	; 0x111c
 801015e:	4293      	cmp	r3, r2
 8010160:	d904      	bls.n	801016c <tcp_process+0x228>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	b29b      	uxth	r3, r3
 801016a:	e001      	b.n	8010170 <tcp_process+0x22c>
 801016c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801017c:	2b00      	cmp	r3, #0
 801017e:	d106      	bne.n	801018e <tcp_process+0x24a>
 8010180:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <tcp_process+0x2ac>)
 8010182:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010186:	4924      	ldr	r1, [pc, #144]	; (8010218 <tcp_process+0x2d4>)
 8010188:	481b      	ldr	r0, [pc, #108]	; (80101f8 <tcp_process+0x2b4>)
 801018a:	f006 f9f3 	bl	8016574 <iprintf>
        --pcb->snd_queuelen;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010194:	3b01      	subs	r3, #1
 8010196:	b29a      	uxth	r2, r3
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d111      	bne.n	80101ce <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <tcp_process+0x280>
 80101b6:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <tcp_process+0x2ac>)
 80101b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80101bc:	4917      	ldr	r1, [pc, #92]	; (801021c <tcp_process+0x2d8>)
 80101be:	480e      	ldr	r0, [pc, #56]	; (80101f8 <tcp_process+0x2b4>)
 80101c0:	f006 f9d8 	bl	8016574 <iprintf>
          pcb->unsent = rseg->next;
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80101cc:	e003      	b.n	80101d6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80101d6:	69f8      	ldr	r0, [r7, #28]
 80101d8:	f7fe fc57 	bl	800ea8a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d11d      	bne.n	8010220 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101ea:	861a      	strh	r2, [r3, #48]	; 0x30
 80101ec:	e01f      	b.n	801022e <tcp_process+0x2ea>
 80101ee:	bf00      	nop
 80101f0:	08018920 	.word	0x08018920
 80101f4:	08018b58 	.word	0x08018b58
 80101f8:	0801896c 	.word	0x0801896c
 80101fc:	24000120 	.word	0x24000120
 8010200:	24000118 	.word	0x24000118
 8010204:	24000114 	.word	0x24000114
 8010208:	08018b74 	.word	0x08018b74
 801020c:	24000121 	.word	0x24000121
 8010210:	24003618 	.word	0x24003618
 8010214:	24000104 	.word	0x24000104
 8010218:	08018b94 	.word	0x08018b94
 801021c:	08018bac 	.word	0x08018bac
        } else {
          pcb->rtime = 0;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00a      	beq.n	801024e <tcp_process+0x30a>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	6910      	ldr	r0, [r2, #16]
 8010242:	2200      	movs	r2, #0
 8010244:	6879      	ldr	r1, [r7, #4]
 8010246:	4798      	blx	r3
 8010248:	4603      	mov	r3, r0
 801024a:	76bb      	strb	r3, [r7, #26]
 801024c:	e001      	b.n	8010252 <tcp_process+0x30e>
 801024e:	2300      	movs	r3, #0
 8010250:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010252:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010256:	f113 0f0d 	cmn.w	r3, #13
 801025a:	d102      	bne.n	8010262 <tcp_process+0x31e>
          return ERR_ABRT;
 801025c:	f06f 030c 	mvn.w	r3, #12
 8010260:	e250      	b.n	8010704 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	8b5b      	ldrh	r3, [r3, #26]
 8010266:	f043 0302 	orr.w	r3, r3, #2
 801026a:	b29a      	uxth	r2, r3
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010270:	e23a      	b.n	80106e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010272:	4b9d      	ldr	r3, [pc, #628]	; (80104e8 <tcp_process+0x5a4>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	f003 0310 	and.w	r3, r3, #16
 801027a:	2b00      	cmp	r3, #0
 801027c:	f000 8234 	beq.w	80106e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010280:	4b9a      	ldr	r3, [pc, #616]	; (80104ec <tcp_process+0x5a8>)
 8010282:	6819      	ldr	r1, [r3, #0]
 8010284:	4b9a      	ldr	r3, [pc, #616]	; (80104f0 <tcp_process+0x5ac>)
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	4b9a      	ldr	r3, [pc, #616]	; (80104f4 <tcp_process+0x5b0>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010290:	4b99      	ldr	r3, [pc, #612]	; (80104f8 <tcp_process+0x5b4>)
 8010292:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010294:	885b      	ldrh	r3, [r3, #2]
 8010296:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010298:	4a97      	ldr	r2, [pc, #604]	; (80104f8 <tcp_process+0x5b4>)
 801029a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801029c:	8812      	ldrh	r2, [r2, #0]
 801029e:	b292      	uxth	r2, r2
 80102a0:	9202      	str	r2, [sp, #8]
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	4b95      	ldr	r3, [pc, #596]	; (80104fc <tcp_process+0x5b8>)
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	4b95      	ldr	r3, [pc, #596]	; (8010500 <tcp_process+0x5bc>)
 80102aa:	4602      	mov	r2, r0
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f003 f8db 	bl	8013468 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102b8:	2b05      	cmp	r3, #5
 80102ba:	f200 8215 	bhi.w	80106e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f002 fea5 	bl	8013014 <tcp_rexmit_rto>
      break;
 80102ca:	e20d      	b.n	80106e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80102cc:	4b86      	ldr	r3, [pc, #536]	; (80104e8 <tcp_process+0x5a4>)
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	f003 0310 	and.w	r3, r3, #16
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 80a1 	beq.w	801041c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102da:	4b84      	ldr	r3, [pc, #528]	; (80104ec <tcp_process+0x5a8>)
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	3b01      	subs	r3, #1
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	db7e      	blt.n	80103e8 <tcp_process+0x4a4>
 80102ea:	4b80      	ldr	r3, [pc, #512]	; (80104ec <tcp_process+0x5a8>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	dc77      	bgt.n	80103e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2204      	movs	r2, #4
 80102fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010302:	2b00      	cmp	r3, #0
 8010304:	d102      	bne.n	801030c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010306:	23fa      	movs	r3, #250	; 0xfa
 8010308:	76bb      	strb	r3, [r7, #26]
 801030a:	e01d      	b.n	8010348 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d106      	bne.n	8010324 <tcp_process+0x3e0>
 8010316:	4b7b      	ldr	r3, [pc, #492]	; (8010504 <tcp_process+0x5c0>)
 8010318:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801031c:	497a      	ldr	r1, [pc, #488]	; (8010508 <tcp_process+0x5c4>)
 801031e:	487b      	ldr	r0, [pc, #492]	; (801050c <tcp_process+0x5c8>)
 8010320:	f006 f928 	bl	8016574 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00a      	beq.n	8010344 <tcp_process+0x400>
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	6910      	ldr	r0, [r2, #16]
 8010338:	2200      	movs	r2, #0
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	4798      	blx	r3
 801033e:	4603      	mov	r3, r0
 8010340:	76bb      	strb	r3, [r7, #26]
 8010342:	e001      	b.n	8010348 <tcp_process+0x404>
 8010344:	23f0      	movs	r3, #240	; 0xf0
 8010346:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010348:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00a      	beq.n	8010366 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010350:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010354:	f113 0f0d 	cmn.w	r3, #13
 8010358:	d002      	beq.n	8010360 <tcp_process+0x41c>
              tcp_abort(pcb);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7fd fcf0 	bl	800dd40 <tcp_abort>
            }
            return ERR_ABRT;
 8010360:	f06f 030c 	mvn.w	r3, #12
 8010364:	e1ce      	b.n	8010704 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 fae0 	bl	801092c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801036c:	4b68      	ldr	r3, [pc, #416]	; (8010510 <tcp_process+0x5cc>)
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d005      	beq.n	8010380 <tcp_process+0x43c>
            recv_acked--;
 8010374:	4b66      	ldr	r3, [pc, #408]	; (8010510 <tcp_process+0x5cc>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	3b01      	subs	r3, #1
 801037a:	b29a      	uxth	r2, r3
 801037c:	4b64      	ldr	r3, [pc, #400]	; (8010510 <tcp_process+0x5cc>)
 801037e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010384:	009a      	lsls	r2, r3, #2
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010390:	428b      	cmp	r3, r1
 8010392:	bf38      	it	cc
 8010394:	460b      	movcc	r3, r1
 8010396:	429a      	cmp	r2, r3
 8010398:	d204      	bcs.n	80103a4 <tcp_process+0x460>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	e00d      	b.n	80103c0 <tcp_process+0x47c>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103a8:	005b      	lsls	r3, r3, #1
 80103aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d904      	bls.n	80103bc <tcp_process+0x478>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103b6:	005b      	lsls	r3, r3, #1
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	e001      	b.n	80103c0 <tcp_process+0x47c>
 80103bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80103c6:	4b53      	ldr	r3, [pc, #332]	; (8010514 <tcp_process+0x5d0>)
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	f003 0320 	and.w	r3, r3, #32
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d037      	beq.n	8010442 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8b5b      	ldrh	r3, [r3, #26]
 80103d6:	f043 0302 	orr.w	r3, r3, #2
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2207      	movs	r2, #7
 80103e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80103e6:	e02c      	b.n	8010442 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e8:	4b40      	ldr	r3, [pc, #256]	; (80104ec <tcp_process+0x5a8>)
 80103ea:	6819      	ldr	r1, [r3, #0]
 80103ec:	4b40      	ldr	r3, [pc, #256]	; (80104f0 <tcp_process+0x5ac>)
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	461a      	mov	r2, r3
 80103f2:	4b40      	ldr	r3, [pc, #256]	; (80104f4 <tcp_process+0x5b0>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f8:	4b3f      	ldr	r3, [pc, #252]	; (80104f8 <tcp_process+0x5b4>)
 80103fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103fc:	885b      	ldrh	r3, [r3, #2]
 80103fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010400:	4a3d      	ldr	r2, [pc, #244]	; (80104f8 <tcp_process+0x5b4>)
 8010402:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010404:	8812      	ldrh	r2, [r2, #0]
 8010406:	b292      	uxth	r2, r2
 8010408:	9202      	str	r2, [sp, #8]
 801040a:	9301      	str	r3, [sp, #4]
 801040c:	4b3b      	ldr	r3, [pc, #236]	; (80104fc <tcp_process+0x5b8>)
 801040e:	9300      	str	r3, [sp, #0]
 8010410:	4b3b      	ldr	r3, [pc, #236]	; (8010500 <tcp_process+0x5bc>)
 8010412:	4602      	mov	r2, r0
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f003 f827 	bl	8013468 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801041a:	e167      	b.n	80106ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801041c:	4b32      	ldr	r3, [pc, #200]	; (80104e8 <tcp_process+0x5a4>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	f003 0302 	and.w	r3, r3, #2
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 8161 	beq.w	80106ec <tcp_process+0x7a8>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801042e:	1e5a      	subs	r2, r3, #1
 8010430:	4b30      	ldr	r3, [pc, #192]	; (80104f4 <tcp_process+0x5b0>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	429a      	cmp	r2, r3
 8010436:	f040 8159 	bne.w	80106ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f002 fe0c 	bl	8013058 <tcp_rexmit>
      break;
 8010440:	e154      	b.n	80106ec <tcp_process+0x7a8>
 8010442:	e153      	b.n	80106ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 fa71 	bl	801092c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801044a:	4b32      	ldr	r3, [pc, #200]	; (8010514 <tcp_process+0x5d0>)
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	f003 0320 	and.w	r3, r3, #32
 8010452:	2b00      	cmp	r3, #0
 8010454:	f000 814c 	beq.w	80106f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	8b5b      	ldrh	r3, [r3, #26]
 801045c:	f043 0302 	orr.w	r3, r3, #2
 8010460:	b29a      	uxth	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2207      	movs	r2, #7
 801046a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801046c:	e140      	b.n	80106f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 fa5c 	bl	801092c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010474:	4b27      	ldr	r3, [pc, #156]	; (8010514 <tcp_process+0x5d0>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	f003 0320 	and.w	r3, r3, #32
 801047c:	2b00      	cmp	r3, #0
 801047e:	d071      	beq.n	8010564 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010480:	4b19      	ldr	r3, [pc, #100]	; (80104e8 <tcp_process+0x5a4>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	f003 0310 	and.w	r3, r3, #16
 8010488:	2b00      	cmp	r3, #0
 801048a:	d060      	beq.n	801054e <tcp_process+0x60a>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010490:	4b16      	ldr	r3, [pc, #88]	; (80104ec <tcp_process+0x5a8>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	429a      	cmp	r2, r3
 8010496:	d15a      	bne.n	801054e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801049c:	2b00      	cmp	r3, #0
 801049e:	d156      	bne.n	801054e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	8b5b      	ldrh	r3, [r3, #26]
 80104a4:	f043 0302 	orr.w	r3, r3, #2
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7fe fdbe 	bl	800f030 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80104b4:	4b18      	ldr	r3, [pc, #96]	; (8010518 <tcp_process+0x5d4>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d105      	bne.n	80104ca <tcp_process+0x586>
 80104be:	4b16      	ldr	r3, [pc, #88]	; (8010518 <tcp_process+0x5d4>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	4a14      	ldr	r2, [pc, #80]	; (8010518 <tcp_process+0x5d4>)
 80104c6:	6013      	str	r3, [r2, #0]
 80104c8:	e02e      	b.n	8010528 <tcp_process+0x5e4>
 80104ca:	4b13      	ldr	r3, [pc, #76]	; (8010518 <tcp_process+0x5d4>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	617b      	str	r3, [r7, #20]
 80104d0:	e027      	b.n	8010522 <tcp_process+0x5de>
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d11f      	bne.n	801051c <tcp_process+0x5d8>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	68da      	ldr	r2, [r3, #12]
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	60da      	str	r2, [r3, #12]
 80104e4:	e020      	b.n	8010528 <tcp_process+0x5e4>
 80104e6:	bf00      	nop
 80104e8:	24000120 	.word	0x24000120
 80104ec:	24000118 	.word	0x24000118
 80104f0:	2400011e 	.word	0x2400011e
 80104f4:	24000114 	.word	0x24000114
 80104f8:	24000104 	.word	0x24000104
 80104fc:	24000734 	.word	0x24000734
 8010500:	24000738 	.word	0x24000738
 8010504:	08018920 	.word	0x08018920
 8010508:	08018bc0 	.word	0x08018bc0
 801050c:	0801896c 	.word	0x0801896c
 8010510:	2400011c 	.word	0x2400011c
 8010514:	24000121 	.word	0x24000121
 8010518:	24003614 	.word	0x24003614
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	617b      	str	r3, [r7, #20]
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1d4      	bne.n	80104d2 <tcp_process+0x58e>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	60da      	str	r2, [r3, #12]
 801052e:	4b77      	ldr	r3, [pc, #476]	; (801070c <tcp_process+0x7c8>)
 8010530:	2201      	movs	r2, #1
 8010532:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	220a      	movs	r2, #10
 8010538:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801053a:	4b75      	ldr	r3, [pc, #468]	; (8010710 <tcp_process+0x7cc>)
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	60da      	str	r2, [r3, #12]
 8010542:	4a73      	ldr	r2, [pc, #460]	; (8010710 <tcp_process+0x7cc>)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6013      	str	r3, [r2, #0]
 8010548:	f003 f950 	bl	80137ec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801054c:	e0d2      	b.n	80106f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8b5b      	ldrh	r3, [r3, #26]
 8010552:	f043 0302 	orr.w	r3, r3, #2
 8010556:	b29a      	uxth	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2208      	movs	r2, #8
 8010560:	751a      	strb	r2, [r3, #20]
      break;
 8010562:	e0c7      	b.n	80106f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010564:	4b6b      	ldr	r3, [pc, #428]	; (8010714 <tcp_process+0x7d0>)
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	f003 0310 	and.w	r3, r3, #16
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 80c1 	beq.w	80106f4 <tcp_process+0x7b0>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010576:	4b68      	ldr	r3, [pc, #416]	; (8010718 <tcp_process+0x7d4>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	429a      	cmp	r2, r3
 801057c:	f040 80ba 	bne.w	80106f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010584:	2b00      	cmp	r3, #0
 8010586:	f040 80b5 	bne.w	80106f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2206      	movs	r2, #6
 801058e:	751a      	strb	r2, [r3, #20]
      break;
 8010590:	e0b0      	b.n	80106f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 f9ca 	bl	801092c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010598:	4b60      	ldr	r3, [pc, #384]	; (801071c <tcp_process+0x7d8>)
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	f003 0320 	and.w	r3, r3, #32
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 80a9 	beq.w	80106f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	8b5b      	ldrh	r3, [r3, #26]
 80105aa:	f043 0302 	orr.w	r3, r3, #2
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7fe fd3b 	bl	800f030 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80105ba:	4b59      	ldr	r3, [pc, #356]	; (8010720 <tcp_process+0x7dc>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d105      	bne.n	80105d0 <tcp_process+0x68c>
 80105c4:	4b56      	ldr	r3, [pc, #344]	; (8010720 <tcp_process+0x7dc>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	4a55      	ldr	r2, [pc, #340]	; (8010720 <tcp_process+0x7dc>)
 80105cc:	6013      	str	r3, [r2, #0]
 80105ce:	e013      	b.n	80105f8 <tcp_process+0x6b4>
 80105d0:	4b53      	ldr	r3, [pc, #332]	; (8010720 <tcp_process+0x7dc>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	613b      	str	r3, [r7, #16]
 80105d6:	e00c      	b.n	80105f2 <tcp_process+0x6ae>
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d104      	bne.n	80105ec <tcp_process+0x6a8>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	68da      	ldr	r2, [r3, #12]
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	60da      	str	r2, [r3, #12]
 80105ea:	e005      	b.n	80105f8 <tcp_process+0x6b4>
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	613b      	str	r3, [r7, #16]
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1ef      	bne.n	80105d8 <tcp_process+0x694>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	60da      	str	r2, [r3, #12]
 80105fe:	4b43      	ldr	r3, [pc, #268]	; (801070c <tcp_process+0x7c8>)
 8010600:	2201      	movs	r2, #1
 8010602:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	220a      	movs	r2, #10
 8010608:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801060a:	4b41      	ldr	r3, [pc, #260]	; (8010710 <tcp_process+0x7cc>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	60da      	str	r2, [r3, #12]
 8010612:	4a3f      	ldr	r2, [pc, #252]	; (8010710 <tcp_process+0x7cc>)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6013      	str	r3, [r2, #0]
 8010618:	f003 f8e8 	bl	80137ec <tcp_timer_needed>
      }
      break;
 801061c:	e06c      	b.n	80106f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 f984 	bl	801092c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010624:	4b3b      	ldr	r3, [pc, #236]	; (8010714 <tcp_process+0x7d0>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 0310 	and.w	r3, r3, #16
 801062c:	2b00      	cmp	r3, #0
 801062e:	d065      	beq.n	80106fc <tcp_process+0x7b8>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010634:	4b38      	ldr	r3, [pc, #224]	; (8010718 <tcp_process+0x7d4>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	429a      	cmp	r2, r3
 801063a:	d15f      	bne.n	80106fc <tcp_process+0x7b8>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010640:	2b00      	cmp	r3, #0
 8010642:	d15b      	bne.n	80106fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7fe fcf3 	bl	800f030 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801064a:	4b35      	ldr	r3, [pc, #212]	; (8010720 <tcp_process+0x7dc>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	429a      	cmp	r2, r3
 8010652:	d105      	bne.n	8010660 <tcp_process+0x71c>
 8010654:	4b32      	ldr	r3, [pc, #200]	; (8010720 <tcp_process+0x7dc>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	4a31      	ldr	r2, [pc, #196]	; (8010720 <tcp_process+0x7dc>)
 801065c:	6013      	str	r3, [r2, #0]
 801065e:	e013      	b.n	8010688 <tcp_process+0x744>
 8010660:	4b2f      	ldr	r3, [pc, #188]	; (8010720 <tcp_process+0x7dc>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	e00c      	b.n	8010682 <tcp_process+0x73e>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	429a      	cmp	r2, r3
 8010670:	d104      	bne.n	801067c <tcp_process+0x738>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	68da      	ldr	r2, [r3, #12]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	60da      	str	r2, [r3, #12]
 801067a:	e005      	b.n	8010688 <tcp_process+0x744>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	60fb      	str	r3, [r7, #12]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1ef      	bne.n	8010668 <tcp_process+0x724>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	60da      	str	r2, [r3, #12]
 801068e:	4b1f      	ldr	r3, [pc, #124]	; (801070c <tcp_process+0x7c8>)
 8010690:	2201      	movs	r2, #1
 8010692:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	220a      	movs	r2, #10
 8010698:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801069a:	4b1d      	ldr	r3, [pc, #116]	; (8010710 <tcp_process+0x7cc>)
 801069c:	681a      	ldr	r2, [r3, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	60da      	str	r2, [r3, #12]
 80106a2:	4a1b      	ldr	r2, [pc, #108]	; (8010710 <tcp_process+0x7cc>)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6013      	str	r3, [r2, #0]
 80106a8:	f003 f8a0 	bl	80137ec <tcp_timer_needed>
      }
      break;
 80106ac:	e026      	b.n	80106fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 f93c 	bl	801092c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106b4:	4b17      	ldr	r3, [pc, #92]	; (8010714 <tcp_process+0x7d0>)
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	f003 0310 	and.w	r3, r3, #16
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d01f      	beq.n	8010700 <tcp_process+0x7bc>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106c4:	4b14      	ldr	r3, [pc, #80]	; (8010718 <tcp_process+0x7d4>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d119      	bne.n	8010700 <tcp_process+0x7bc>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d115      	bne.n	8010700 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80106d4:	4b11      	ldr	r3, [pc, #68]	; (801071c <tcp_process+0x7d8>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	f043 0310 	orr.w	r3, r3, #16
 80106dc:	b2da      	uxtb	r2, r3
 80106de:	4b0f      	ldr	r3, [pc, #60]	; (801071c <tcp_process+0x7d8>)
 80106e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80106e2:	e00d      	b.n	8010700 <tcp_process+0x7bc>
    default:
      break;
 80106e4:	bf00      	nop
 80106e6:	e00c      	b.n	8010702 <tcp_process+0x7be>
      break;
 80106e8:	bf00      	nop
 80106ea:	e00a      	b.n	8010702 <tcp_process+0x7be>
      break;
 80106ec:	bf00      	nop
 80106ee:	e008      	b.n	8010702 <tcp_process+0x7be>
      break;
 80106f0:	bf00      	nop
 80106f2:	e006      	b.n	8010702 <tcp_process+0x7be>
      break;
 80106f4:	bf00      	nop
 80106f6:	e004      	b.n	8010702 <tcp_process+0x7be>
      break;
 80106f8:	bf00      	nop
 80106fa:	e002      	b.n	8010702 <tcp_process+0x7be>
      break;
 80106fc:	bf00      	nop
 80106fe:	e000      	b.n	8010702 <tcp_process+0x7be>
      break;
 8010700:	bf00      	nop
  }
  return ERR_OK;
 8010702:	2300      	movs	r3, #0
}
 8010704:	4618      	mov	r0, r3
 8010706:	3724      	adds	r7, #36	; 0x24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd90      	pop	{r4, r7, pc}
 801070c:	24003610 	.word	0x24003610
 8010710:	24003624 	.word	0x24003624
 8010714:	24000120 	.word	0x24000120
 8010718:	24000118 	.word	0x24000118
 801071c:	24000121 	.word	0x24000121
 8010720:	24003614 	.word	0x24003614

08010724 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d106      	bne.n	8010742 <tcp_oos_insert_segment+0x1e>
 8010734:	4b3b      	ldr	r3, [pc, #236]	; (8010824 <tcp_oos_insert_segment+0x100>)
 8010736:	f240 421f 	movw	r2, #1055	; 0x41f
 801073a:	493b      	ldr	r1, [pc, #236]	; (8010828 <tcp_oos_insert_segment+0x104>)
 801073c:	483b      	ldr	r0, [pc, #236]	; (801082c <tcp_oos_insert_segment+0x108>)
 801073e:	f005 ff19 	bl	8016574 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	899b      	ldrh	r3, [r3, #12]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7fb f94a 	bl	800b9e4 <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	b2db      	uxtb	r3, r3
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	2b00      	cmp	r3, #0
 801075a:	d028      	beq.n	80107ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801075c:	6838      	ldr	r0, [r7, #0]
 801075e:	f7fe f97f 	bl	800ea60 <tcp_segs_free>
    next = NULL;
 8010762:	2300      	movs	r3, #0
 8010764:	603b      	str	r3, [r7, #0]
 8010766:	e056      	b.n	8010816 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	899b      	ldrh	r3, [r3, #12]
 801076e:	b29b      	uxth	r3, r3
 8010770:	4618      	mov	r0, r3
 8010772:	f7fb f937 	bl	800b9e4 <lwip_htons>
 8010776:	4603      	mov	r3, r0
 8010778:	b2db      	uxtb	r3, r3
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	d00d      	beq.n	801079e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	899b      	ldrh	r3, [r3, #12]
 8010788:	b29c      	uxth	r4, r3
 801078a:	2001      	movs	r0, #1
 801078c:	f7fb f92a 	bl	800b9e4 <lwip_htons>
 8010790:	4603      	mov	r3, r0
 8010792:	461a      	mov	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	4322      	orrs	r2, r4
 801079a:	b292      	uxth	r2, r2
 801079c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f7fe f96e 	bl	800ea8a <tcp_seg_free>
    while (next &&
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d00e      	beq.n	80107d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	891b      	ldrh	r3, [r3, #8]
 80107b8:	461a      	mov	r2, r3
 80107ba:	4b1d      	ldr	r3, [pc, #116]	; (8010830 <tcp_oos_insert_segment+0x10c>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	441a      	add	r2, r3
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	6839      	ldr	r1, [r7, #0]
 80107c8:	8909      	ldrh	r1, [r1, #8]
 80107ca:	440b      	add	r3, r1
 80107cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	daca      	bge.n	8010768 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d01e      	beq.n	8010816 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	891b      	ldrh	r3, [r3, #8]
 80107dc:	461a      	mov	r2, r3
 80107de:	4b14      	ldr	r3, [pc, #80]	; (8010830 <tcp_oos_insert_segment+0x10c>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	441a      	add	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	dd12      	ble.n	8010816 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	4b0d      	ldr	r3, [pc, #52]	; (8010830 <tcp_oos_insert_segment+0x10c>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	b29a      	uxth	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685a      	ldr	r2, [r3, #4]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	891b      	ldrh	r3, [r3, #8]
 801080e:	4619      	mov	r1, r3
 8010810:	4610      	mov	r0, r2
 8010812:	f7fc fb77 	bl	800cf04 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	683a      	ldr	r2, [r7, #0]
 801081a:	601a      	str	r2, [r3, #0]
}
 801081c:	bf00      	nop
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	bd90      	pop	{r4, r7, pc}
 8010824:	08018920 	.word	0x08018920
 8010828:	08018be0 	.word	0x08018be0
 801082c:	0801896c 	.word	0x0801896c
 8010830:	24000114 	.word	0x24000114

08010834 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010834:	b5b0      	push	{r4, r5, r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010842:	e03e      	b.n	80108c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	4618      	mov	r0, r3
 8010854:	f7fc fd64 	bl	800d320 <pbuf_clen>
 8010858:	4603      	mov	r3, r0
 801085a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010862:	8a7a      	ldrh	r2, [r7, #18]
 8010864:	429a      	cmp	r2, r3
 8010866:	d906      	bls.n	8010876 <tcp_free_acked_segments+0x42>
 8010868:	4b2a      	ldr	r3, [pc, #168]	; (8010914 <tcp_free_acked_segments+0xe0>)
 801086a:	f240 4257 	movw	r2, #1111	; 0x457
 801086e:	492a      	ldr	r1, [pc, #168]	; (8010918 <tcp_free_acked_segments+0xe4>)
 8010870:	482a      	ldr	r0, [pc, #168]	; (801091c <tcp_free_acked_segments+0xe8>)
 8010872:	f005 fe7f 	bl	8016574 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801087c:	8a7b      	ldrh	r3, [r7, #18]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	b29a      	uxth	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	891a      	ldrh	r2, [r3, #8]
 801088c:	4b24      	ldr	r3, [pc, #144]	; (8010920 <tcp_free_acked_segments+0xec>)
 801088e:	881b      	ldrh	r3, [r3, #0]
 8010890:	4413      	add	r3, r2
 8010892:	b29a      	uxth	r2, r3
 8010894:	4b22      	ldr	r3, [pc, #136]	; (8010920 <tcp_free_acked_segments+0xec>)
 8010896:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010898:	6978      	ldr	r0, [r7, #20]
 801089a:	f7fe f8f6 	bl	800ea8a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00c      	beq.n	80108c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d109      	bne.n	80108c2 <tcp_free_acked_segments+0x8e>
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d106      	bne.n	80108c2 <tcp_free_acked_segments+0x8e>
 80108b4:	4b17      	ldr	r3, [pc, #92]	; (8010914 <tcp_free_acked_segments+0xe0>)
 80108b6:	f240 4261 	movw	r2, #1121	; 0x461
 80108ba:	491a      	ldr	r1, [pc, #104]	; (8010924 <tcp_free_acked_segments+0xf0>)
 80108bc:	4817      	ldr	r0, [pc, #92]	; (801091c <tcp_free_acked_segments+0xe8>)
 80108be:	f005 fe59 	bl	8016574 <iprintf>
  while (seg_list != NULL &&
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d020      	beq.n	801090a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fb f89d 	bl	800ba0e <lwip_htonl>
 80108d4:	4604      	mov	r4, r0
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	891b      	ldrh	r3, [r3, #8]
 80108da:	461d      	mov	r5, r3
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	899b      	ldrh	r3, [r3, #12]
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7fb f87d 	bl	800b9e4 <lwip_htons>
 80108ea:	4603      	mov	r3, r0
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	f003 0303 	and.w	r3, r3, #3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d001      	beq.n	80108fa <tcp_free_acked_segments+0xc6>
 80108f6:	2301      	movs	r3, #1
 80108f8:	e000      	b.n	80108fc <tcp_free_acked_segments+0xc8>
 80108fa:	2300      	movs	r3, #0
 80108fc:	442b      	add	r3, r5
 80108fe:	18e2      	adds	r2, r4, r3
 8010900:	4b09      	ldr	r3, [pc, #36]	; (8010928 <tcp_free_acked_segments+0xf4>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010906:	2b00      	cmp	r3, #0
 8010908:	dd9c      	ble.n	8010844 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801090a:	68bb      	ldr	r3, [r7, #8]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3718      	adds	r7, #24
 8010910:	46bd      	mov	sp, r7
 8010912:	bdb0      	pop	{r4, r5, r7, pc}
 8010914:	08018920 	.word	0x08018920
 8010918:	08018c08 	.word	0x08018c08
 801091c:	0801896c 	.word	0x0801896c
 8010920:	2400011c 	.word	0x2400011c
 8010924:	08018c30 	.word	0x08018c30
 8010928:	24000118 	.word	0x24000118

0801092c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801092c:	b5b0      	push	{r4, r5, r7, lr}
 801092e:	b094      	sub	sp, #80	; 0x50
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <tcp_receive+0x20>
 801093e:	4ba6      	ldr	r3, [pc, #664]	; (8010bd8 <tcp_receive+0x2ac>)
 8010940:	f240 427b 	movw	r2, #1147	; 0x47b
 8010944:	49a5      	ldr	r1, [pc, #660]	; (8010bdc <tcp_receive+0x2b0>)
 8010946:	48a6      	ldr	r0, [pc, #664]	; (8010be0 <tcp_receive+0x2b4>)
 8010948:	f005 fe14 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	7d1b      	ldrb	r3, [r3, #20]
 8010950:	2b03      	cmp	r3, #3
 8010952:	d806      	bhi.n	8010962 <tcp_receive+0x36>
 8010954:	4ba0      	ldr	r3, [pc, #640]	; (8010bd8 <tcp_receive+0x2ac>)
 8010956:	f240 427c 	movw	r2, #1148	; 0x47c
 801095a:	49a2      	ldr	r1, [pc, #648]	; (8010be4 <tcp_receive+0x2b8>)
 801095c:	48a0      	ldr	r0, [pc, #640]	; (8010be0 <tcp_receive+0x2b4>)
 801095e:	f005 fe09 	bl	8016574 <iprintf>

  if (flags & TCP_ACK) {
 8010962:	4ba1      	ldr	r3, [pc, #644]	; (8010be8 <tcp_receive+0x2bc>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	f003 0310 	and.w	r3, r3, #16
 801096a:	2b00      	cmp	r3, #0
 801096c:	f000 8263 	beq.w	8010e36 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010976:	461a      	mov	r2, r3
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801097c:	4413      	add	r3, r2
 801097e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010984:	4b99      	ldr	r3, [pc, #612]	; (8010bec <tcp_receive+0x2c0>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	2b00      	cmp	r3, #0
 801098c:	db1b      	blt.n	80109c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010992:	4b96      	ldr	r3, [pc, #600]	; (8010bec <tcp_receive+0x2c0>)
 8010994:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010996:	429a      	cmp	r2, r3
 8010998:	d106      	bne.n	80109a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801099e:	4b94      	ldr	r3, [pc, #592]	; (8010bf0 <tcp_receive+0x2c4>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	db0e      	blt.n	80109c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109ac:	4b90      	ldr	r3, [pc, #576]	; (8010bf0 <tcp_receive+0x2c4>)
 80109ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d125      	bne.n	8010a00 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109b4:	4b8f      	ldr	r3, [pc, #572]	; (8010bf4 <tcp_receive+0x2c8>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	89db      	ldrh	r3, [r3, #14]
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d91c      	bls.n	8010a00 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80109c6:	4b8b      	ldr	r3, [pc, #556]	; (8010bf4 <tcp_receive+0x2c8>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	89db      	ldrh	r3, [r3, #14]
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d205      	bcs.n	80109f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80109f0:	4b7e      	ldr	r3, [pc, #504]	; (8010bec <tcp_receive+0x2c0>)
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80109f8:	4b7d      	ldr	r3, [pc, #500]	; (8010bf0 <tcp_receive+0x2c4>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a00:	4b7b      	ldr	r3, [pc, #492]	; (8010bf0 <tcp_receive+0x2c4>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	dc58      	bgt.n	8010ac0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a0e:	4b7a      	ldr	r3, [pc, #488]	; (8010bf8 <tcp_receive+0x2cc>)
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d14b      	bne.n	8010aae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010a20:	4413      	add	r3, r2
 8010a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d142      	bne.n	8010aae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	db3d      	blt.n	8010aae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a36:	4b6e      	ldr	r3, [pc, #440]	; (8010bf0 <tcp_receive+0x2c4>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d137      	bne.n	8010aae <tcp_receive+0x182>
              found_dupack = 1;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a48:	2bff      	cmp	r3, #255	; 0xff
 8010a4a:	d007      	beq.n	8010a5c <tcp_receive+0x130>
                ++pcb->dupacks;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a52:	3301      	adds	r3, #1
 8010a54:	b2da      	uxtb	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a62:	2b03      	cmp	r3, #3
 8010a64:	d91b      	bls.n	8010a9e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a70:	4413      	add	r3, r2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d30a      	bcc.n	8010a94 <tcp_receive+0x168>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a88:	4413      	add	r3, r2
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a92:	e004      	b.n	8010a9e <tcp_receive+0x172>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010aa4:	2b02      	cmp	r3, #2
 8010aa6:	d902      	bls.n	8010aae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f002 fb41 	bl	8013130 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f040 8160 	bne.w	8010d76 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010abe:	e15a      	b.n	8010d76 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ac0:	4b4b      	ldr	r3, [pc, #300]	; (8010bf0 <tcp_receive+0x2c4>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	3b01      	subs	r3, #1
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f2c0 814d 	blt.w	8010d6c <tcp_receive+0x440>
 8010ad2:	4b47      	ldr	r3, [pc, #284]	; (8010bf0 <tcp_receive+0x2c4>)
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f300 8145 	bgt.w	8010d6c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	8b5b      	ldrh	r3, [r3, #26]
 8010ae6:	f003 0304 	and.w	r3, r3, #4
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d010      	beq.n	8010b10 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	8b5b      	ldrh	r3, [r3, #26]
 8010af2:	f023 0304 	bic.w	r3, r3, #4
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2200      	movs	r2, #0
 8010b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b1e:	10db      	asrs	r3, r3, #3
 8010b20:	b21b      	sxth	r3, r3
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	4413      	add	r3, r2
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	b21a      	sxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b38:	4b2d      	ldr	r3, [pc, #180]	; (8010bf0 <tcp_receive+0x2c4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	1ad3      	subs	r3, r2, r3
 8010b46:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010b50:	4b27      	ldr	r3, [pc, #156]	; (8010bf0 <tcp_receive+0x2c4>)
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	7d1b      	ldrb	r3, [r3, #20]
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	f240 8096 	bls.w	8010c8e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d244      	bcs.n	8010bfc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	8b5b      	ldrh	r3, [r3, #26]
 8010b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <tcp_receive+0x256>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e000      	b.n	8010b84 <tcp_receive+0x258>
 8010b82:	2302      	movs	r3, #2
 8010b84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010b88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b92:	fb12 f303 	smulbb	r3, r2, r3
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	bf28      	it	cs
 8010b9e:	4613      	movcs	r3, r2
 8010ba0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ba8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010baa:	4413      	add	r3, r2
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d309      	bcc.n	8010bcc <tcp_receive+0x2a0>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bc0:	4413      	add	r3, r2
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bca:	e060      	b.n	8010c8e <tcp_receive+0x362>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bd6:	e05a      	b.n	8010c8e <tcp_receive+0x362>
 8010bd8:	08018920 	.word	0x08018920
 8010bdc:	08018c50 	.word	0x08018c50
 8010be0:	0801896c 	.word	0x0801896c
 8010be4:	08018c6c 	.word	0x08018c6c
 8010be8:	24000120 	.word	0x24000120
 8010bec:	24000114 	.word	0x24000114
 8010bf0:	24000118 	.word	0x24000118
 8010bf4:	24000104 	.word	0x24000104
 8010bf8:	2400011e 	.word	0x2400011e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c04:	4413      	add	r3, r2
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d309      	bcc.n	8010c26 <tcp_receive+0x2fa>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c1a:	4413      	add	r3, r2
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010c24:	e004      	b.n	8010c30 <tcp_receive+0x304>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d326      	bcc.n	8010c8e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c4c:	1ad3      	subs	r3, r2, r3
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c60:	4413      	add	r3, r2
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d30a      	bcc.n	8010c84 <tcp_receive+0x358>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c78:	4413      	add	r3, r2
 8010c7a:	b29a      	uxth	r2, r3
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c82:	e004      	b.n	8010c8e <tcp_receive+0x362>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c96:	4a98      	ldr	r2, [pc, #608]	; (8010ef8 <tcp_receive+0x5cc>)
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f7ff fdcb 	bl	8010834 <tcp_free_acked_segments>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cac:	4a93      	ldr	r2, [pc, #588]	; (8010efc <tcp_receive+0x5d0>)
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7ff fdc0 	bl	8010834 <tcp_free_acked_segments>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d104      	bne.n	8010ccc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cc8:	861a      	strh	r2, [r3, #48]	; 0x30
 8010cca:	e002      	b.n	8010cd2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d103      	bne.n	8010ce8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010cee:	4b84      	ldr	r3, [pc, #528]	; (8010f00 <tcp_receive+0x5d4>)
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	8b5b      	ldrh	r3, [r3, #26]
 8010d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d035      	beq.n	8010d74 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d118      	bne.n	8010d42 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00c      	beq.n	8010d32 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fa fe72 	bl	800ba0e <lwip_htonl>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	dc20      	bgt.n	8010d74 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	8b5b      	ldrh	r3, [r3, #26]
 8010d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d40:	e018      	b.n	8010d74 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fa fe5d 	bl	800ba0e <lwip_htonl>
 8010d54:	4603      	mov	r3, r0
 8010d56:	1ae3      	subs	r3, r4, r3
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	dc0b      	bgt.n	8010d74 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	8b5b      	ldrh	r3, [r3, #26]
 8010d60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d64:	b29a      	uxth	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d6a:	e003      	b.n	8010d74 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f002 fbcd 	bl	801350c <tcp_send_empty_ack>
 8010d72:	e000      	b.n	8010d76 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d74:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d05b      	beq.n	8010e36 <tcp_receive+0x50a>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d82:	4b60      	ldr	r3, [pc, #384]	; (8010f04 <tcp_receive+0x5d8>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	da54      	bge.n	8010e36 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010d8c:	4b5e      	ldr	r3, [pc, #376]	; (8010f08 <tcp_receive+0x5dc>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010da0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010daa:	10db      	asrs	r3, r3, #3
 8010dac:	b21b      	sxth	r3, r3
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010dc4:	4413      	add	r3, r2
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	b21a      	sxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010dce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	da05      	bge.n	8010de2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010dda:	425b      	negs	r3, r3
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010de2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010dec:	109b      	asrs	r3, r3, #2
 8010dee:	b21b      	sxth	r3, r3
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e06:	4413      	add	r3, r2
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	b21a      	sxth	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e16:	10db      	asrs	r3, r3, #3
 8010e18:	b21b      	sxth	r3, r3
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	4413      	add	r3, r2
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	b21a      	sxth	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e36:	4b35      	ldr	r3, [pc, #212]	; (8010f0c <tcp_receive+0x5e0>)
 8010e38:	881b      	ldrh	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f000 84e1 	beq.w	8011802 <tcp_receive+0xed6>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	7d1b      	ldrb	r3, [r3, #20]
 8010e44:	2b06      	cmp	r3, #6
 8010e46:	f200 84dc 	bhi.w	8011802 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e4e:	4b30      	ldr	r3, [pc, #192]	; (8010f10 <tcp_receive+0x5e4>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	1ad3      	subs	r3, r2, r3
 8010e54:	3b01      	subs	r3, #1
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f2c0 808e 	blt.w	8010f78 <tcp_receive+0x64c>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e60:	4b2a      	ldr	r3, [pc, #168]	; (8010f0c <tcp_receive+0x5e0>)
 8010e62:	881b      	ldrh	r3, [r3, #0]
 8010e64:	4619      	mov	r1, r3
 8010e66:	4b2a      	ldr	r3, [pc, #168]	; (8010f10 <tcp_receive+0x5e4>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	440b      	add	r3, r1
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	3301      	adds	r3, #1
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f300 8081 	bgt.w	8010f78 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e76:	4b27      	ldr	r3, [pc, #156]	; (8010f14 <tcp_receive+0x5e8>)
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e80:	4b23      	ldr	r3, [pc, #140]	; (8010f10 <tcp_receive+0x5e4>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010e88:	4b22      	ldr	r3, [pc, #136]	; (8010f14 <tcp_receive+0x5e8>)
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d106      	bne.n	8010e9e <tcp_receive+0x572>
 8010e90:	4b21      	ldr	r3, [pc, #132]	; (8010f18 <tcp_receive+0x5ec>)
 8010e92:	f240 5294 	movw	r2, #1428	; 0x594
 8010e96:	4921      	ldr	r1, [pc, #132]	; (8010f1c <tcp_receive+0x5f0>)
 8010e98:	4821      	ldr	r0, [pc, #132]	; (8010f20 <tcp_receive+0x5f4>)
 8010e9a:	f005 fb6b 	bl	8016574 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d906      	bls.n	8010eb6 <tcp_receive+0x58a>
 8010ea8:	4b1b      	ldr	r3, [pc, #108]	; (8010f18 <tcp_receive+0x5ec>)
 8010eaa:	f240 5295 	movw	r2, #1429	; 0x595
 8010eae:	491d      	ldr	r1, [pc, #116]	; (8010f24 <tcp_receive+0x5f8>)
 8010eb0:	481b      	ldr	r0, [pc, #108]	; (8010f20 <tcp_receive+0x5f4>)
 8010eb2:	f005 fb5f 	bl	8016574 <iprintf>
      off = (u16_t)off32;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ebc:	4b15      	ldr	r3, [pc, #84]	; (8010f14 <tcp_receive+0x5e8>)
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	891b      	ldrh	r3, [r3, #8]
 8010ec2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d906      	bls.n	8010ed8 <tcp_receive+0x5ac>
 8010eca:	4b13      	ldr	r3, [pc, #76]	; (8010f18 <tcp_receive+0x5ec>)
 8010ecc:	f240 5297 	movw	r2, #1431	; 0x597
 8010ed0:	4915      	ldr	r1, [pc, #84]	; (8010f28 <tcp_receive+0x5fc>)
 8010ed2:	4813      	ldr	r0, [pc, #76]	; (8010f20 <tcp_receive+0x5f4>)
 8010ed4:	f005 fb4e 	bl	8016574 <iprintf>
      inseg.len -= off;
 8010ed8:	4b0e      	ldr	r3, [pc, #56]	; (8010f14 <tcp_receive+0x5e8>)
 8010eda:	891a      	ldrh	r2, [r3, #8]
 8010edc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	4b0b      	ldr	r3, [pc, #44]	; (8010f14 <tcp_receive+0x5e8>)
 8010ee6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010ee8:	4b0a      	ldr	r3, [pc, #40]	; (8010f14 <tcp_receive+0x5e8>)
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	891a      	ldrh	r2, [r3, #8]
 8010eee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010ef6:	e029      	b.n	8010f4c <tcp_receive+0x620>
 8010ef8:	08018c88 	.word	0x08018c88
 8010efc:	08018c90 	.word	0x08018c90
 8010f00:	2400011c 	.word	0x2400011c
 8010f04:	24000118 	.word	0x24000118
 8010f08:	24003618 	.word	0x24003618
 8010f0c:	2400011e 	.word	0x2400011e
 8010f10:	24000114 	.word	0x24000114
 8010f14:	240000f4 	.word	0x240000f4
 8010f18:	08018920 	.word	0x08018920
 8010f1c:	08018c98 	.word	0x08018c98
 8010f20:	0801896c 	.word	0x0801896c
 8010f24:	08018ca8 	.word	0x08018ca8
 8010f28:	08018cb8 	.word	0x08018cb8
        off -= p->len;
 8010f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f2e:	895b      	ldrh	r3, [r3, #10]
 8010f30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f34:	1ad3      	subs	r3, r2, r3
 8010f36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010f3e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f42:	2200      	movs	r2, #0
 8010f44:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f4e:	895b      	ldrh	r3, [r3, #10]
 8010f50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d8e9      	bhi.n	8010f2c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f60:	f7fc f8d0 	bl	800d104 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f68:	4a91      	ldr	r2, [pc, #580]	; (80111b0 <tcp_receive+0x884>)
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	4b91      	ldr	r3, [pc, #580]	; (80111b4 <tcp_receive+0x888>)
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	4a8f      	ldr	r2, [pc, #572]	; (80111b0 <tcp_receive+0x884>)
 8010f72:	6812      	ldr	r2, [r2, #0]
 8010f74:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f76:	e00d      	b.n	8010f94 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f78:	4b8d      	ldr	r3, [pc, #564]	; (80111b0 <tcp_receive+0x884>)
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	da06      	bge.n	8010f94 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	8b5b      	ldrh	r3, [r3, #26]
 8010f8a:	f043 0302 	orr.w	r3, r3, #2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f94:	4b86      	ldr	r3, [pc, #536]	; (80111b0 <tcp_receive+0x884>)
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f2c0 842a 	blt.w	80117f8 <tcp_receive+0xecc>
 8010fa4:	4b82      	ldr	r3, [pc, #520]	; (80111b0 <tcp_receive+0x884>)
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fac:	6879      	ldr	r1, [r7, #4]
 8010fae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fb0:	440b      	add	r3, r1
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f300 841e 	bgt.w	80117f8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fc0:	4b7b      	ldr	r3, [pc, #492]	; (80111b0 <tcp_receive+0x884>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	f040 829a 	bne.w	80114fe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010fca:	4b7a      	ldr	r3, [pc, #488]	; (80111b4 <tcp_receive+0x888>)
 8010fcc:	891c      	ldrh	r4, [r3, #8]
 8010fce:	4b79      	ldr	r3, [pc, #484]	; (80111b4 <tcp_receive+0x888>)
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	899b      	ldrh	r3, [r3, #12]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fa fd04 	bl	800b9e4 <lwip_htons>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	f003 0303 	and.w	r3, r3, #3
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <tcp_receive+0x6c0>
 8010fe8:	2301      	movs	r3, #1
 8010fea:	e000      	b.n	8010fee <tcp_receive+0x6c2>
 8010fec:	2300      	movs	r3, #0
 8010fee:	4423      	add	r3, r4
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	4b71      	ldr	r3, [pc, #452]	; (80111b8 <tcp_receive+0x88c>)
 8010ff4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ffa:	4b6f      	ldr	r3, [pc, #444]	; (80111b8 <tcp_receive+0x88c>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d275      	bcs.n	80110ee <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011002:	4b6c      	ldr	r3, [pc, #432]	; (80111b4 <tcp_receive+0x888>)
 8011004:	68db      	ldr	r3, [r3, #12]
 8011006:	899b      	ldrh	r3, [r3, #12]
 8011008:	b29b      	uxth	r3, r3
 801100a:	4618      	mov	r0, r3
 801100c:	f7fa fcea 	bl	800b9e4 <lwip_htons>
 8011010:	4603      	mov	r3, r0
 8011012:	b2db      	uxtb	r3, r3
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	2b00      	cmp	r3, #0
 801101a:	d01f      	beq.n	801105c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801101c:	4b65      	ldr	r3, [pc, #404]	; (80111b4 <tcp_receive+0x888>)
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	899b      	ldrh	r3, [r3, #12]
 8011022:	b29b      	uxth	r3, r3
 8011024:	b21b      	sxth	r3, r3
 8011026:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801102a:	b21c      	sxth	r4, r3
 801102c:	4b61      	ldr	r3, [pc, #388]	; (80111b4 <tcp_receive+0x888>)
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	899b      	ldrh	r3, [r3, #12]
 8011032:	b29b      	uxth	r3, r3
 8011034:	4618      	mov	r0, r3
 8011036:	f7fa fcd5 	bl	800b9e4 <lwip_htons>
 801103a:	4603      	mov	r3, r0
 801103c:	b2db      	uxtb	r3, r3
 801103e:	b29b      	uxth	r3, r3
 8011040:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011044:	b29b      	uxth	r3, r3
 8011046:	4618      	mov	r0, r3
 8011048:	f7fa fccc 	bl	800b9e4 <lwip_htons>
 801104c:	4603      	mov	r3, r0
 801104e:	b21b      	sxth	r3, r3
 8011050:	4323      	orrs	r3, r4
 8011052:	b21a      	sxth	r2, r3
 8011054:	4b57      	ldr	r3, [pc, #348]	; (80111b4 <tcp_receive+0x888>)
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	b292      	uxth	r2, r2
 801105a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011060:	4b54      	ldr	r3, [pc, #336]	; (80111b4 <tcp_receive+0x888>)
 8011062:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011064:	4b53      	ldr	r3, [pc, #332]	; (80111b4 <tcp_receive+0x888>)
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	899b      	ldrh	r3, [r3, #12]
 801106a:	b29b      	uxth	r3, r3
 801106c:	4618      	mov	r0, r3
 801106e:	f7fa fcb9 	bl	800b9e4 <lwip_htons>
 8011072:	4603      	mov	r3, r0
 8011074:	b2db      	uxtb	r3, r3
 8011076:	f003 0302 	and.w	r3, r3, #2
 801107a:	2b00      	cmp	r3, #0
 801107c:	d005      	beq.n	801108a <tcp_receive+0x75e>
            inseg.len -= 1;
 801107e:	4b4d      	ldr	r3, [pc, #308]	; (80111b4 <tcp_receive+0x888>)
 8011080:	891b      	ldrh	r3, [r3, #8]
 8011082:	3b01      	subs	r3, #1
 8011084:	b29a      	uxth	r2, r3
 8011086:	4b4b      	ldr	r3, [pc, #300]	; (80111b4 <tcp_receive+0x888>)
 8011088:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801108a:	4b4a      	ldr	r3, [pc, #296]	; (80111b4 <tcp_receive+0x888>)
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	4a49      	ldr	r2, [pc, #292]	; (80111b4 <tcp_receive+0x888>)
 8011090:	8912      	ldrh	r2, [r2, #8]
 8011092:	4611      	mov	r1, r2
 8011094:	4618      	mov	r0, r3
 8011096:	f7fb ff35 	bl	800cf04 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801109a:	4b46      	ldr	r3, [pc, #280]	; (80111b4 <tcp_receive+0x888>)
 801109c:	891c      	ldrh	r4, [r3, #8]
 801109e:	4b45      	ldr	r3, [pc, #276]	; (80111b4 <tcp_receive+0x888>)
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	899b      	ldrh	r3, [r3, #12]
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fa fc9c 	bl	800b9e4 <lwip_htons>
 80110ac:	4603      	mov	r3, r0
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	f003 0303 	and.w	r3, r3, #3
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d001      	beq.n	80110bc <tcp_receive+0x790>
 80110b8:	2301      	movs	r3, #1
 80110ba:	e000      	b.n	80110be <tcp_receive+0x792>
 80110bc:	2300      	movs	r3, #0
 80110be:	4423      	add	r3, r4
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	4b3d      	ldr	r3, [pc, #244]	; (80111b8 <tcp_receive+0x88c>)
 80110c4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80110c6:	4b3c      	ldr	r3, [pc, #240]	; (80111b8 <tcp_receive+0x88c>)
 80110c8:	881b      	ldrh	r3, [r3, #0]
 80110ca:	461a      	mov	r2, r3
 80110cc:	4b38      	ldr	r3, [pc, #224]	; (80111b0 <tcp_receive+0x884>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	441a      	add	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d6:	6879      	ldr	r1, [r7, #4]
 80110d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110da:	440b      	add	r3, r1
 80110dc:	429a      	cmp	r2, r3
 80110de:	d006      	beq.n	80110ee <tcp_receive+0x7c2>
 80110e0:	4b36      	ldr	r3, [pc, #216]	; (80111bc <tcp_receive+0x890>)
 80110e2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80110e6:	4936      	ldr	r1, [pc, #216]	; (80111c0 <tcp_receive+0x894>)
 80110e8:	4836      	ldr	r0, [pc, #216]	; (80111c4 <tcp_receive+0x898>)
 80110ea:	f005 fa43 	bl	8016574 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f000 80e7 	beq.w	80112c6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80110f8:	4b2e      	ldr	r3, [pc, #184]	; (80111b4 <tcp_receive+0x888>)
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	899b      	ldrh	r3, [r3, #12]
 80110fe:	b29b      	uxth	r3, r3
 8011100:	4618      	mov	r0, r3
 8011102:	f7fa fc6f 	bl	800b9e4 <lwip_htons>
 8011106:	4603      	mov	r3, r0
 8011108:	b2db      	uxtb	r3, r3
 801110a:	f003 0301 	and.w	r3, r3, #1
 801110e:	2b00      	cmp	r3, #0
 8011110:	d010      	beq.n	8011134 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011112:	e00a      	b.n	801112a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011118:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011124:	68f8      	ldr	r0, [r7, #12]
 8011126:	f7fd fcb0 	bl	800ea8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1f0      	bne.n	8011114 <tcp_receive+0x7e8>
 8011132:	e0c8      	b.n	80112c6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011138:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801113a:	e052      	b.n	80111e2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801113c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	899b      	ldrh	r3, [r3, #12]
 8011142:	b29b      	uxth	r3, r3
 8011144:	4618      	mov	r0, r3
 8011146:	f7fa fc4d 	bl	800b9e4 <lwip_htons>
 801114a:	4603      	mov	r3, r0
 801114c:	b2db      	uxtb	r3, r3
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b00      	cmp	r3, #0
 8011154:	d03d      	beq.n	80111d2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011156:	4b17      	ldr	r3, [pc, #92]	; (80111b4 <tcp_receive+0x888>)
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	899b      	ldrh	r3, [r3, #12]
 801115c:	b29b      	uxth	r3, r3
 801115e:	4618      	mov	r0, r3
 8011160:	f7fa fc40 	bl	800b9e4 <lwip_htons>
 8011164:	4603      	mov	r3, r0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801116c:	2b00      	cmp	r3, #0
 801116e:	d130      	bne.n	80111d2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011170:	4b10      	ldr	r3, [pc, #64]	; (80111b4 <tcp_receive+0x888>)
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b29c      	uxth	r4, r3
 8011178:	2001      	movs	r0, #1
 801117a:	f7fa fc33 	bl	800b9e4 <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	461a      	mov	r2, r3
 8011182:	4b0c      	ldr	r3, [pc, #48]	; (80111b4 <tcp_receive+0x888>)
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	4322      	orrs	r2, r4
 8011188:	b292      	uxth	r2, r2
 801118a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801118c:	4b09      	ldr	r3, [pc, #36]	; (80111b4 <tcp_receive+0x888>)
 801118e:	891c      	ldrh	r4, [r3, #8]
 8011190:	4b08      	ldr	r3, [pc, #32]	; (80111b4 <tcp_receive+0x888>)
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	899b      	ldrh	r3, [r3, #12]
 8011196:	b29b      	uxth	r3, r3
 8011198:	4618      	mov	r0, r3
 801119a:	f7fa fc23 	bl	800b9e4 <lwip_htons>
 801119e:	4603      	mov	r3, r0
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	f003 0303 	and.w	r3, r3, #3
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00e      	beq.n	80111c8 <tcp_receive+0x89c>
 80111aa:	2301      	movs	r3, #1
 80111ac:	e00d      	b.n	80111ca <tcp_receive+0x89e>
 80111ae:	bf00      	nop
 80111b0:	24000114 	.word	0x24000114
 80111b4:	240000f4 	.word	0x240000f4
 80111b8:	2400011e 	.word	0x2400011e
 80111bc:	08018920 	.word	0x08018920
 80111c0:	08018cc8 	.word	0x08018cc8
 80111c4:	0801896c 	.word	0x0801896c
 80111c8:	2300      	movs	r3, #0
 80111ca:	4423      	add	r3, r4
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	4b98      	ldr	r3, [pc, #608]	; (8011430 <tcp_receive+0xb04>)
 80111d0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80111d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80111d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80111dc:	6938      	ldr	r0, [r7, #16]
 80111de:	f7fd fc54 	bl	800ea8a <tcp_seg_free>
            while (next &&
 80111e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00e      	beq.n	8011206 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111e8:	4b91      	ldr	r3, [pc, #580]	; (8011430 <tcp_receive+0xb04>)
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b91      	ldr	r3, [pc, #580]	; (8011434 <tcp_receive+0xb08>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	441a      	add	r2, r3
 80111f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80111fc:	8909      	ldrh	r1, [r1, #8]
 80111fe:	440b      	add	r3, r1
 8011200:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011202:	2b00      	cmp	r3, #0
 8011204:	da9a      	bge.n	801113c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011208:	2b00      	cmp	r3, #0
 801120a:	d059      	beq.n	80112c0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801120c:	4b88      	ldr	r3, [pc, #544]	; (8011430 <tcp_receive+0xb04>)
 801120e:	881b      	ldrh	r3, [r3, #0]
 8011210:	461a      	mov	r2, r3
 8011212:	4b88      	ldr	r3, [pc, #544]	; (8011434 <tcp_receive+0xb08>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	441a      	add	r2, r3
 8011218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011220:	2b00      	cmp	r3, #0
 8011222:	dd4d      	ble.n	80112c0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	b29a      	uxth	r2, r3
 801122c:	4b81      	ldr	r3, [pc, #516]	; (8011434 <tcp_receive+0xb08>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	b29b      	uxth	r3, r3
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	b29a      	uxth	r2, r3
 8011236:	4b80      	ldr	r3, [pc, #512]	; (8011438 <tcp_receive+0xb0c>)
 8011238:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801123a:	4b7f      	ldr	r3, [pc, #508]	; (8011438 <tcp_receive+0xb0c>)
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	899b      	ldrh	r3, [r3, #12]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4618      	mov	r0, r3
 8011244:	f7fa fbce 	bl	800b9e4 <lwip_htons>
 8011248:	4603      	mov	r3, r0
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f003 0302 	and.w	r3, r3, #2
 8011250:	2b00      	cmp	r3, #0
 8011252:	d005      	beq.n	8011260 <tcp_receive+0x934>
                inseg.len -= 1;
 8011254:	4b78      	ldr	r3, [pc, #480]	; (8011438 <tcp_receive+0xb0c>)
 8011256:	891b      	ldrh	r3, [r3, #8]
 8011258:	3b01      	subs	r3, #1
 801125a:	b29a      	uxth	r2, r3
 801125c:	4b76      	ldr	r3, [pc, #472]	; (8011438 <tcp_receive+0xb0c>)
 801125e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011260:	4b75      	ldr	r3, [pc, #468]	; (8011438 <tcp_receive+0xb0c>)
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	4a74      	ldr	r2, [pc, #464]	; (8011438 <tcp_receive+0xb0c>)
 8011266:	8912      	ldrh	r2, [r2, #8]
 8011268:	4611      	mov	r1, r2
 801126a:	4618      	mov	r0, r3
 801126c:	f7fb fe4a 	bl	800cf04 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011270:	4b71      	ldr	r3, [pc, #452]	; (8011438 <tcp_receive+0xb0c>)
 8011272:	891c      	ldrh	r4, [r3, #8]
 8011274:	4b70      	ldr	r3, [pc, #448]	; (8011438 <tcp_receive+0xb0c>)
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	899b      	ldrh	r3, [r3, #12]
 801127a:	b29b      	uxth	r3, r3
 801127c:	4618      	mov	r0, r3
 801127e:	f7fa fbb1 	bl	800b9e4 <lwip_htons>
 8011282:	4603      	mov	r3, r0
 8011284:	b2db      	uxtb	r3, r3
 8011286:	f003 0303 	and.w	r3, r3, #3
 801128a:	2b00      	cmp	r3, #0
 801128c:	d001      	beq.n	8011292 <tcp_receive+0x966>
 801128e:	2301      	movs	r3, #1
 8011290:	e000      	b.n	8011294 <tcp_receive+0x968>
 8011292:	2300      	movs	r3, #0
 8011294:	4423      	add	r3, r4
 8011296:	b29a      	uxth	r2, r3
 8011298:	4b65      	ldr	r3, [pc, #404]	; (8011430 <tcp_receive+0xb04>)
 801129a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801129c:	4b64      	ldr	r3, [pc, #400]	; (8011430 <tcp_receive+0xb04>)
 801129e:	881b      	ldrh	r3, [r3, #0]
 80112a0:	461a      	mov	r2, r3
 80112a2:	4b64      	ldr	r3, [pc, #400]	; (8011434 <tcp_receive+0xb08>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	441a      	add	r2, r3
 80112a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d006      	beq.n	80112c0 <tcp_receive+0x994>
 80112b2:	4b62      	ldr	r3, [pc, #392]	; (801143c <tcp_receive+0xb10>)
 80112b4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80112b8:	4961      	ldr	r1, [pc, #388]	; (8011440 <tcp_receive+0xb14>)
 80112ba:	4862      	ldr	r0, [pc, #392]	; (8011444 <tcp_receive+0xb18>)
 80112bc:	f005 f95a 	bl	8016574 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112c4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80112c6:	4b5a      	ldr	r3, [pc, #360]	; (8011430 <tcp_receive+0xb04>)
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	4b59      	ldr	r3, [pc, #356]	; (8011434 <tcp_receive+0xb08>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	441a      	add	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112da:	4b55      	ldr	r3, [pc, #340]	; (8011430 <tcp_receive+0xb04>)
 80112dc:	881b      	ldrh	r3, [r3, #0]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d206      	bcs.n	80112f0 <tcp_receive+0x9c4>
 80112e2:	4b56      	ldr	r3, [pc, #344]	; (801143c <tcp_receive+0xb10>)
 80112e4:	f240 6207 	movw	r2, #1543	; 0x607
 80112e8:	4957      	ldr	r1, [pc, #348]	; (8011448 <tcp_receive+0xb1c>)
 80112ea:	4856      	ldr	r0, [pc, #344]	; (8011444 <tcp_receive+0xb18>)
 80112ec:	f005 f942 	bl	8016574 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112f4:	4b4e      	ldr	r3, [pc, #312]	; (8011430 <tcp_receive+0xb04>)
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7fc fe9d 	bl	800e040 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011306:	4b4c      	ldr	r3, [pc, #304]	; (8011438 <tcp_receive+0xb0c>)
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	891b      	ldrh	r3, [r3, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d006      	beq.n	801131e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011310:	4b49      	ldr	r3, [pc, #292]	; (8011438 <tcp_receive+0xb0c>)
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	4a4d      	ldr	r2, [pc, #308]	; (801144c <tcp_receive+0xb20>)
 8011316:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011318:	4b47      	ldr	r3, [pc, #284]	; (8011438 <tcp_receive+0xb0c>)
 801131a:	2200      	movs	r2, #0
 801131c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801131e:	4b46      	ldr	r3, [pc, #280]	; (8011438 <tcp_receive+0xb0c>)
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	899b      	ldrh	r3, [r3, #12]
 8011324:	b29b      	uxth	r3, r3
 8011326:	4618      	mov	r0, r3
 8011328:	f7fa fb5c 	bl	800b9e4 <lwip_htons>
 801132c:	4603      	mov	r3, r0
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	2b00      	cmp	r3, #0
 8011336:	f000 80b8 	beq.w	80114aa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801133a:	4b45      	ldr	r3, [pc, #276]	; (8011450 <tcp_receive+0xb24>)
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	f043 0320 	orr.w	r3, r3, #32
 8011342:	b2da      	uxtb	r2, r3
 8011344:	4b42      	ldr	r3, [pc, #264]	; (8011450 <tcp_receive+0xb24>)
 8011346:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011348:	e0af      	b.n	80114aa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801134e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	4a36      	ldr	r2, [pc, #216]	; (8011434 <tcp_receive+0xb08>)
 801135a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	891b      	ldrh	r3, [r3, #8]
 8011360:	461c      	mov	r4, r3
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	899b      	ldrh	r3, [r3, #12]
 8011368:	b29b      	uxth	r3, r3
 801136a:	4618      	mov	r0, r3
 801136c:	f7fa fb3a 	bl	800b9e4 <lwip_htons>
 8011370:	4603      	mov	r3, r0
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f003 0303 	and.w	r3, r3, #3
 8011378:	2b00      	cmp	r3, #0
 801137a:	d001      	beq.n	8011380 <tcp_receive+0xa54>
 801137c:	2301      	movs	r3, #1
 801137e:	e000      	b.n	8011382 <tcp_receive+0xa56>
 8011380:	2300      	movs	r3, #0
 8011382:	191a      	adds	r2, r3, r4
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011388:	441a      	add	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011392:	461c      	mov	r4, r3
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	891b      	ldrh	r3, [r3, #8]
 8011398:	461d      	mov	r5, r3
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fa fb1e 	bl	800b9e4 <lwip_htons>
 80113a8:	4603      	mov	r3, r0
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	f003 0303 	and.w	r3, r3, #3
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d001      	beq.n	80113b8 <tcp_receive+0xa8c>
 80113b4:	2301      	movs	r3, #1
 80113b6:	e000      	b.n	80113ba <tcp_receive+0xa8e>
 80113b8:	2300      	movs	r3, #0
 80113ba:	442b      	add	r3, r5
 80113bc:	429c      	cmp	r4, r3
 80113be:	d206      	bcs.n	80113ce <tcp_receive+0xaa2>
 80113c0:	4b1e      	ldr	r3, [pc, #120]	; (801143c <tcp_receive+0xb10>)
 80113c2:	f240 622b 	movw	r2, #1579	; 0x62b
 80113c6:	4923      	ldr	r1, [pc, #140]	; (8011454 <tcp_receive+0xb28>)
 80113c8:	481e      	ldr	r0, [pc, #120]	; (8011444 <tcp_receive+0xb18>)
 80113ca:	f005 f8d3 	bl	8016574 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	891b      	ldrh	r3, [r3, #8]
 80113d2:	461c      	mov	r4, r3
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	899b      	ldrh	r3, [r3, #12]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fa fb01 	bl	800b9e4 <lwip_htons>
 80113e2:	4603      	mov	r3, r0
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	f003 0303 	and.w	r3, r3, #3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <tcp_receive+0xac6>
 80113ee:	2301      	movs	r3, #1
 80113f0:	e000      	b.n	80113f4 <tcp_receive+0xac8>
 80113f2:	2300      	movs	r3, #0
 80113f4:	1919      	adds	r1, r3, r4
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113fa:	b28b      	uxth	r3, r1
 80113fc:	1ad3      	subs	r3, r2, r3
 80113fe:	b29a      	uxth	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7fc fe1b 	bl	800e040 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	891b      	ldrh	r3, [r3, #8]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d028      	beq.n	8011466 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011414:	4b0d      	ldr	r3, [pc, #52]	; (801144c <tcp_receive+0xb20>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d01d      	beq.n	8011458 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801141c:	4b0b      	ldr	r3, [pc, #44]	; (801144c <tcp_receive+0xb20>)
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	4619      	mov	r1, r3
 8011426:	4610      	mov	r0, r2
 8011428:	f7fb ffb4 	bl	800d394 <pbuf_cat>
 801142c:	e018      	b.n	8011460 <tcp_receive+0xb34>
 801142e:	bf00      	nop
 8011430:	2400011e 	.word	0x2400011e
 8011434:	24000114 	.word	0x24000114
 8011438:	240000f4 	.word	0x240000f4
 801143c:	08018920 	.word	0x08018920
 8011440:	08018d00 	.word	0x08018d00
 8011444:	0801896c 	.word	0x0801896c
 8011448:	08018d3c 	.word	0x08018d3c
 801144c:	24000124 	.word	0x24000124
 8011450:	24000121 	.word	0x24000121
 8011454:	08018d5c 	.word	0x08018d5c
            } else {
              recv_data = cseg->p;
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	4a70      	ldr	r2, [pc, #448]	; (8011620 <tcp_receive+0xcf4>)
 801145e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	2200      	movs	r2, #0
 8011464:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	899b      	ldrh	r3, [r3, #12]
 801146c:	b29b      	uxth	r3, r3
 801146e:	4618      	mov	r0, r3
 8011470:	f7fa fab8 	bl	800b9e4 <lwip_htons>
 8011474:	4603      	mov	r3, r0
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f003 0301 	and.w	r3, r3, #1
 801147c:	2b00      	cmp	r3, #0
 801147e:	d00d      	beq.n	801149c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011480:	4b68      	ldr	r3, [pc, #416]	; (8011624 <tcp_receive+0xcf8>)
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	f043 0320 	orr.w	r3, r3, #32
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b66      	ldr	r3, [pc, #408]	; (8011624 <tcp_receive+0xcf8>)
 801148c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	7d1b      	ldrb	r3, [r3, #20]
 8011492:	2b04      	cmp	r3, #4
 8011494:	d102      	bne.n	801149c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2207      	movs	r2, #7
 801149a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80114a4:	68b8      	ldr	r0, [r7, #8]
 80114a6:	f7fd faf0 	bl	800ea8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d008      	beq.n	80114c4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	685a      	ldr	r2, [r3, #4]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80114be:	429a      	cmp	r2, r3
 80114c0:	f43f af43 	beq.w	801134a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	8b5b      	ldrh	r3, [r3, #26]
 80114c8:	f003 0301 	and.w	r3, r3, #1
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00e      	beq.n	80114ee <tcp_receive+0xbc2>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	8b5b      	ldrh	r3, [r3, #26]
 80114d4:	f023 0301 	bic.w	r3, r3, #1
 80114d8:	b29a      	uxth	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	835a      	strh	r2, [r3, #26]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	8b5b      	ldrh	r3, [r3, #26]
 80114e2:	f043 0302 	orr.w	r3, r3, #2
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114ec:	e188      	b.n	8011800 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8b5b      	ldrh	r3, [r3, #26]
 80114f2:	f043 0301 	orr.w	r3, r3, #1
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114fc:	e180      	b.n	8011800 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011502:	2b00      	cmp	r3, #0
 8011504:	d106      	bne.n	8011514 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011506:	4848      	ldr	r0, [pc, #288]	; (8011628 <tcp_receive+0xcfc>)
 8011508:	f7fd faf6 	bl	800eaf8 <tcp_seg_copy>
 801150c:	4602      	mov	r2, r0
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	675a      	str	r2, [r3, #116]	; 0x74
 8011512:	e16d      	b.n	80117f0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011514:	2300      	movs	r3, #0
 8011516:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801151c:	63bb      	str	r3, [r7, #56]	; 0x38
 801151e:	e157      	b.n	80117d0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	685a      	ldr	r2, [r3, #4]
 8011526:	4b41      	ldr	r3, [pc, #260]	; (801162c <tcp_receive+0xd00>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	429a      	cmp	r2, r3
 801152c:	d11d      	bne.n	801156a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801152e:	4b3e      	ldr	r3, [pc, #248]	; (8011628 <tcp_receive+0xcfc>)
 8011530:	891a      	ldrh	r2, [r3, #8]
 8011532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011534:	891b      	ldrh	r3, [r3, #8]
 8011536:	429a      	cmp	r2, r3
 8011538:	f240 814f 	bls.w	80117da <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801153c:	483a      	ldr	r0, [pc, #232]	; (8011628 <tcp_receive+0xcfc>)
 801153e:	f7fd fadb 	bl	800eaf8 <tcp_seg_copy>
 8011542:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 8149 	beq.w	80117de <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011554:	697a      	ldr	r2, [r7, #20]
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	e002      	b.n	8011560 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	697a      	ldr	r2, [r7, #20]
 801155e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011562:	6978      	ldr	r0, [r7, #20]
 8011564:	f7ff f8de 	bl	8010724 <tcp_oos_insert_segment>
                }
                break;
 8011568:	e139      	b.n	80117de <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801156c:	2b00      	cmp	r3, #0
 801156e:	d117      	bne.n	80115a0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011570:	4b2e      	ldr	r3, [pc, #184]	; (801162c <tcp_receive+0xd00>)
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	1ad3      	subs	r3, r2, r3
 801157c:	2b00      	cmp	r3, #0
 801157e:	da57      	bge.n	8011630 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011580:	4829      	ldr	r0, [pc, #164]	; (8011628 <tcp_receive+0xcfc>)
 8011582:	f7fd fab9 	bl	800eaf8 <tcp_seg_copy>
 8011586:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011588:	69bb      	ldr	r3, [r7, #24]
 801158a:	2b00      	cmp	r3, #0
 801158c:	f000 8129 	beq.w	80117e2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	69ba      	ldr	r2, [r7, #24]
 8011594:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011596:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011598:	69b8      	ldr	r0, [r7, #24]
 801159a:	f7ff f8c3 	bl	8010724 <tcp_oos_insert_segment>
                  }
                  break;
 801159e:	e120      	b.n	80117e2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80115a0:	4b22      	ldr	r3, [pc, #136]	; (801162c <tcp_receive+0xd00>)
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	1ad3      	subs	r3, r2, r3
 80115ac:	3b01      	subs	r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	db3e      	blt.n	8011630 <tcp_receive+0xd04>
 80115b2:	4b1e      	ldr	r3, [pc, #120]	; (801162c <tcp_receive+0xd00>)
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	3301      	adds	r3, #1
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	dc35      	bgt.n	8011630 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115c4:	4818      	ldr	r0, [pc, #96]	; (8011628 <tcp_receive+0xcfc>)
 80115c6:	f7fd fa97 	bl	800eaf8 <tcp_seg_copy>
 80115ca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f000 8109 	beq.w	80117e6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115dc:	8912      	ldrh	r2, [r2, #8]
 80115de:	441a      	add	r2, r3
 80115e0:	4b12      	ldr	r3, [pc, #72]	; (801162c <tcp_receive+0xd00>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	dd12      	ble.n	8011610 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80115ea:	4b10      	ldr	r3, [pc, #64]	; (801162c <tcp_receive+0xd00>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	b29a      	uxth	r2, r3
 80115f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011602:	685a      	ldr	r2, [r3, #4]
 8011604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011606:	891b      	ldrh	r3, [r3, #8]
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7fb fc7a 	bl	800cf04 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011612:	69fa      	ldr	r2, [r7, #28]
 8011614:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011618:	69f8      	ldr	r0, [r7, #28]
 801161a:	f7ff f883 	bl	8010724 <tcp_oos_insert_segment>
                  }
                  break;
 801161e:	e0e2      	b.n	80117e6 <tcp_receive+0xeba>
 8011620:	24000124 	.word	0x24000124
 8011624:	24000121 	.word	0x24000121
 8011628:	240000f4 	.word	0x240000f4
 801162c:	24000114 	.word	0x24000114
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	f040 80c6 	bne.w	80117ca <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801163e:	4b80      	ldr	r3, [pc, #512]	; (8011840 <tcp_receive+0xf14>)
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011644:	68db      	ldr	r3, [r3, #12]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801164a:	2b00      	cmp	r3, #0
 801164c:	f340 80bd 	ble.w	80117ca <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	b29b      	uxth	r3, r3
 8011658:	4618      	mov	r0, r3
 801165a:	f7fa f9c3 	bl	800b9e4 <lwip_htons>
 801165e:	4603      	mov	r3, r0
 8011660:	b2db      	uxtb	r3, r3
 8011662:	f003 0301 	and.w	r3, r3, #1
 8011666:	2b00      	cmp	r3, #0
 8011668:	f040 80bf 	bne.w	80117ea <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801166c:	4875      	ldr	r0, [pc, #468]	; (8011844 <tcp_receive+0xf18>)
 801166e:	f7fd fa43 	bl	800eaf8 <tcp_seg_copy>
 8011672:	4602      	mov	r2, r0
 8011674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011676:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	f000 80b6 	beq.w	80117ee <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011684:	68db      	ldr	r3, [r3, #12]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801168a:	8912      	ldrh	r2, [r2, #8]
 801168c:	441a      	add	r2, r3
 801168e:	4b6c      	ldr	r3, [pc, #432]	; (8011840 <tcp_receive+0xf14>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	1ad3      	subs	r3, r2, r3
 8011694:	2b00      	cmp	r3, #0
 8011696:	dd12      	ble.n	80116be <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011698:	4b69      	ldr	r3, [pc, #420]	; (8011840 <tcp_receive+0xf14>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	b29a      	uxth	r2, r3
 801169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	685a      	ldr	r2, [r3, #4]
 80116b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b4:	891b      	ldrh	r3, [r3, #8]
 80116b6:	4619      	mov	r1, r3
 80116b8:	4610      	mov	r0, r2
 80116ba:	f7fb fc23 	bl	800cf04 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80116be:	4b62      	ldr	r3, [pc, #392]	; (8011848 <tcp_receive+0xf1c>)
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	461a      	mov	r2, r3
 80116c4:	4b5e      	ldr	r3, [pc, #376]	; (8011840 <tcp_receive+0xf14>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	441a      	add	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ce:	6879      	ldr	r1, [r7, #4]
 80116d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116d2:	440b      	add	r3, r1
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f340 8089 	ble.w	80117ee <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80116dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	899b      	ldrh	r3, [r3, #12]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fa f97c 	bl	800b9e4 <lwip_htons>
 80116ec:	4603      	mov	r3, r0
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d022      	beq.n	801173e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	899b      	ldrh	r3, [r3, #12]
 8011700:	b29b      	uxth	r3, r3
 8011702:	b21b      	sxth	r3, r3
 8011704:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011708:	b21c      	sxth	r4, r3
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	899b      	ldrh	r3, [r3, #12]
 8011712:	b29b      	uxth	r3, r3
 8011714:	4618      	mov	r0, r3
 8011716:	f7fa f965 	bl	800b9e4 <lwip_htons>
 801171a:	4603      	mov	r3, r0
 801171c:	b2db      	uxtb	r3, r3
 801171e:	b29b      	uxth	r3, r3
 8011720:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011724:	b29b      	uxth	r3, r3
 8011726:	4618      	mov	r0, r3
 8011728:	f7fa f95c 	bl	800b9e4 <lwip_htons>
 801172c:	4603      	mov	r3, r0
 801172e:	b21b      	sxth	r3, r3
 8011730:	4323      	orrs	r3, r4
 8011732:	b21a      	sxth	r2, r3
 8011734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	b292      	uxth	r2, r2
 801173c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011742:	b29a      	uxth	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011748:	4413      	add	r3, r2
 801174a:	b299      	uxth	r1, r3
 801174c:	4b3c      	ldr	r3, [pc, #240]	; (8011840 <tcp_receive+0xf14>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	b29a      	uxth	r2, r3
 8011752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	1a8a      	subs	r2, r1, r2
 8011758:	b292      	uxth	r2, r2
 801175a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	891b      	ldrh	r3, [r3, #8]
 8011768:	4619      	mov	r1, r3
 801176a:	4610      	mov	r0, r2
 801176c:	f7fb fbca 	bl	800cf04 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	891c      	ldrh	r4, [r3, #8]
 8011776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	899b      	ldrh	r3, [r3, #12]
 801177e:	b29b      	uxth	r3, r3
 8011780:	4618      	mov	r0, r3
 8011782:	f7fa f92f 	bl	800b9e4 <lwip_htons>
 8011786:	4603      	mov	r3, r0
 8011788:	b2db      	uxtb	r3, r3
 801178a:	f003 0303 	and.w	r3, r3, #3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <tcp_receive+0xe6a>
 8011792:	2301      	movs	r3, #1
 8011794:	e000      	b.n	8011798 <tcp_receive+0xe6c>
 8011796:	2300      	movs	r3, #0
 8011798:	4423      	add	r3, r4
 801179a:	b29a      	uxth	r2, r3
 801179c:	4b2a      	ldr	r3, [pc, #168]	; (8011848 <tcp_receive+0xf1c>)
 801179e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117a0:	4b29      	ldr	r3, [pc, #164]	; (8011848 <tcp_receive+0xf1c>)
 80117a2:	881b      	ldrh	r3, [r3, #0]
 80117a4:	461a      	mov	r2, r3
 80117a6:	4b26      	ldr	r3, [pc, #152]	; (8011840 <tcp_receive+0xf14>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	441a      	add	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117b4:	440b      	add	r3, r1
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d019      	beq.n	80117ee <tcp_receive+0xec2>
 80117ba:	4b24      	ldr	r3, [pc, #144]	; (801184c <tcp_receive+0xf20>)
 80117bc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80117c0:	4923      	ldr	r1, [pc, #140]	; (8011850 <tcp_receive+0xf24>)
 80117c2:	4824      	ldr	r0, [pc, #144]	; (8011854 <tcp_receive+0xf28>)
 80117c4:	f004 fed6 	bl	8016574 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80117c8:	e011      	b.n	80117ee <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80117ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80117d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f47f aea4 	bne.w	8011520 <tcp_receive+0xbf4>
 80117d8:	e00a      	b.n	80117f0 <tcp_receive+0xec4>
                break;
 80117da:	bf00      	nop
 80117dc:	e008      	b.n	80117f0 <tcp_receive+0xec4>
                break;
 80117de:	bf00      	nop
 80117e0:	e006      	b.n	80117f0 <tcp_receive+0xec4>
                  break;
 80117e2:	bf00      	nop
 80117e4:	e004      	b.n	80117f0 <tcp_receive+0xec4>
                  break;
 80117e6:	bf00      	nop
 80117e8:	e002      	b.n	80117f0 <tcp_receive+0xec4>
                  break;
 80117ea:	bf00      	nop
 80117ec:	e000      	b.n	80117f0 <tcp_receive+0xec4>
                break;
 80117ee:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f001 fe8b 	bl	801350c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80117f6:	e003      	b.n	8011800 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f001 fe87 	bl	801350c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80117fe:	e01a      	b.n	8011836 <tcp_receive+0xf0a>
 8011800:	e019      	b.n	8011836 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011802:	4b0f      	ldr	r3, [pc, #60]	; (8011840 <tcp_receive+0xf14>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	2b00      	cmp	r3, #0
 801180e:	db0a      	blt.n	8011826 <tcp_receive+0xefa>
 8011810:	4b0b      	ldr	r3, [pc, #44]	; (8011840 <tcp_receive+0xf14>)
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011818:	6879      	ldr	r1, [r7, #4]
 801181a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801181c:	440b      	add	r3, r1
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	3301      	adds	r3, #1
 8011822:	2b00      	cmp	r3, #0
 8011824:	dd07      	ble.n	8011836 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	8b5b      	ldrh	r3, [r3, #26]
 801182a:	f043 0302 	orr.w	r3, r3, #2
 801182e:	b29a      	uxth	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011834:	e7ff      	b.n	8011836 <tcp_receive+0xf0a>
 8011836:	bf00      	nop
 8011838:	3750      	adds	r7, #80	; 0x50
 801183a:	46bd      	mov	sp, r7
 801183c:	bdb0      	pop	{r4, r5, r7, pc}
 801183e:	bf00      	nop
 8011840:	24000114 	.word	0x24000114
 8011844:	240000f4 	.word	0x240000f4
 8011848:	2400011e 	.word	0x2400011e
 801184c:	08018920 	.word	0x08018920
 8011850:	08018cc8 	.word	0x08018cc8
 8011854:	0801896c 	.word	0x0801896c

08011858 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801185e:	4b15      	ldr	r3, [pc, #84]	; (80118b4 <tcp_get_next_optbyte+0x5c>)
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	1c5a      	adds	r2, r3, #1
 8011864:	b291      	uxth	r1, r2
 8011866:	4a13      	ldr	r2, [pc, #76]	; (80118b4 <tcp_get_next_optbyte+0x5c>)
 8011868:	8011      	strh	r1, [r2, #0]
 801186a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801186c:	4b12      	ldr	r3, [pc, #72]	; (80118b8 <tcp_get_next_optbyte+0x60>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d004      	beq.n	801187e <tcp_get_next_optbyte+0x26>
 8011874:	4b11      	ldr	r3, [pc, #68]	; (80118bc <tcp_get_next_optbyte+0x64>)
 8011876:	881b      	ldrh	r3, [r3, #0]
 8011878:	88fa      	ldrh	r2, [r7, #6]
 801187a:	429a      	cmp	r2, r3
 801187c:	d208      	bcs.n	8011890 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801187e:	4b10      	ldr	r3, [pc, #64]	; (80118c0 <tcp_get_next_optbyte+0x68>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3314      	adds	r3, #20
 8011884:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011886:	88fb      	ldrh	r3, [r7, #6]
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	4413      	add	r3, r2
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	e00b      	b.n	80118a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011890:	88fb      	ldrh	r3, [r7, #6]
 8011892:	b2da      	uxtb	r2, r3
 8011894:	4b09      	ldr	r3, [pc, #36]	; (80118bc <tcp_get_next_optbyte+0x64>)
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	b2db      	uxtb	r3, r3
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801189e:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <tcp_get_next_optbyte+0x60>)
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	797b      	ldrb	r3, [r7, #5]
 80118a4:	4413      	add	r3, r2
 80118a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	24000110 	.word	0x24000110
 80118b8:	2400010c 	.word	0x2400010c
 80118bc:	2400010a 	.word	0x2400010a
 80118c0:	24000104 	.word	0x24000104

080118c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d106      	bne.n	80118e0 <tcp_parseopt+0x1c>
 80118d2:	4b32      	ldr	r3, [pc, #200]	; (801199c <tcp_parseopt+0xd8>)
 80118d4:	f240 727d 	movw	r2, #1917	; 0x77d
 80118d8:	4931      	ldr	r1, [pc, #196]	; (80119a0 <tcp_parseopt+0xdc>)
 80118da:	4832      	ldr	r0, [pc, #200]	; (80119a4 <tcp_parseopt+0xe0>)
 80118dc:	f004 fe4a 	bl	8016574 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80118e0:	4b31      	ldr	r3, [pc, #196]	; (80119a8 <tcp_parseopt+0xe4>)
 80118e2:	881b      	ldrh	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d055      	beq.n	8011994 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118e8:	4b30      	ldr	r3, [pc, #192]	; (80119ac <tcp_parseopt+0xe8>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	801a      	strh	r2, [r3, #0]
 80118ee:	e045      	b.n	801197c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80118f0:	f7ff ffb2 	bl	8011858 <tcp_get_next_optbyte>
 80118f4:	4603      	mov	r3, r0
 80118f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
 80118fa:	2b02      	cmp	r3, #2
 80118fc:	d006      	beq.n	801190c <tcp_parseopt+0x48>
 80118fe:	2b02      	cmp	r3, #2
 8011900:	dc2b      	bgt.n	801195a <tcp_parseopt+0x96>
 8011902:	2b00      	cmp	r3, #0
 8011904:	d041      	beq.n	801198a <tcp_parseopt+0xc6>
 8011906:	2b01      	cmp	r3, #1
 8011908:	d127      	bne.n	801195a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801190a:	e037      	b.n	801197c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801190c:	f7ff ffa4 	bl	8011858 <tcp_get_next_optbyte>
 8011910:	4603      	mov	r3, r0
 8011912:	2b04      	cmp	r3, #4
 8011914:	d13b      	bne.n	801198e <tcp_parseopt+0xca>
 8011916:	4b25      	ldr	r3, [pc, #148]	; (80119ac <tcp_parseopt+0xe8>)
 8011918:	881b      	ldrh	r3, [r3, #0]
 801191a:	3301      	adds	r3, #1
 801191c:	4a22      	ldr	r2, [pc, #136]	; (80119a8 <tcp_parseopt+0xe4>)
 801191e:	8812      	ldrh	r2, [r2, #0]
 8011920:	4293      	cmp	r3, r2
 8011922:	da34      	bge.n	801198e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011924:	f7ff ff98 	bl	8011858 <tcp_get_next_optbyte>
 8011928:	4603      	mov	r3, r0
 801192a:	b29b      	uxth	r3, r3
 801192c:	021b      	lsls	r3, r3, #8
 801192e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011930:	f7ff ff92 	bl	8011858 <tcp_get_next_optbyte>
 8011934:	4603      	mov	r3, r0
 8011936:	b29a      	uxth	r2, r3
 8011938:	89bb      	ldrh	r3, [r7, #12]
 801193a:	4313      	orrs	r3, r2
 801193c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801193e:	89bb      	ldrh	r3, [r7, #12]
 8011940:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011944:	d804      	bhi.n	8011950 <tcp_parseopt+0x8c>
 8011946:	89bb      	ldrh	r3, [r7, #12]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <tcp_parseopt+0x8c>
 801194c:	89ba      	ldrh	r2, [r7, #12]
 801194e:	e001      	b.n	8011954 <tcp_parseopt+0x90>
 8011950:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011958:	e010      	b.n	801197c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801195a:	f7ff ff7d 	bl	8011858 <tcp_get_next_optbyte>
 801195e:	4603      	mov	r3, r0
 8011960:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011962:	7afb      	ldrb	r3, [r7, #11]
 8011964:	2b01      	cmp	r3, #1
 8011966:	d914      	bls.n	8011992 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011968:	7afb      	ldrb	r3, [r7, #11]
 801196a:	b29a      	uxth	r2, r3
 801196c:	4b0f      	ldr	r3, [pc, #60]	; (80119ac <tcp_parseopt+0xe8>)
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	4413      	add	r3, r2
 8011972:	b29b      	uxth	r3, r3
 8011974:	3b02      	subs	r3, #2
 8011976:	b29a      	uxth	r2, r3
 8011978:	4b0c      	ldr	r3, [pc, #48]	; (80119ac <tcp_parseopt+0xe8>)
 801197a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801197c:	4b0b      	ldr	r3, [pc, #44]	; (80119ac <tcp_parseopt+0xe8>)
 801197e:	881a      	ldrh	r2, [r3, #0]
 8011980:	4b09      	ldr	r3, [pc, #36]	; (80119a8 <tcp_parseopt+0xe4>)
 8011982:	881b      	ldrh	r3, [r3, #0]
 8011984:	429a      	cmp	r2, r3
 8011986:	d3b3      	bcc.n	80118f0 <tcp_parseopt+0x2c>
 8011988:	e004      	b.n	8011994 <tcp_parseopt+0xd0>
          return;
 801198a:	bf00      	nop
 801198c:	e002      	b.n	8011994 <tcp_parseopt+0xd0>
            return;
 801198e:	bf00      	nop
 8011990:	e000      	b.n	8011994 <tcp_parseopt+0xd0>
            return;
 8011992:	bf00      	nop
      }
    }
  }
}
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	08018920 	.word	0x08018920
 80119a0:	08018d84 	.word	0x08018d84
 80119a4:	0801896c 	.word	0x0801896c
 80119a8:	24000108 	.word	0x24000108
 80119ac:	24000110 	.word	0x24000110

080119b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80119b0:	b480      	push	{r7}
 80119b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80119b4:	4b05      	ldr	r3, [pc, #20]	; (80119cc <tcp_trigger_input_pcb_close+0x1c>)
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	f043 0310 	orr.w	r3, r3, #16
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	4b03      	ldr	r3, [pc, #12]	; (80119cc <tcp_trigger_input_pcb_close+0x1c>)
 80119c0:	701a      	strb	r2, [r3, #0]
}
 80119c2:	bf00      	nop
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr
 80119cc:	24000121 	.word	0x24000121

080119d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00a      	beq.n	80119f8 <tcp_route+0x28>
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	7a1b      	ldrb	r3, [r3, #8]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d006      	beq.n	80119f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	7a1b      	ldrb	r3, [r3, #8]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7fb f8ae 	bl	800cb50 <netif_get_by_index>
 80119f4:	4603      	mov	r3, r0
 80119f6:	e003      	b.n	8011a00 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f003 fafb 	bl	8014ff4 <ip4_route>
 80119fe:	4603      	mov	r3, r0
  }
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3710      	adds	r7, #16
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a08:	b590      	push	{r4, r7, lr}
 8011a0a:	b087      	sub	sp, #28
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	603b      	str	r3, [r7, #0]
 8011a14:	4613      	mov	r3, r2
 8011a16:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d105      	bne.n	8011a2a <tcp_create_segment+0x22>
 8011a1e:	4b44      	ldr	r3, [pc, #272]	; (8011b30 <tcp_create_segment+0x128>)
 8011a20:	22a3      	movs	r2, #163	; 0xa3
 8011a22:	4944      	ldr	r1, [pc, #272]	; (8011b34 <tcp_create_segment+0x12c>)
 8011a24:	4844      	ldr	r0, [pc, #272]	; (8011b38 <tcp_create_segment+0x130>)
 8011a26:	f004 fda5 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d105      	bne.n	8011a3c <tcp_create_segment+0x34>
 8011a30:	4b3f      	ldr	r3, [pc, #252]	; (8011b30 <tcp_create_segment+0x128>)
 8011a32:	22a4      	movs	r2, #164	; 0xa4
 8011a34:	4941      	ldr	r1, [pc, #260]	; (8011b3c <tcp_create_segment+0x134>)
 8011a36:	4840      	ldr	r0, [pc, #256]	; (8011b38 <tcp_create_segment+0x130>)
 8011a38:	f004 fd9c 	bl	8016574 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	f003 0304 	and.w	r3, r3, #4
 8011a48:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a4a:	2003      	movs	r0, #3
 8011a4c:	f7fa fcfa 	bl	800c444 <memp_malloc>
 8011a50:	6138      	str	r0, [r7, #16]
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d104      	bne.n	8011a62 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011a58:	68b8      	ldr	r0, [r7, #8]
 8011a5a:	f7fb fbd9 	bl	800d210 <pbuf_free>
    return NULL;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	e061      	b.n	8011b26 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011a68:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	891a      	ldrh	r2, [r3, #8]
 8011a7a:	7dfb      	ldrb	r3, [r7, #23]
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d205      	bcs.n	8011a8e <tcp_create_segment+0x86>
 8011a82:	4b2b      	ldr	r3, [pc, #172]	; (8011b30 <tcp_create_segment+0x128>)
 8011a84:	22b0      	movs	r2, #176	; 0xb0
 8011a86:	492e      	ldr	r1, [pc, #184]	; (8011b40 <tcp_create_segment+0x138>)
 8011a88:	482b      	ldr	r0, [pc, #172]	; (8011b38 <tcp_create_segment+0x130>)
 8011a8a:	f004 fd73 	bl	8016574 <iprintf>
  seg->len = p->tot_len - optlen;
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	891a      	ldrh	r2, [r3, #8]
 8011a92:	7dfb      	ldrb	r3, [r7, #23]
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	b29a      	uxth	r2, r3
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011a9e:	2114      	movs	r1, #20
 8011aa0:	68b8      	ldr	r0, [r7, #8]
 8011aa2:	f7fb fb1f 	bl	800d0e4 <pbuf_add_header>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d004      	beq.n	8011ab6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011aac:	6938      	ldr	r0, [r7, #16]
 8011aae:	f7fc ffec 	bl	800ea8a <tcp_seg_free>
    return NULL;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	e037      	b.n	8011b26 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	685a      	ldr	r2, [r3, #4]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	8ada      	ldrh	r2, [r3, #22]
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	68dc      	ldr	r4, [r3, #12]
 8011ac8:	4610      	mov	r0, r2
 8011aca:	f7f9 ff8b 	bl	800b9e4 <lwip_htons>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	8b1a      	ldrh	r2, [r3, #24]
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	68dc      	ldr	r4, [r3, #12]
 8011ada:	4610      	mov	r0, r2
 8011adc:	f7f9 ff82 	bl	800b9e4 <lwip_htons>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	68dc      	ldr	r4, [r3, #12]
 8011ae8:	6838      	ldr	r0, [r7, #0]
 8011aea:	f7f9 ff90 	bl	800ba0e <lwip_htonl>
 8011aee:	4603      	mov	r3, r0
 8011af0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011af2:	7dfb      	ldrb	r3, [r7, #23]
 8011af4:	089b      	lsrs	r3, r3, #2
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	3305      	adds	r3, #5
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	031b      	lsls	r3, r3, #12
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	79fb      	ldrb	r3, [r7, #7]
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	4313      	orrs	r3, r2
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	68dc      	ldr	r4, [r3, #12]
 8011b0e:	4610      	mov	r0, r2
 8011b10:	f7f9 ff68 	bl	800b9e4 <lwip_htons>
 8011b14:	4603      	mov	r3, r0
 8011b16:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	749a      	strb	r2, [r3, #18]
 8011b20:	2200      	movs	r2, #0
 8011b22:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b24:	693b      	ldr	r3, [r7, #16]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	371c      	adds	r7, #28
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd90      	pop	{r4, r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	08018da0 	.word	0x08018da0
 8011b34:	08018dd4 	.word	0x08018dd4
 8011b38:	08018df4 	.word	0x08018df4
 8011b3c:	08018e1c 	.word	0x08018e1c
 8011b40:	08018e40 	.word	0x08018e40

08011b44 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b086      	sub	sp, #24
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	607b      	str	r3, [r7, #4]
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	73fb      	strb	r3, [r7, #15]
 8011b50:	460b      	mov	r3, r1
 8011b52:	81bb      	strh	r3, [r7, #12]
 8011b54:	4613      	mov	r3, r2
 8011b56:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011b58:	89bb      	ldrh	r3, [r7, #12]
 8011b5a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d105      	bne.n	8011b6e <tcp_pbuf_prealloc+0x2a>
 8011b62:	4b30      	ldr	r3, [pc, #192]	; (8011c24 <tcp_pbuf_prealloc+0xe0>)
 8011b64:	22e8      	movs	r2, #232	; 0xe8
 8011b66:	4930      	ldr	r1, [pc, #192]	; (8011c28 <tcp_pbuf_prealloc+0xe4>)
 8011b68:	4830      	ldr	r0, [pc, #192]	; (8011c2c <tcp_pbuf_prealloc+0xe8>)
 8011b6a:	f004 fd03 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011b6e:	6a3b      	ldr	r3, [r7, #32]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d105      	bne.n	8011b80 <tcp_pbuf_prealloc+0x3c>
 8011b74:	4b2b      	ldr	r3, [pc, #172]	; (8011c24 <tcp_pbuf_prealloc+0xe0>)
 8011b76:	22e9      	movs	r2, #233	; 0xe9
 8011b78:	492d      	ldr	r1, [pc, #180]	; (8011c30 <tcp_pbuf_prealloc+0xec>)
 8011b7a:	482c      	ldr	r0, [pc, #176]	; (8011c2c <tcp_pbuf_prealloc+0xe8>)
 8011b7c:	f004 fcfa 	bl	8016574 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011b80:	89ba      	ldrh	r2, [r7, #12]
 8011b82:	897b      	ldrh	r3, [r7, #10]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d221      	bcs.n	8011bcc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011b88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b8c:	f003 0302 	and.w	r3, r3, #2
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d111      	bne.n	8011bb8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011b94:	6a3b      	ldr	r3, [r7, #32]
 8011b96:	8b5b      	ldrh	r3, [r3, #26]
 8011b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d115      	bne.n	8011bcc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011ba0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d007      	beq.n	8011bb8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011ba8:	6a3b      	ldr	r3, [r7, #32]
 8011baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d103      	bne.n	8011bb8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011bb0:	6a3b      	ldr	r3, [r7, #32]
 8011bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d009      	beq.n	8011bcc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011bb8:	89bb      	ldrh	r3, [r7, #12]
 8011bba:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011bbe:	f023 0203 	bic.w	r2, r3, #3
 8011bc2:	897b      	ldrh	r3, [r7, #10]
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	bf28      	it	cs
 8011bc8:	4613      	movcs	r3, r2
 8011bca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011bcc:	8af9      	ldrh	r1, [r7, #22]
 8011bce:	7bfb      	ldrb	r3, [r7, #15]
 8011bd0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7fb f837 	bl	800cc48 <pbuf_alloc>
 8011bda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d101      	bne.n	8011be6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011be2:	2300      	movs	r3, #0
 8011be4:	e019      	b.n	8011c1a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d006      	beq.n	8011bfc <tcp_pbuf_prealloc+0xb8>
 8011bee:	4b0d      	ldr	r3, [pc, #52]	; (8011c24 <tcp_pbuf_prealloc+0xe0>)
 8011bf0:	f240 120b 	movw	r2, #267	; 0x10b
 8011bf4:	490f      	ldr	r1, [pc, #60]	; (8011c34 <tcp_pbuf_prealloc+0xf0>)
 8011bf6:	480d      	ldr	r0, [pc, #52]	; (8011c2c <tcp_pbuf_prealloc+0xe8>)
 8011bf8:	f004 fcbc 	bl	8016574 <iprintf>
  *oversize = p->len - length;
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	895a      	ldrh	r2, [r3, #10]
 8011c00:	89bb      	ldrh	r3, [r7, #12]
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	89ba      	ldrh	r2, [r7, #12]
 8011c0e:	811a      	strh	r2, [r3, #8]
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	891a      	ldrh	r2, [r3, #8]
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	815a      	strh	r2, [r3, #10]
  return p;
 8011c18:	693b      	ldr	r3, [r7, #16]
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3718      	adds	r7, #24
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	08018da0 	.word	0x08018da0
 8011c28:	08018e58 	.word	0x08018e58
 8011c2c:	08018df4 	.word	0x08018df4
 8011c30:	08018e7c 	.word	0x08018e7c
 8011c34:	08018e9c 	.word	0x08018e9c

08011c38 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	460b      	mov	r3, r1
 8011c42:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d106      	bne.n	8011c58 <tcp_write_checks+0x20>
 8011c4a:	4b33      	ldr	r3, [pc, #204]	; (8011d18 <tcp_write_checks+0xe0>)
 8011c4c:	f240 1233 	movw	r2, #307	; 0x133
 8011c50:	4932      	ldr	r1, [pc, #200]	; (8011d1c <tcp_write_checks+0xe4>)
 8011c52:	4833      	ldr	r0, [pc, #204]	; (8011d20 <tcp_write_checks+0xe8>)
 8011c54:	f004 fc8e 	bl	8016574 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	7d1b      	ldrb	r3, [r3, #20]
 8011c5c:	2b04      	cmp	r3, #4
 8011c5e:	d00e      	beq.n	8011c7e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011c64:	2b07      	cmp	r3, #7
 8011c66:	d00a      	beq.n	8011c7e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d006      	beq.n	8011c7e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011c74:	2b03      	cmp	r3, #3
 8011c76:	d002      	beq.n	8011c7e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011c78:	f06f 030a 	mvn.w	r3, #10
 8011c7c:	e048      	b.n	8011d10 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011c7e:	887b      	ldrh	r3, [r7, #2]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <tcp_write_checks+0x50>
    return ERR_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	e043      	b.n	8011d10 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011c8e:	887a      	ldrh	r2, [r7, #2]
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d909      	bls.n	8011ca8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	8b5b      	ldrh	r3, [r3, #26]
 8011c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca6:	e033      	b.n	8011d10 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cae:	2b08      	cmp	r3, #8
 8011cb0:	d909      	bls.n	8011cc6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	8b5b      	ldrh	r3, [r3, #26]
 8011cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc4:	e024      	b.n	8011d10 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d00f      	beq.n	8011cf0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d11a      	bne.n	8011d0e <tcp_write_checks+0xd6>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d116      	bne.n	8011d0e <tcp_write_checks+0xd6>
 8011ce0:	4b0d      	ldr	r3, [pc, #52]	; (8011d18 <tcp_write_checks+0xe0>)
 8011ce2:	f240 1255 	movw	r2, #341	; 0x155
 8011ce6:	490f      	ldr	r1, [pc, #60]	; (8011d24 <tcp_write_checks+0xec>)
 8011ce8:	480d      	ldr	r0, [pc, #52]	; (8011d20 <tcp_write_checks+0xe8>)
 8011cea:	f004 fc43 	bl	8016574 <iprintf>
 8011cee:	e00e      	b.n	8011d0e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d103      	bne.n	8011d00 <tcp_write_checks+0xc8>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d006      	beq.n	8011d0e <tcp_write_checks+0xd6>
 8011d00:	4b05      	ldr	r3, [pc, #20]	; (8011d18 <tcp_write_checks+0xe0>)
 8011d02:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011d06:	4908      	ldr	r1, [pc, #32]	; (8011d28 <tcp_write_checks+0xf0>)
 8011d08:	4805      	ldr	r0, [pc, #20]	; (8011d20 <tcp_write_checks+0xe8>)
 8011d0a:	f004 fc33 	bl	8016574 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	08018da0 	.word	0x08018da0
 8011d1c:	08018eb0 	.word	0x08018eb0
 8011d20:	08018df4 	.word	0x08018df4
 8011d24:	08018ed0 	.word	0x08018ed0
 8011d28:	08018f0c 	.word	0x08018f0c

08011d2c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011d2c:	b590      	push	{r4, r7, lr}
 8011d2e:	b09b      	sub	sp, #108	; 0x6c
 8011d30:	af04      	add	r7, sp, #16
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	4611      	mov	r1, r2
 8011d38:	461a      	mov	r2, r3
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	80fb      	strh	r3, [r7, #6]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011d46:	2300      	movs	r3, #0
 8011d48:	653b      	str	r3, [r7, #80]	; 0x50
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d4e:	2300      	movs	r3, #0
 8011d50:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d52:	2300      	movs	r3, #0
 8011d54:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011d56:	2300      	movs	r3, #0
 8011d58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011d62:	2300      	movs	r3, #0
 8011d64:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011d66:	2300      	movs	r3, #0
 8011d68:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d109      	bne.n	8011d88 <tcp_write+0x5c>
 8011d74:	4ba4      	ldr	r3, [pc, #656]	; (8012008 <tcp_write+0x2dc>)
 8011d76:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011d7a:	49a4      	ldr	r1, [pc, #656]	; (801200c <tcp_write+0x2e0>)
 8011d7c:	48a4      	ldr	r0, [pc, #656]	; (8012010 <tcp_write+0x2e4>)
 8011d7e:	f004 fbf9 	bl	8016574 <iprintf>
 8011d82:	f06f 030f 	mvn.w	r3, #15
 8011d86:	e32a      	b.n	80123de <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d8e:	085b      	lsrs	r3, r3, #1
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d96:	4293      	cmp	r3, r2
 8011d98:	bf28      	it	cs
 8011d9a:	4613      	movcs	r3, r2
 8011d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d102      	bne.n	8011daa <tcp_write+0x7e>
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011da8:	e000      	b.n	8011dac <tcp_write+0x80>
 8011daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dac:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d109      	bne.n	8011dc8 <tcp_write+0x9c>
 8011db4:	4b94      	ldr	r3, [pc, #592]	; (8012008 <tcp_write+0x2dc>)
 8011db6:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011dba:	4996      	ldr	r1, [pc, #600]	; (8012014 <tcp_write+0x2e8>)
 8011dbc:	4894      	ldr	r0, [pc, #592]	; (8012010 <tcp_write+0x2e4>)
 8011dbe:	f004 fbd9 	bl	8016574 <iprintf>
 8011dc2:	f06f 030f 	mvn.w	r3, #15
 8011dc6:	e30a      	b.n	80123de <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011dc8:	88fb      	ldrh	r3, [r7, #6]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff ff33 	bl	8011c38 <tcp_write_checks>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011dd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d002      	beq.n	8011de6 <tcp_write+0xba>
    return err;
 8011de0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011de4:	e2fb      	b.n	80123de <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011df0:	2300      	movs	r3, #0
 8011df2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f000 80f6 	beq.w	8011fec <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e04:	653b      	str	r3, [r7, #80]	; 0x50
 8011e06:	e002      	b.n	8011e0e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d1f8      	bne.n	8011e08 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e18:	7a9b      	ldrb	r3, [r3, #10]
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	f003 0304 	and.w	r3, r3, #4
 8011e22:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011e24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e28:	891b      	ldrh	r3, [r3, #8]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	8c3b      	ldrh	r3, [r7, #32]
 8011e2e:	440b      	add	r3, r1
 8011e30:	429a      	cmp	r2, r3
 8011e32:	da06      	bge.n	8011e42 <tcp_write+0x116>
 8011e34:	4b74      	ldr	r3, [pc, #464]	; (8012008 <tcp_write+0x2dc>)
 8011e36:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011e3a:	4977      	ldr	r1, [pc, #476]	; (8012018 <tcp_write+0x2ec>)
 8011e3c:	4874      	ldr	r0, [pc, #464]	; (8012010 <tcp_write+0x2e4>)
 8011e3e:	f004 fb99 	bl	8016574 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e44:	891a      	ldrh	r2, [r3, #8]
 8011e46:	8c3b      	ldrh	r3, [r7, #32]
 8011e48:	4413      	add	r3, r2
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e4e:	1ad3      	subs	r3, r2, r3
 8011e50:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e58:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011e5a:	8a7b      	ldrh	r3, [r7, #18]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d026      	beq.n	8011eae <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011e60:	8a7b      	ldrh	r3, [r7, #18]
 8011e62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d206      	bcs.n	8011e76 <tcp_write+0x14a>
 8011e68:	4b67      	ldr	r3, [pc, #412]	; (8012008 <tcp_write+0x2dc>)
 8011e6a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011e6e:	496b      	ldr	r1, [pc, #428]	; (801201c <tcp_write+0x2f0>)
 8011e70:	4867      	ldr	r0, [pc, #412]	; (8012010 <tcp_write+0x2e4>)
 8011e72:	f004 fb7f 	bl	8016574 <iprintf>
      seg = last_unsent;
 8011e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e78:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011e7a:	8a7b      	ldrh	r3, [r7, #18]
 8011e7c:	88fa      	ldrh	r2, [r7, #6]
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	bf28      	it	cs
 8011e82:	4613      	movcs	r3, r2
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	bf28      	it	cs
 8011e8c:	4613      	movcs	r3, r2
 8011e8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011e90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e96:	4413      	add	r3, r2
 8011e98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011e9c:	8a7a      	ldrh	r2, [r7, #18]
 8011e9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ea0:	1ad3      	subs	r3, r2, r3
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011ea6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011eae:	8a7b      	ldrh	r3, [r7, #18]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d00b      	beq.n	8011ecc <tcp_write+0x1a0>
 8011eb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011eb8:	88fb      	ldrh	r3, [r7, #6]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d006      	beq.n	8011ecc <tcp_write+0x1a0>
 8011ebe:	4b52      	ldr	r3, [pc, #328]	; (8012008 <tcp_write+0x2dc>)
 8011ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ec4:	4956      	ldr	r1, [pc, #344]	; (8012020 <tcp_write+0x2f4>)
 8011ec6:	4852      	ldr	r0, [pc, #328]	; (8012010 <tcp_write+0x2e4>)
 8011ec8:	f004 fb54 	bl	8016574 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011ecc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ed0:	88fb      	ldrh	r3, [r7, #6]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	f080 8167 	bcs.w	80121a6 <tcp_write+0x47a>
 8011ed8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f000 8163 	beq.w	80121a6 <tcp_write+0x47a>
 8011ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ee2:	891b      	ldrh	r3, [r3, #8]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	f000 815e 	beq.w	80121a6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011eea:	88fa      	ldrh	r2, [r7, #6]
 8011eec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ef0:	1ad2      	subs	r2, r2, r3
 8011ef2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	bfa8      	it	ge
 8011ef8:	4613      	movge	r3, r2
 8011efa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efe:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f00:	797b      	ldrb	r3, [r7, #5]
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d027      	beq.n	8011f5a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011f0a:	f107 0012 	add.w	r0, r7, #18
 8011f0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f10:	8bf9      	ldrh	r1, [r7, #30]
 8011f12:	2301      	movs	r3, #1
 8011f14:	9302      	str	r3, [sp, #8]
 8011f16:	797b      	ldrb	r3, [r7, #5]
 8011f18:	9301      	str	r3, [sp, #4]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2000      	movs	r0, #0
 8011f22:	f7ff fe0f 	bl	8011b44 <tcp_pbuf_prealloc>
 8011f26:	6578      	str	r0, [r7, #84]	; 0x54
 8011f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 8225 	beq.w	801237a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f32:	6858      	ldr	r0, [r3, #4]
 8011f34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f38:	68ba      	ldr	r2, [r7, #8]
 8011f3a:	4413      	add	r3, r2
 8011f3c:	8bfa      	ldrh	r2, [r7, #30]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	f004 fb02 	bl	8016548 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011f44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f46:	f7fb f9eb 	bl	800d320 <pbuf_clen>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f52:	4413      	add	r3, r2
 8011f54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011f58:	e041      	b.n	8011fde <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8011f60:	e002      	b.n	8011f68 <tcp_write+0x23c>
 8011f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	637b      	str	r3, [r7, #52]	; 0x34
 8011f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1f8      	bne.n	8011f62 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f72:	7b1b      	ldrb	r3, [r3, #12]
 8011f74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d115      	bne.n	8011fa8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f82:	8952      	ldrh	r2, [r2, #10]
 8011f84:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d10d      	bne.n	8011fa8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011f8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d006      	beq.n	8011fa2 <tcp_write+0x276>
 8011f94:	4b1c      	ldr	r3, [pc, #112]	; (8012008 <tcp_write+0x2dc>)
 8011f96:	f240 2231 	movw	r2, #561	; 0x231
 8011f9a:	4922      	ldr	r1, [pc, #136]	; (8012024 <tcp_write+0x2f8>)
 8011f9c:	481c      	ldr	r0, [pc, #112]	; (8012010 <tcp_write+0x2e4>)
 8011f9e:	f004 fae9 	bl	8016574 <iprintf>
          extendlen = seglen;
 8011fa2:	8bfb      	ldrh	r3, [r7, #30]
 8011fa4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011fa6:	e01a      	b.n	8011fde <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011fa8:	8bfb      	ldrh	r3, [r7, #30]
 8011faa:	2201      	movs	r2, #1
 8011fac:	4619      	mov	r1, r3
 8011fae:	2000      	movs	r0, #0
 8011fb0:	f7fa fe4a 	bl	800cc48 <pbuf_alloc>
 8011fb4:	6578      	str	r0, [r7, #84]	; 0x54
 8011fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 81e0 	beq.w	801237e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011fbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	441a      	add	r2, r3
 8011fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fc8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011fca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011fcc:	f7fb f9a8 	bl	800d320 <pbuf_clen>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fd8:	4413      	add	r3, r2
 8011fda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011fde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fe2:	8bfb      	ldrh	r3, [r7, #30]
 8011fe4:	4413      	add	r3, r2
 8011fe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011fea:	e0dc      	b.n	80121a6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	f000 80d7 	beq.w	80121a6 <tcp_write+0x47a>
 8011ff8:	4b03      	ldr	r3, [pc, #12]	; (8012008 <tcp_write+0x2dc>)
 8011ffa:	f240 224a 	movw	r2, #586	; 0x24a
 8011ffe:	490a      	ldr	r1, [pc, #40]	; (8012028 <tcp_write+0x2fc>)
 8012000:	4803      	ldr	r0, [pc, #12]	; (8012010 <tcp_write+0x2e4>)
 8012002:	f004 fab7 	bl	8016574 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012006:	e0ce      	b.n	80121a6 <tcp_write+0x47a>
 8012008:	08018da0 	.word	0x08018da0
 801200c:	08018f40 	.word	0x08018f40
 8012010:	08018df4 	.word	0x08018df4
 8012014:	08018f58 	.word	0x08018f58
 8012018:	08018f8c 	.word	0x08018f8c
 801201c:	08018fa4 	.word	0x08018fa4
 8012020:	08018fc4 	.word	0x08018fc4
 8012024:	08018fe4 	.word	0x08018fe4
 8012028:	08019010 	.word	0x08019010
    struct pbuf *p;
    u16_t left = len - pos;
 801202c:	88fa      	ldrh	r2, [r7, #6]
 801202e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012032:	1ad3      	subs	r3, r2, r3
 8012034:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012036:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801203a:	b29b      	uxth	r3, r3
 801203c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012042:	8b7a      	ldrh	r2, [r7, #26]
 8012044:	8bbb      	ldrh	r3, [r7, #28]
 8012046:	4293      	cmp	r3, r2
 8012048:	bf28      	it	cs
 801204a:	4613      	movcs	r3, r2
 801204c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801204e:	797b      	ldrb	r3, [r7, #5]
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b00      	cmp	r3, #0
 8012056:	d036      	beq.n	80120c6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801205c:	b29a      	uxth	r2, r3
 801205e:	8b3b      	ldrh	r3, [r7, #24]
 8012060:	4413      	add	r3, r2
 8012062:	b299      	uxth	r1, r3
 8012064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012066:	2b00      	cmp	r3, #0
 8012068:	bf0c      	ite	eq
 801206a:	2301      	moveq	r3, #1
 801206c:	2300      	movne	r3, #0
 801206e:	b2db      	uxtb	r3, r3
 8012070:	f107 0012 	add.w	r0, r7, #18
 8012074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012076:	9302      	str	r3, [sp, #8]
 8012078:	797b      	ldrb	r3, [r7, #5]
 801207a:	9301      	str	r3, [sp, #4]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	4603      	mov	r3, r0
 8012082:	2036      	movs	r0, #54	; 0x36
 8012084:	f7ff fd5e 	bl	8011b44 <tcp_pbuf_prealloc>
 8012088:	6338      	str	r0, [r7, #48]	; 0x30
 801208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 8178 	beq.w	8012382 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	895b      	ldrh	r3, [r3, #10]
 8012096:	8b3a      	ldrh	r2, [r7, #24]
 8012098:	429a      	cmp	r2, r3
 801209a:	d906      	bls.n	80120aa <tcp_write+0x37e>
 801209c:	4b8c      	ldr	r3, [pc, #560]	; (80122d0 <tcp_write+0x5a4>)
 801209e:	f240 2266 	movw	r2, #614	; 0x266
 80120a2:	498c      	ldr	r1, [pc, #560]	; (80122d4 <tcp_write+0x5a8>)
 80120a4:	488c      	ldr	r0, [pc, #560]	; (80122d8 <tcp_write+0x5ac>)
 80120a6:	f004 fa65 	bl	8016574 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ac:	685a      	ldr	r2, [r3, #4]
 80120ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80120b2:	18d0      	adds	r0, r2, r3
 80120b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120b8:	68ba      	ldr	r2, [r7, #8]
 80120ba:	4413      	add	r3, r2
 80120bc:	8b3a      	ldrh	r2, [r7, #24]
 80120be:	4619      	mov	r1, r3
 80120c0:	f004 fa42 	bl	8016548 <memcpy>
 80120c4:	e02f      	b.n	8012126 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80120c6:	8a7b      	ldrh	r3, [r7, #18]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d006      	beq.n	80120da <tcp_write+0x3ae>
 80120cc:	4b80      	ldr	r3, [pc, #512]	; (80122d0 <tcp_write+0x5a4>)
 80120ce:	f240 2271 	movw	r2, #625	; 0x271
 80120d2:	4982      	ldr	r1, [pc, #520]	; (80122dc <tcp_write+0x5b0>)
 80120d4:	4880      	ldr	r0, [pc, #512]	; (80122d8 <tcp_write+0x5ac>)
 80120d6:	f004 fa4d 	bl	8016574 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80120da:	8b3b      	ldrh	r3, [r7, #24]
 80120dc:	2201      	movs	r2, #1
 80120de:	4619      	mov	r1, r3
 80120e0:	2036      	movs	r0, #54	; 0x36
 80120e2:	f7fa fdb1 	bl	800cc48 <pbuf_alloc>
 80120e6:	6178      	str	r0, [r7, #20]
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	f000 814b 	beq.w	8012386 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80120f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	441a      	add	r2, r3
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80120fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012100:	b29b      	uxth	r3, r3
 8012102:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012106:	4619      	mov	r1, r3
 8012108:	2036      	movs	r0, #54	; 0x36
 801210a:	f7fa fd9d 	bl	800cc48 <pbuf_alloc>
 801210e:	6338      	str	r0, [r7, #48]	; 0x30
 8012110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012112:	2b00      	cmp	r3, #0
 8012114:	d103      	bne.n	801211e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012116:	6978      	ldr	r0, [r7, #20]
 8012118:	f7fb f87a 	bl	800d210 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801211c:	e136      	b.n	801238c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801211e:	6979      	ldr	r1, [r7, #20]
 8012120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012122:	f7fb f937 	bl	800d394 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012128:	f7fb f8fa 	bl	800d320 <pbuf_clen>
 801212c:	4603      	mov	r3, r0
 801212e:	461a      	mov	r2, r3
 8012130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012134:	4413      	add	r3, r2
 8012136:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801213a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801213e:	2b09      	cmp	r3, #9
 8012140:	d903      	bls.n	801214a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012144:	f7fb f864 	bl	800d210 <pbuf_free>
      goto memerr;
 8012148:	e120      	b.n	801238c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801214e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012152:	441a      	add	r2, r3
 8012154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	4613      	mov	r3, r2
 801215c:	2200      	movs	r2, #0
 801215e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f7ff fc51 	bl	8011a08 <tcp_create_segment>
 8012166:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801216a:	2b00      	cmp	r3, #0
 801216c:	f000 810d 	beq.w	801238a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012172:	2b00      	cmp	r3, #0
 8012174:	d102      	bne.n	801217c <tcp_write+0x450>
      queue = seg;
 8012176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012178:	647b      	str	r3, [r7, #68]	; 0x44
 801217a:	e00c      	b.n	8012196 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801217c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801217e:	2b00      	cmp	r3, #0
 8012180:	d106      	bne.n	8012190 <tcp_write+0x464>
 8012182:	4b53      	ldr	r3, [pc, #332]	; (80122d0 <tcp_write+0x5a4>)
 8012184:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012188:	4955      	ldr	r1, [pc, #340]	; (80122e0 <tcp_write+0x5b4>)
 801218a:	4853      	ldr	r0, [pc, #332]	; (80122d8 <tcp_write+0x5ac>)
 801218c:	f004 f9f2 	bl	8016574 <iprintf>
      prev_seg->next = seg;
 8012190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012194:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012198:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801219a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801219e:	8b3b      	ldrh	r3, [r7, #24]
 80121a0:	4413      	add	r3, r2
 80121a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80121a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121aa:	88fb      	ldrh	r3, [r7, #6]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	f4ff af3d 	bcc.w	801202c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80121b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d02c      	beq.n	8012212 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80121b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121be:	e01e      	b.n	80121fe <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	891a      	ldrh	r2, [r3, #8]
 80121c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121c6:	4413      	add	r3, r2
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121cc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80121ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d110      	bne.n	80121f8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121dc:	8952      	ldrh	r2, [r2, #10]
 80121de:	4413      	add	r3, r2
 80121e0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80121e2:	68b9      	ldr	r1, [r7, #8]
 80121e4:	4618      	mov	r0, r3
 80121e6:	f004 f9af 	bl	8016548 <memcpy>
        p->len += oversize_used;
 80121ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ec:	895a      	ldrh	r2, [r3, #10]
 80121ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121f0:	4413      	add	r3, r2
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80121f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1dd      	bne.n	80121c0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012206:	891a      	ldrh	r2, [r3, #8]
 8012208:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801220a:	4413      	add	r3, r2
 801220c:	b29a      	uxth	r2, r3
 801220e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012210:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012212:	8a7a      	ldrh	r2, [r7, #18]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801221c:	2b00      	cmp	r3, #0
 801221e:	d018      	beq.n	8012252 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012222:	2b00      	cmp	r3, #0
 8012224:	d106      	bne.n	8012234 <tcp_write+0x508>
 8012226:	4b2a      	ldr	r3, [pc, #168]	; (80122d0 <tcp_write+0x5a4>)
 8012228:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801222c:	492d      	ldr	r1, [pc, #180]	; (80122e4 <tcp_write+0x5b8>)
 801222e:	482a      	ldr	r0, [pc, #168]	; (80122d8 <tcp_write+0x5ac>)
 8012230:	f004 f9a0 	bl	8016574 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801223a:	4618      	mov	r0, r3
 801223c:	f7fb f8aa 	bl	800d394 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012242:	891a      	ldrh	r2, [r3, #8]
 8012244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012246:	891b      	ldrh	r3, [r3, #8]
 8012248:	4413      	add	r3, r2
 801224a:	b29a      	uxth	r2, r3
 801224c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801224e:	811a      	strh	r2, [r3, #8]
 8012250:	e037      	b.n	80122c2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012252:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012254:	2b00      	cmp	r3, #0
 8012256:	d034      	beq.n	80122c2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225a:	2b00      	cmp	r3, #0
 801225c:	d003      	beq.n	8012266 <tcp_write+0x53a>
 801225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d106      	bne.n	8012274 <tcp_write+0x548>
 8012266:	4b1a      	ldr	r3, [pc, #104]	; (80122d0 <tcp_write+0x5a4>)
 8012268:	f240 22e6 	movw	r2, #742	; 0x2e6
 801226c:	491e      	ldr	r1, [pc, #120]	; (80122e8 <tcp_write+0x5bc>)
 801226e:	481a      	ldr	r0, [pc, #104]	; (80122d8 <tcp_write+0x5ac>)
 8012270:	f004 f980 	bl	8016574 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	62bb      	str	r3, [r7, #40]	; 0x28
 801227a:	e009      	b.n	8012290 <tcp_write+0x564>
      p->tot_len += extendlen;
 801227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227e:	891a      	ldrh	r2, [r3, #8]
 8012280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012282:	4413      	add	r3, r2
 8012284:	b29a      	uxth	r2, r3
 8012286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012288:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1f1      	bne.n	801227c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229a:	891a      	ldrh	r2, [r3, #8]
 801229c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801229e:	4413      	add	r3, r2
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80122a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a8:	895a      	ldrh	r2, [r3, #10]
 80122aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122ac:	4413      	add	r3, r2
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80122b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b6:	891a      	ldrh	r2, [r3, #8]
 80122b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122ba:	4413      	add	r3, r2
 80122bc:	b29a      	uxth	r2, r3
 80122be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122c0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80122c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d111      	bne.n	80122ec <tcp_write+0x5c0>
    pcb->unsent = queue;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80122ce:	e010      	b.n	80122f2 <tcp_write+0x5c6>
 80122d0:	08018da0 	.word	0x08018da0
 80122d4:	08019040 	.word	0x08019040
 80122d8:	08018df4 	.word	0x08018df4
 80122dc:	08019080 	.word	0x08019080
 80122e0:	08019090 	.word	0x08019090
 80122e4:	080190a4 	.word	0x080190a4
 80122e8:	080190dc 	.word	0x080190dc
  } else {
    last_unsent->next = queue;
 80122ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122f0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122f6:	88fb      	ldrh	r3, [r7, #6]
 80122f8:	441a      	add	r2, r3
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012304:	88fb      	ldrh	r3, [r7, #6]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	b29a      	uxth	r2, r3
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012316:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00e      	beq.n	8012342 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10a      	bne.n	8012342 <tcp_write+0x616>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012330:	2b00      	cmp	r3, #0
 8012332:	d106      	bne.n	8012342 <tcp_write+0x616>
 8012334:	4b2c      	ldr	r3, [pc, #176]	; (80123e8 <tcp_write+0x6bc>)
 8012336:	f240 3212 	movw	r2, #786	; 0x312
 801233a:	492c      	ldr	r1, [pc, #176]	; (80123ec <tcp_write+0x6c0>)
 801233c:	482c      	ldr	r0, [pc, #176]	; (80123f0 <tcp_write+0x6c4>)
 801233e:	f004 f919 	bl	8016574 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012344:	2b00      	cmp	r3, #0
 8012346:	d016      	beq.n	8012376 <tcp_write+0x64a>
 8012348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d012      	beq.n	8012376 <tcp_write+0x64a>
 8012350:	797b      	ldrb	r3, [r7, #5]
 8012352:	f003 0302 	and.w	r3, r3, #2
 8012356:	2b00      	cmp	r3, #0
 8012358:	d10d      	bne.n	8012376 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	899b      	ldrh	r3, [r3, #12]
 8012360:	b29c      	uxth	r4, r3
 8012362:	2008      	movs	r0, #8
 8012364:	f7f9 fb3e 	bl	800b9e4 <lwip_htons>
 8012368:	4603      	mov	r3, r0
 801236a:	461a      	mov	r2, r3
 801236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801236e:	68db      	ldr	r3, [r3, #12]
 8012370:	4322      	orrs	r2, r4
 8012372:	b292      	uxth	r2, r2
 8012374:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012376:	2300      	movs	r3, #0
 8012378:	e031      	b.n	80123de <tcp_write+0x6b2>
          goto memerr;
 801237a:	bf00      	nop
 801237c:	e006      	b.n	801238c <tcp_write+0x660>
            goto memerr;
 801237e:	bf00      	nop
 8012380:	e004      	b.n	801238c <tcp_write+0x660>
        goto memerr;
 8012382:	bf00      	nop
 8012384:	e002      	b.n	801238c <tcp_write+0x660>
        goto memerr;
 8012386:	bf00      	nop
 8012388:	e000      	b.n	801238c <tcp_write+0x660>
      goto memerr;
 801238a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	8b5b      	ldrh	r3, [r3, #26]
 8012390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012394:	b29a      	uxth	r2, r3
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80123a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80123a2:	f7fa ff35 	bl	800d210 <pbuf_free>
  }
  if (queue != NULL) {
 80123a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80123ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80123ae:	f7fc fb57 	bl	800ea60 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00e      	beq.n	80123da <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10a      	bne.n	80123da <tcp_write+0x6ae>
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d106      	bne.n	80123da <tcp_write+0x6ae>
 80123cc:	4b06      	ldr	r3, [pc, #24]	; (80123e8 <tcp_write+0x6bc>)
 80123ce:	f240 3227 	movw	r2, #807	; 0x327
 80123d2:	4906      	ldr	r1, [pc, #24]	; (80123ec <tcp_write+0x6c0>)
 80123d4:	4806      	ldr	r0, [pc, #24]	; (80123f0 <tcp_write+0x6c4>)
 80123d6:	f004 f8cd 	bl	8016574 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80123da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123de:	4618      	mov	r0, r3
 80123e0:	375c      	adds	r7, #92	; 0x5c
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd90      	pop	{r4, r7, pc}
 80123e6:	bf00      	nop
 80123e8:	08018da0 	.word	0x08018da0
 80123ec:	08019114 	.word	0x08019114
 80123f0:	08018df4 	.word	0x08018df4

080123f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80123f4:	b590      	push	{r4, r7, lr}
 80123f6:	b08b      	sub	sp, #44	; 0x2c
 80123f8:	af02      	add	r7, sp, #8
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012400:	2300      	movs	r3, #0
 8012402:	61fb      	str	r3, [r7, #28]
 8012404:	2300      	movs	r3, #0
 8012406:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012408:	2300      	movs	r3, #0
 801240a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <tcp_split_unsent_seg+0x2c>
 8012412:	4b95      	ldr	r3, [pc, #596]	; (8012668 <tcp_split_unsent_seg+0x274>)
 8012414:	f240 324b 	movw	r2, #843	; 0x34b
 8012418:	4994      	ldr	r1, [pc, #592]	; (801266c <tcp_split_unsent_seg+0x278>)
 801241a:	4895      	ldr	r0, [pc, #596]	; (8012670 <tcp_split_unsent_seg+0x27c>)
 801241c:	f004 f8aa 	bl	8016574 <iprintf>

  useg = pcb->unsent;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012424:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d102      	bne.n	8012432 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801242c:	f04f 33ff 	mov.w	r3, #4294967295
 8012430:	e116      	b.n	8012660 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012432:	887b      	ldrh	r3, [r7, #2]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d109      	bne.n	801244c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012438:	4b8b      	ldr	r3, [pc, #556]	; (8012668 <tcp_split_unsent_seg+0x274>)
 801243a:	f240 3253 	movw	r2, #851	; 0x353
 801243e:	498d      	ldr	r1, [pc, #564]	; (8012674 <tcp_split_unsent_seg+0x280>)
 8012440:	488b      	ldr	r0, [pc, #556]	; (8012670 <tcp_split_unsent_seg+0x27c>)
 8012442:	f004 f897 	bl	8016574 <iprintf>
    return ERR_VAL;
 8012446:	f06f 0305 	mvn.w	r3, #5
 801244a:	e109      	b.n	8012660 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	891b      	ldrh	r3, [r3, #8]
 8012450:	887a      	ldrh	r2, [r7, #2]
 8012452:	429a      	cmp	r2, r3
 8012454:	d301      	bcc.n	801245a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012456:	2300      	movs	r3, #0
 8012458:	e102      	b.n	8012660 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801245e:	887a      	ldrh	r2, [r7, #2]
 8012460:	429a      	cmp	r2, r3
 8012462:	d906      	bls.n	8012472 <tcp_split_unsent_seg+0x7e>
 8012464:	4b80      	ldr	r3, [pc, #512]	; (8012668 <tcp_split_unsent_seg+0x274>)
 8012466:	f240 325b 	movw	r2, #859	; 0x35b
 801246a:	4983      	ldr	r1, [pc, #524]	; (8012678 <tcp_split_unsent_seg+0x284>)
 801246c:	4880      	ldr	r0, [pc, #512]	; (8012670 <tcp_split_unsent_seg+0x27c>)
 801246e:	f004 f881 	bl	8016574 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	891b      	ldrh	r3, [r3, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d106      	bne.n	8012488 <tcp_split_unsent_seg+0x94>
 801247a:	4b7b      	ldr	r3, [pc, #492]	; (8012668 <tcp_split_unsent_seg+0x274>)
 801247c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012480:	497e      	ldr	r1, [pc, #504]	; (801267c <tcp_split_unsent_seg+0x288>)
 8012482:	487b      	ldr	r0, [pc, #492]	; (8012670 <tcp_split_unsent_seg+0x27c>)
 8012484:	f004 f876 	bl	8016574 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	7a9b      	ldrb	r3, [r3, #10]
 801248c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801248e:	7bfb      	ldrb	r3, [r7, #15]
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	b2db      	uxtb	r3, r3
 8012494:	f003 0304 	and.w	r3, r3, #4
 8012498:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	891a      	ldrh	r2, [r3, #8]
 801249e:	887b      	ldrh	r3, [r7, #2]
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80124a4:	7bbb      	ldrb	r3, [r7, #14]
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	89bb      	ldrh	r3, [r7, #12]
 80124aa:	4413      	add	r3, r2
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124b2:	4619      	mov	r1, r3
 80124b4:	2036      	movs	r0, #54	; 0x36
 80124b6:	f7fa fbc7 	bl	800cc48 <pbuf_alloc>
 80124ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f000 80b7 	beq.w	8012632 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	891a      	ldrh	r2, [r3, #8]
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	891b      	ldrh	r3, [r3, #8]
 80124ce:	1ad3      	subs	r3, r2, r3
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	887b      	ldrh	r3, [r7, #2]
 80124d4:	4413      	add	r3, r2
 80124d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	6858      	ldr	r0, [r3, #4]
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	685a      	ldr	r2, [r3, #4]
 80124e0:	7bbb      	ldrb	r3, [r7, #14]
 80124e2:	18d1      	adds	r1, r2, r3
 80124e4:	897b      	ldrh	r3, [r7, #10]
 80124e6:	89ba      	ldrh	r2, [r7, #12]
 80124e8:	f7fb f88c 	bl	800d604 <pbuf_copy_partial>
 80124ec:	4603      	mov	r3, r0
 80124ee:	461a      	mov	r2, r3
 80124f0:	89bb      	ldrh	r3, [r7, #12]
 80124f2:	4293      	cmp	r3, r2
 80124f4:	f040 809f 	bne.w	8012636 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	899b      	ldrh	r3, [r3, #12]
 80124fe:	b29b      	uxth	r3, r3
 8012500:	4618      	mov	r0, r3
 8012502:	f7f9 fa6f 	bl	800b9e4 <lwip_htons>
 8012506:	4603      	mov	r3, r0
 8012508:	b2db      	uxtb	r3, r3
 801250a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801250e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012510:	2300      	movs	r3, #0
 8012512:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012514:	7efb      	ldrb	r3, [r7, #27]
 8012516:	f003 0308 	and.w	r3, r3, #8
 801251a:	2b00      	cmp	r3, #0
 801251c:	d007      	beq.n	801252e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801251e:	7efb      	ldrb	r3, [r7, #27]
 8012520:	f023 0308 	bic.w	r3, r3, #8
 8012524:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012526:	7ebb      	ldrb	r3, [r7, #26]
 8012528:	f043 0308 	orr.w	r3, r3, #8
 801252c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801252e:	7efb      	ldrb	r3, [r7, #27]
 8012530:	f003 0301 	and.w	r3, r3, #1
 8012534:	2b00      	cmp	r3, #0
 8012536:	d007      	beq.n	8012548 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012538:	7efb      	ldrb	r3, [r7, #27]
 801253a:	f023 0301 	bic.w	r3, r3, #1
 801253e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012540:	7ebb      	ldrb	r3, [r7, #26]
 8012542:	f043 0301 	orr.w	r3, r3, #1
 8012546:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	f7f9 fa5d 	bl	800ba0e <lwip_htonl>
 8012554:	4602      	mov	r2, r0
 8012556:	887b      	ldrh	r3, [r7, #2]
 8012558:	18d1      	adds	r1, r2, r3
 801255a:	7eba      	ldrb	r2, [r7, #26]
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	460b      	mov	r3, r1
 8012562:	6939      	ldr	r1, [r7, #16]
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7ff fa4f 	bl	8011a08 <tcp_create_segment>
 801256a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d063      	beq.n	801263a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	4618      	mov	r0, r3
 8012578:	f7fa fed2 	bl	800d320 <pbuf_clen>
 801257c:	4603      	mov	r3, r0
 801257e:	461a      	mov	r2, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	b29a      	uxth	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	6858      	ldr	r0, [r3, #4]
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	891a      	ldrh	r2, [r3, #8]
 801259a:	89bb      	ldrh	r3, [r7, #12]
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	b29b      	uxth	r3, r3
 80125a0:	4619      	mov	r1, r3
 80125a2:	f7fa fcaf 	bl	800cf04 <pbuf_realloc>
  useg->len -= remainder;
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	891a      	ldrh	r2, [r3, #8]
 80125aa:	89bb      	ldrh	r3, [r7, #12]
 80125ac:	1ad3      	subs	r3, r2, r3
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	899b      	ldrh	r3, [r3, #12]
 80125ba:	b29c      	uxth	r4, r3
 80125bc:	7efb      	ldrb	r3, [r7, #27]
 80125be:	b29b      	uxth	r3, r3
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f9 fa0f 	bl	800b9e4 <lwip_htons>
 80125c6:	4603      	mov	r3, r0
 80125c8:	461a      	mov	r2, r3
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	68db      	ldr	r3, [r3, #12]
 80125ce:	4322      	orrs	r2, r4
 80125d0:	b292      	uxth	r2, r2
 80125d2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	4618      	mov	r0, r3
 80125da:	f7fa fea1 	bl	800d320 <pbuf_clen>
 80125de:	4603      	mov	r3, r0
 80125e0:	461a      	mov	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125e8:	4413      	add	r3, r2
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fa fe92 	bl	800d320 <pbuf_clen>
 80125fc:	4603      	mov	r3, r0
 80125fe:	461a      	mov	r2, r3
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012606:	4413      	add	r3, r2
 8012608:	b29a      	uxth	r2, r3
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	69fa      	ldr	r2, [r7, #28]
 801261c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d103      	bne.n	801262e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2200      	movs	r2, #0
 801262a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801262e:	2300      	movs	r3, #0
 8012630:	e016      	b.n	8012660 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012632:	bf00      	nop
 8012634:	e002      	b.n	801263c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012636:	bf00      	nop
 8012638:	e000      	b.n	801263c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801263a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d006      	beq.n	8012650 <tcp_split_unsent_seg+0x25c>
 8012642:	4b09      	ldr	r3, [pc, #36]	; (8012668 <tcp_split_unsent_seg+0x274>)
 8012644:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012648:	490d      	ldr	r1, [pc, #52]	; (8012680 <tcp_split_unsent_seg+0x28c>)
 801264a:	4809      	ldr	r0, [pc, #36]	; (8012670 <tcp_split_unsent_seg+0x27c>)
 801264c:	f003 ff92 	bl	8016574 <iprintf>
  if (p != NULL) {
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d002      	beq.n	801265c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012656:	6938      	ldr	r0, [r7, #16]
 8012658:	f7fa fdda 	bl	800d210 <pbuf_free>
  }

  return ERR_MEM;
 801265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012660:	4618      	mov	r0, r3
 8012662:	3724      	adds	r7, #36	; 0x24
 8012664:	46bd      	mov	sp, r7
 8012666:	bd90      	pop	{r4, r7, pc}
 8012668:	08018da0 	.word	0x08018da0
 801266c:	08019134 	.word	0x08019134
 8012670:	08018df4 	.word	0x08018df4
 8012674:	08019158 	.word	0x08019158
 8012678:	0801917c 	.word	0x0801917c
 801267c:	0801918c 	.word	0x0801918c
 8012680:	0801919c 	.word	0x0801919c

08012684 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012684:	b590      	push	{r4, r7, lr}
 8012686:	b085      	sub	sp, #20
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d106      	bne.n	80126a0 <tcp_send_fin+0x1c>
 8012692:	4b21      	ldr	r3, [pc, #132]	; (8012718 <tcp_send_fin+0x94>)
 8012694:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012698:	4920      	ldr	r1, [pc, #128]	; (801271c <tcp_send_fin+0x98>)
 801269a:	4821      	ldr	r0, [pc, #132]	; (8012720 <tcp_send_fin+0x9c>)
 801269c:	f003 ff6a 	bl	8016574 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d02e      	beq.n	8012706 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126ac:	60fb      	str	r3, [r7, #12]
 80126ae:	e002      	b.n	80126b6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1f8      	bne.n	80126b0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	899b      	ldrh	r3, [r3, #12]
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7f9 f98c 	bl	800b9e4 <lwip_htons>
 80126cc:	4603      	mov	r3, r0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0307 	and.w	r3, r3, #7
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d116      	bne.n	8012706 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	899b      	ldrh	r3, [r3, #12]
 80126de:	b29c      	uxth	r4, r3
 80126e0:	2001      	movs	r0, #1
 80126e2:	f7f9 f97f 	bl	800b9e4 <lwip_htons>
 80126e6:	4603      	mov	r3, r0
 80126e8:	461a      	mov	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	68db      	ldr	r3, [r3, #12]
 80126ee:	4322      	orrs	r2, r4
 80126f0:	b292      	uxth	r2, r2
 80126f2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	8b5b      	ldrh	r3, [r3, #26]
 80126f8:	f043 0320 	orr.w	r3, r3, #32
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012702:	2300      	movs	r3, #0
 8012704:	e004      	b.n	8012710 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012706:	2101      	movs	r1, #1
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 f80b 	bl	8012724 <tcp_enqueue_flags>
 801270e:	4603      	mov	r3, r0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3714      	adds	r7, #20
 8012714:	46bd      	mov	sp, r7
 8012716:	bd90      	pop	{r4, r7, pc}
 8012718:	08018da0 	.word	0x08018da0
 801271c:	080191a8 	.word	0x080191a8
 8012720:	08018df4 	.word	0x08018df4

08012724 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b08a      	sub	sp, #40	; 0x28
 8012728:	af02      	add	r7, sp, #8
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	460b      	mov	r3, r1
 801272e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012730:	2300      	movs	r3, #0
 8012732:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012734:	2300      	movs	r3, #0
 8012736:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012738:	78fb      	ldrb	r3, [r7, #3]
 801273a:	f003 0303 	and.w	r3, r3, #3
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <tcp_enqueue_flags+0x2c>
 8012742:	4b67      	ldr	r3, [pc, #412]	; (80128e0 <tcp_enqueue_flags+0x1bc>)
 8012744:	f240 4211 	movw	r2, #1041	; 0x411
 8012748:	4966      	ldr	r1, [pc, #408]	; (80128e4 <tcp_enqueue_flags+0x1c0>)
 801274a:	4867      	ldr	r0, [pc, #412]	; (80128e8 <tcp_enqueue_flags+0x1c4>)
 801274c:	f003 ff12 	bl	8016574 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <tcp_enqueue_flags+0x40>
 8012756:	4b62      	ldr	r3, [pc, #392]	; (80128e0 <tcp_enqueue_flags+0x1bc>)
 8012758:	f240 4213 	movw	r2, #1043	; 0x413
 801275c:	4963      	ldr	r1, [pc, #396]	; (80128ec <tcp_enqueue_flags+0x1c8>)
 801275e:	4862      	ldr	r0, [pc, #392]	; (80128e8 <tcp_enqueue_flags+0x1c4>)
 8012760:	f003 ff08 	bl	8016574 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012764:	78fb      	ldrb	r3, [r7, #3]
 8012766:	f003 0302 	and.w	r3, r3, #2
 801276a:	2b00      	cmp	r3, #0
 801276c:	d001      	beq.n	8012772 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801276e:	2301      	movs	r3, #1
 8012770:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012772:	7ffb      	ldrb	r3, [r7, #31]
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	b2db      	uxtb	r3, r3
 8012778:	f003 0304 	and.w	r3, r3, #4
 801277c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801277e:	7dfb      	ldrb	r3, [r7, #23]
 8012780:	b29b      	uxth	r3, r3
 8012782:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012786:	4619      	mov	r1, r3
 8012788:	2036      	movs	r0, #54	; 0x36
 801278a:	f7fa fa5d 	bl	800cc48 <pbuf_alloc>
 801278e:	6138      	str	r0, [r7, #16]
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d109      	bne.n	80127aa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8b5b      	ldrh	r3, [r3, #26]
 801279a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801279e:	b29a      	uxth	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127a4:	f04f 33ff 	mov.w	r3, #4294967295
 80127a8:	e095      	b.n	80128d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	895a      	ldrh	r2, [r3, #10]
 80127ae:	7dfb      	ldrb	r3, [r7, #23]
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d206      	bcs.n	80127c4 <tcp_enqueue_flags+0xa0>
 80127b6:	4b4a      	ldr	r3, [pc, #296]	; (80128e0 <tcp_enqueue_flags+0x1bc>)
 80127b8:	f240 4239 	movw	r2, #1081	; 0x439
 80127bc:	494c      	ldr	r1, [pc, #304]	; (80128f0 <tcp_enqueue_flags+0x1cc>)
 80127be:	484a      	ldr	r0, [pc, #296]	; (80128e8 <tcp_enqueue_flags+0x1c4>)
 80127c0:	f003 fed8 	bl	8016574 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80127c8:	78fa      	ldrb	r2, [r7, #3]
 80127ca:	7ffb      	ldrb	r3, [r7, #31]
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	460b      	mov	r3, r1
 80127d0:	6939      	ldr	r1, [r7, #16]
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7ff f918 	bl	8011a08 <tcp_create_segment>
 80127d8:	60f8      	str	r0, [r7, #12]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d109      	bne.n	80127f4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	8b5b      	ldrh	r3, [r3, #26]
 80127e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127ee:	f04f 33ff 	mov.w	r3, #4294967295
 80127f2:	e070      	b.n	80128d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	f003 0303 	and.w	r3, r3, #3
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d006      	beq.n	801280e <tcp_enqueue_flags+0xea>
 8012800:	4b37      	ldr	r3, [pc, #220]	; (80128e0 <tcp_enqueue_flags+0x1bc>)
 8012802:	f240 4242 	movw	r2, #1090	; 0x442
 8012806:	493b      	ldr	r1, [pc, #236]	; (80128f4 <tcp_enqueue_flags+0x1d0>)
 8012808:	4837      	ldr	r0, [pc, #220]	; (80128e8 <tcp_enqueue_flags+0x1c4>)
 801280a:	f003 feb3 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	891b      	ldrh	r3, [r3, #8]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d006      	beq.n	8012824 <tcp_enqueue_flags+0x100>
 8012816:	4b32      	ldr	r3, [pc, #200]	; (80128e0 <tcp_enqueue_flags+0x1bc>)
 8012818:	f240 4243 	movw	r2, #1091	; 0x443
 801281c:	4936      	ldr	r1, [pc, #216]	; (80128f8 <tcp_enqueue_flags+0x1d4>)
 801281e:	4832      	ldr	r0, [pc, #200]	; (80128e8 <tcp_enqueue_flags+0x1c4>)
 8012820:	f003 fea8 	bl	8016574 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012828:	2b00      	cmp	r3, #0
 801282a:	d103      	bne.n	8012834 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	66da      	str	r2, [r3, #108]	; 0x6c
 8012832:	e00d      	b.n	8012850 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012838:	61bb      	str	r3, [r7, #24]
 801283a:	e002      	b.n	8012842 <tcp_enqueue_flags+0x11e>
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	61bb      	str	r3, [r7, #24]
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1f8      	bne.n	801283c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012858:	78fb      	ldrb	r3, [r7, #3]
 801285a:	f003 0302 	and.w	r3, r3, #2
 801285e:	2b00      	cmp	r3, #0
 8012860:	d104      	bne.n	801286c <tcp_enqueue_flags+0x148>
 8012862:	78fb      	ldrb	r3, [r7, #3]
 8012864:	f003 0301 	and.w	r3, r3, #1
 8012868:	2b00      	cmp	r3, #0
 801286a:	d004      	beq.n	8012876 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012870:	1c5a      	adds	r2, r3, #1
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012876:	78fb      	ldrb	r3, [r7, #3]
 8012878:	f003 0301 	and.w	r3, r3, #1
 801287c:	2b00      	cmp	r3, #0
 801287e:	d006      	beq.n	801288e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	8b5b      	ldrh	r3, [r3, #26]
 8012884:	f043 0320 	orr.w	r3, r3, #32
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	f7fa fd44 	bl	800d320 <pbuf_clen>
 8012898:	4603      	mov	r3, r0
 801289a:	461a      	mov	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128a2:	4413      	add	r3, r2
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00e      	beq.n	80128d4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d10a      	bne.n	80128d4 <tcp_enqueue_flags+0x1b0>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d106      	bne.n	80128d4 <tcp_enqueue_flags+0x1b0>
 80128c6:	4b06      	ldr	r3, [pc, #24]	; (80128e0 <tcp_enqueue_flags+0x1bc>)
 80128c8:	f240 4265 	movw	r2, #1125	; 0x465
 80128cc:	490b      	ldr	r1, [pc, #44]	; (80128fc <tcp_enqueue_flags+0x1d8>)
 80128ce:	4806      	ldr	r0, [pc, #24]	; (80128e8 <tcp_enqueue_flags+0x1c4>)
 80128d0:	f003 fe50 	bl	8016574 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80128d4:	2300      	movs	r3, #0
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3720      	adds	r7, #32
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	08018da0 	.word	0x08018da0
 80128e4:	080191c4 	.word	0x080191c4
 80128e8:	08018df4 	.word	0x08018df4
 80128ec:	0801921c 	.word	0x0801921c
 80128f0:	0801923c 	.word	0x0801923c
 80128f4:	08019278 	.word	0x08019278
 80128f8:	08019290 	.word	0x08019290
 80128fc:	080192bc 	.word	0x080192bc

08012900 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012900:	b5b0      	push	{r4, r5, r7, lr}
 8012902:	b08a      	sub	sp, #40	; 0x28
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d106      	bne.n	801291c <tcp_output+0x1c>
 801290e:	4b9e      	ldr	r3, [pc, #632]	; (8012b88 <tcp_output+0x288>)
 8012910:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012914:	499d      	ldr	r1, [pc, #628]	; (8012b8c <tcp_output+0x28c>)
 8012916:	489e      	ldr	r0, [pc, #632]	; (8012b90 <tcp_output+0x290>)
 8012918:	f003 fe2c 	bl	8016574 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	7d1b      	ldrb	r3, [r3, #20]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d106      	bne.n	8012932 <tcp_output+0x32>
 8012924:	4b98      	ldr	r3, [pc, #608]	; (8012b88 <tcp_output+0x288>)
 8012926:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801292a:	499a      	ldr	r1, [pc, #616]	; (8012b94 <tcp_output+0x294>)
 801292c:	4898      	ldr	r0, [pc, #608]	; (8012b90 <tcp_output+0x290>)
 801292e:	f003 fe21 	bl	8016574 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012932:	4b99      	ldr	r3, [pc, #612]	; (8012b98 <tcp_output+0x298>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	429a      	cmp	r2, r3
 801293a:	d101      	bne.n	8012940 <tcp_output+0x40>
    return ERR_OK;
 801293c:	2300      	movs	r3, #0
 801293e:	e1ce      	b.n	8012cde <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801294c:	4293      	cmp	r3, r2
 801294e:	bf28      	it	cs
 8012950:	4613      	movcs	r3, r2
 8012952:	b29b      	uxth	r3, r3
 8012954:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801295a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10b      	bne.n	801297a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8b5b      	ldrh	r3, [r3, #26]
 8012966:	f003 0302 	and.w	r3, r3, #2
 801296a:	2b00      	cmp	r3, #0
 801296c:	f000 81aa 	beq.w	8012cc4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f000 fdcb 	bl	801350c <tcp_send_empty_ack>
 8012976:	4603      	mov	r3, r0
 8012978:	e1b1      	b.n	8012cde <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801297a:	6879      	ldr	r1, [r7, #4]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	3304      	adds	r3, #4
 8012980:	461a      	mov	r2, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7ff f824 	bl	80119d0 <tcp_route>
 8012988:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d102      	bne.n	8012996 <tcp_output+0x96>
    return ERR_RTE;
 8012990:	f06f 0303 	mvn.w	r3, #3
 8012994:	e1a3      	b.n	8012cde <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d003      	beq.n	80129a4 <tcp_output+0xa4>
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d111      	bne.n	80129c8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <tcp_output+0xb0>
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	3304      	adds	r3, #4
 80129ae:	e000      	b.n	80129b2 <tcp_output+0xb2>
 80129b0:	2300      	movs	r3, #0
 80129b2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d102      	bne.n	80129c0 <tcp_output+0xc0>
      return ERR_RTE;
 80129ba:	f06f 0303 	mvn.w	r3, #3
 80129be:	e18e      	b.n	8012cde <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80129c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7f9 f81d 	bl	800ba0e <lwip_htonl>
 80129d4:	4602      	mov	r2, r0
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129de:	8912      	ldrh	r2, [r2, #8]
 80129e0:	4413      	add	r3, r2
 80129e2:	69ba      	ldr	r2, [r7, #24]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d227      	bcs.n	8012a38 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129ee:	461a      	mov	r2, r3
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d114      	bne.n	8012a20 <tcp_output+0x120>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d110      	bne.n	8012a20 <tcp_output+0x120>
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d10b      	bne.n	8012a20 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2201      	movs	r2, #1
 8012a14:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	8b5b      	ldrh	r3, [r3, #26]
 8012a24:	f003 0302 	and.w	r3, r3, #2
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 814d 	beq.w	8012cc8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 fd6c 	bl	801350c <tcp_send_empty_ack>
 8012a34:	4603      	mov	r3, r0
 8012a36:	e152      	b.n	8012cde <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a44:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a46:	6a3b      	ldr	r3, [r7, #32]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	f000 811c 	beq.w	8012c86 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012a4e:	e002      	b.n	8012a56 <tcp_output+0x156>
 8012a50:	6a3b      	ldr	r3, [r7, #32]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	623b      	str	r3, [r7, #32]
 8012a56:	6a3b      	ldr	r3, [r7, #32]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d1f8      	bne.n	8012a50 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012a5e:	e112      	b.n	8012c86 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	899b      	ldrh	r3, [r3, #12]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7f8 ffbb 	bl	800b9e4 <lwip_htons>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	f003 0304 	and.w	r3, r3, #4
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d006      	beq.n	8012a88 <tcp_output+0x188>
 8012a7a:	4b43      	ldr	r3, [pc, #268]	; (8012b88 <tcp_output+0x288>)
 8012a7c:	f240 5236 	movw	r2, #1334	; 0x536
 8012a80:	4946      	ldr	r1, [pc, #280]	; (8012b9c <tcp_output+0x29c>)
 8012a82:	4843      	ldr	r0, [pc, #268]	; (8012b90 <tcp_output+0x290>)
 8012a84:	f003 fd76 	bl	8016574 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d01f      	beq.n	8012ad0 <tcp_output+0x1d0>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	8b5b      	ldrh	r3, [r3, #26]
 8012a94:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d119      	bne.n	8012ad0 <tcp_output+0x1d0>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d00b      	beq.n	8012abc <tcp_output+0x1bc>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d110      	bne.n	8012ad0 <tcp_output+0x1d0>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ab2:	891a      	ldrh	r2, [r3, #8]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d209      	bcs.n	8012ad0 <tcp_output+0x1d0>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d004      	beq.n	8012ad0 <tcp_output+0x1d0>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012acc:	2b08      	cmp	r3, #8
 8012ace:	d901      	bls.n	8012ad4 <tcp_output+0x1d4>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e000      	b.n	8012ad6 <tcp_output+0x1d6>
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d106      	bne.n	8012ae8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	8b5b      	ldrh	r3, [r3, #26]
 8012ade:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f000 80e4 	beq.w	8012cb0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	7d1b      	ldrb	r3, [r3, #20]
 8012aec:	2b02      	cmp	r3, #2
 8012aee:	d00d      	beq.n	8012b0c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	899b      	ldrh	r3, [r3, #12]
 8012af6:	b29c      	uxth	r4, r3
 8012af8:	2010      	movs	r0, #16
 8012afa:	f7f8 ff73 	bl	800b9e4 <lwip_htons>
 8012afe:	4603      	mov	r3, r0
 8012b00:	461a      	mov	r2, r3
 8012b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	4322      	orrs	r2, r4
 8012b08:	b292      	uxth	r2, r2
 8012b0a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012b0c:	697a      	ldr	r2, [r7, #20]
 8012b0e:	6879      	ldr	r1, [r7, #4]
 8012b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b12:	f000 f909 	bl	8012d28 <tcp_output_segment>
 8012b16:	4603      	mov	r3, r0
 8012b18:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d009      	beq.n	8012b36 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	8b5b      	ldrh	r3, [r3, #26]
 8012b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	835a      	strh	r2, [r3, #26]
      return err;
 8012b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b34:	e0d3      	b.n	8012cde <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	7d1b      	ldrb	r3, [r3, #20]
 8012b42:	2b02      	cmp	r3, #2
 8012b44:	d006      	beq.n	8012b54 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8b5b      	ldrh	r3, [r3, #26]
 8012b4a:	f023 0303 	bic.w	r3, r3, #3
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7f8 ff57 	bl	800ba0e <lwip_htonl>
 8012b60:	4604      	mov	r4, r0
 8012b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b64:	891b      	ldrh	r3, [r3, #8]
 8012b66:	461d      	mov	r5, r3
 8012b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6a:	68db      	ldr	r3, [r3, #12]
 8012b6c:	899b      	ldrh	r3, [r3, #12]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f8 ff37 	bl	800b9e4 <lwip_htons>
 8012b76:	4603      	mov	r3, r0
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	f003 0303 	and.w	r3, r3, #3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d00e      	beq.n	8012ba0 <tcp_output+0x2a0>
 8012b82:	2301      	movs	r3, #1
 8012b84:	e00d      	b.n	8012ba2 <tcp_output+0x2a2>
 8012b86:	bf00      	nop
 8012b88:	08018da0 	.word	0x08018da0
 8012b8c:	080192e4 	.word	0x080192e4
 8012b90:	08018df4 	.word	0x08018df4
 8012b94:	080192fc 	.word	0x080192fc
 8012b98:	24003628 	.word	0x24003628
 8012b9c:	08019324 	.word	0x08019324
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	442b      	add	r3, r5
 8012ba4:	4423      	add	r3, r4
 8012ba6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	da02      	bge.n	8012bba <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbc:	891b      	ldrh	r3, [r3, #8]
 8012bbe:	461c      	mov	r4, r3
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	899b      	ldrh	r3, [r3, #12]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f8 ff0b 	bl	800b9e4 <lwip_htons>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	f003 0303 	and.w	r3, r3, #3
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d001      	beq.n	8012bde <tcp_output+0x2de>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e000      	b.n	8012be0 <tcp_output+0x2e0>
 8012bde:	2300      	movs	r3, #0
 8012be0:	4423      	add	r3, r4
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d049      	beq.n	8012c7a <tcp_output+0x37a>
      seg->next = NULL;
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be8:	2200      	movs	r2, #0
 8012bea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d105      	bne.n	8012c00 <tcp_output+0x300>
        pcb->unacked = seg;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bf8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfc:	623b      	str	r3, [r7, #32]
 8012bfe:	e03f      	b.n	8012c80 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	685b      	ldr	r3, [r3, #4]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7f8 ff01 	bl	800ba0e <lwip_htonl>
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	6a3b      	ldr	r3, [r7, #32]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7f8 fefa 	bl	800ba0e <lwip_htonl>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	1ae3      	subs	r3, r4, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	da24      	bge.n	8012c6c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	3370      	adds	r3, #112	; 0x70
 8012c26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c28:	e002      	b.n	8012c30 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d011      	beq.n	8012c5c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f8 fee4 	bl	800ba0e <lwip_htonl>
 8012c46:	4604      	mov	r4, r0
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f8 fedd 	bl	800ba0e <lwip_htonl>
 8012c54:	4603      	mov	r3, r0
 8012c56:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	dbe6      	blt.n	8012c2a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c68:	601a      	str	r2, [r3, #0]
 8012c6a:	e009      	b.n	8012c80 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012c6c:	6a3b      	ldr	r3, [r7, #32]
 8012c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c70:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012c72:	6a3b      	ldr	r3, [r7, #32]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	623b      	str	r3, [r7, #32]
 8012c78:	e002      	b.n	8012c80 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c7c:	f7fb ff05 	bl	800ea8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c84:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d012      	beq.n	8012cb2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7f8 febb 	bl	800ba0e <lwip_htonl>
 8012c98:	4602      	mov	r2, r0
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c9e:	1ad3      	subs	r3, r2, r3
 8012ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ca2:	8912      	ldrh	r2, [r2, #8]
 8012ca4:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ca6:	69ba      	ldr	r2, [r7, #24]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	f4bf aed9 	bcs.w	8012a60 <tcp_output+0x160>
 8012cae:	e000      	b.n	8012cb2 <tcp_output+0x3b2>
      break;
 8012cb0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d108      	bne.n	8012ccc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012cc2:	e004      	b.n	8012cce <tcp_output+0x3ce>
    goto output_done;
 8012cc4:	bf00      	nop
 8012cc6:	e002      	b.n	8012cce <tcp_output+0x3ce>
    goto output_done;
 8012cc8:	bf00      	nop
 8012cca:	e000      	b.n	8012cce <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012ccc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	8b5b      	ldrh	r3, [r3, #26]
 8012cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3728      	adds	r7, #40	; 0x28
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ce6:	bf00      	nop

08012ce8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d106      	bne.n	8012d04 <tcp_output_segment_busy+0x1c>
 8012cf6:	4b09      	ldr	r3, [pc, #36]	; (8012d1c <tcp_output_segment_busy+0x34>)
 8012cf8:	f240 529a 	movw	r2, #1434	; 0x59a
 8012cfc:	4908      	ldr	r1, [pc, #32]	; (8012d20 <tcp_output_segment_busy+0x38>)
 8012cfe:	4809      	ldr	r0, [pc, #36]	; (8012d24 <tcp_output_segment_busy+0x3c>)
 8012d00:	f003 fc38 	bl	8016574 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	7b9b      	ldrb	r3, [r3, #14]
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d001      	beq.n	8012d12 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012d0e:	2301      	movs	r3, #1
 8012d10:	e000      	b.n	8012d14 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	08018da0 	.word	0x08018da0
 8012d20:	0801933c 	.word	0x0801933c
 8012d24:	08018df4 	.word	0x08018df4

08012d28 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012d28:	b5b0      	push	{r4, r5, r7, lr}
 8012d2a:	b08c      	sub	sp, #48	; 0x30
 8012d2c:	af04      	add	r7, sp, #16
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d106      	bne.n	8012d48 <tcp_output_segment+0x20>
 8012d3a:	4b63      	ldr	r3, [pc, #396]	; (8012ec8 <tcp_output_segment+0x1a0>)
 8012d3c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012d40:	4962      	ldr	r1, [pc, #392]	; (8012ecc <tcp_output_segment+0x1a4>)
 8012d42:	4863      	ldr	r0, [pc, #396]	; (8012ed0 <tcp_output_segment+0x1a8>)
 8012d44:	f003 fc16 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d106      	bne.n	8012d5c <tcp_output_segment+0x34>
 8012d4e:	4b5e      	ldr	r3, [pc, #376]	; (8012ec8 <tcp_output_segment+0x1a0>)
 8012d50:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012d54:	495f      	ldr	r1, [pc, #380]	; (8012ed4 <tcp_output_segment+0x1ac>)
 8012d56:	485e      	ldr	r0, [pc, #376]	; (8012ed0 <tcp_output_segment+0x1a8>)
 8012d58:	f003 fc0c 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d106      	bne.n	8012d70 <tcp_output_segment+0x48>
 8012d62:	4b59      	ldr	r3, [pc, #356]	; (8012ec8 <tcp_output_segment+0x1a0>)
 8012d64:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012d68:	495b      	ldr	r1, [pc, #364]	; (8012ed8 <tcp_output_segment+0x1b0>)
 8012d6a:	4859      	ldr	r0, [pc, #356]	; (8012ed0 <tcp_output_segment+0x1a8>)
 8012d6c:	f003 fc02 	bl	8016574 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f7ff ffb9 	bl	8012ce8 <tcp_output_segment_busy>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d001      	beq.n	8012d80 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	e09f      	b.n	8012ec0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	68dc      	ldr	r4, [r3, #12]
 8012d88:	4610      	mov	r0, r2
 8012d8a:	f7f8 fe40 	bl	800ba0e <lwip_htonl>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	68dc      	ldr	r4, [r3, #12]
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	f7f8 fe22 	bl	800b9e4 <lwip_htons>
 8012da0:	4603      	mov	r3, r0
 8012da2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da8:	68ba      	ldr	r2, [r7, #8]
 8012daa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012dac:	441a      	add	r2, r3
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	3314      	adds	r3, #20
 8012db8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	7a9b      	ldrb	r3, [r3, #10]
 8012dbe:	f003 0301 	and.w	r3, r3, #1
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d015      	beq.n	8012df2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	3304      	adds	r3, #4
 8012dca:	461a      	mov	r2, r3
 8012dcc:	6879      	ldr	r1, [r7, #4]
 8012dce:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012dd2:	f7fc fa37 	bl	800f244 <tcp_eff_send_mss_netif>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012dda:	8b7b      	ldrh	r3, [r7, #26]
 8012ddc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7f8 fe14 	bl	800ba0e <lwip_htonl>
 8012de6:	4602      	mov	r2, r0
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	3304      	adds	r3, #4
 8012df0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	da02      	bge.n	8012e02 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d10c      	bne.n	8012e24 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012e0a:	4b34      	ldr	r3, [pc, #208]	; (8012edc <tcp_output_segment+0x1b4>)
 8012e0c:	681a      	ldr	r2, [r3, #0]
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	68db      	ldr	r3, [r3, #12]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f8 fdf8 	bl	800ba0e <lwip_htonl>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	68da      	ldr	r2, [r3, #12]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	1ad3      	subs	r3, r2, r3
 8012e30:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	8959      	ldrh	r1, [r3, #10]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	8b3a      	ldrh	r2, [r7, #24]
 8012e3e:	1a8a      	subs	r2, r1, r2
 8012e40:	b292      	uxth	r2, r2
 8012e42:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	8919      	ldrh	r1, [r3, #8]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	8b3a      	ldrh	r2, [r7, #24]
 8012e50:	1a8a      	subs	r2, r1, r2
 8012e52:	b292      	uxth	r2, r2
 8012e54:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	68fa      	ldr	r2, [r7, #12]
 8012e5c:	68d2      	ldr	r2, [r2, #12]
 8012e5e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	2200      	movs	r2, #0
 8012e66:	741a      	strb	r2, [r3, #16]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	f103 0214 	add.w	r2, r3, #20
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	7a9b      	ldrb	r3, [r3, #10]
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	f003 0304 	and.w	r3, r3, #4
 8012e7e:	4413      	add	r3, r2
 8012e80:	69fa      	ldr	r2, [r7, #28]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d006      	beq.n	8012e94 <tcp_output_segment+0x16c>
 8012e86:	4b10      	ldr	r3, [pc, #64]	; (8012ec8 <tcp_output_segment+0x1a0>)
 8012e88:	f240 621c 	movw	r2, #1564	; 0x61c
 8012e8c:	4914      	ldr	r1, [pc, #80]	; (8012ee0 <tcp_output_segment+0x1b8>)
 8012e8e:	4810      	ldr	r0, [pc, #64]	; (8012ed0 <tcp_output_segment+0x1a8>)
 8012e90:	f003 fb70 	bl	8016574 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6858      	ldr	r0, [r3, #4]
 8012e98:	68b9      	ldr	r1, [r7, #8]
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	1d1c      	adds	r4, r3, #4
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	7add      	ldrb	r5, [r3, #11]
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	7a9b      	ldrb	r3, [r3, #10]
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	9202      	str	r2, [sp, #8]
 8012eaa:	2206      	movs	r2, #6
 8012eac:	9201      	str	r2, [sp, #4]
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	462b      	mov	r3, r5
 8012eb2:	4622      	mov	r2, r4
 8012eb4:	f002 fa5c 	bl	8015370 <ip4_output_if>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3720      	adds	r7, #32
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ec8:	08018da0 	.word	0x08018da0
 8012ecc:	08019364 	.word	0x08019364
 8012ed0:	08018df4 	.word	0x08018df4
 8012ed4:	08019384 	.word	0x08019384
 8012ed8:	080193a4 	.word	0x080193a4
 8012edc:	24003618 	.word	0x24003618
 8012ee0:	080193c8 	.word	0x080193c8

08012ee4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012ee4:	b5b0      	push	{r4, r5, r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d106      	bne.n	8012f00 <tcp_rexmit_rto_prepare+0x1c>
 8012ef2:	4b31      	ldr	r3, [pc, #196]	; (8012fb8 <tcp_rexmit_rto_prepare+0xd4>)
 8012ef4:	f240 6263 	movw	r2, #1635	; 0x663
 8012ef8:	4930      	ldr	r1, [pc, #192]	; (8012fbc <tcp_rexmit_rto_prepare+0xd8>)
 8012efa:	4831      	ldr	r0, [pc, #196]	; (8012fc0 <tcp_rexmit_rto_prepare+0xdc>)
 8012efc:	f003 fb3a 	bl	8016574 <iprintf>

  if (pcb->unacked == NULL) {
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d102      	bne.n	8012f0e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012f08:	f06f 0305 	mvn.w	r3, #5
 8012f0c:	e050      	b.n	8012fb0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f12:	60fb      	str	r3, [r7, #12]
 8012f14:	e00b      	b.n	8012f2e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012f16:	68f8      	ldr	r0, [r7, #12]
 8012f18:	f7ff fee6 	bl	8012ce8 <tcp_output_segment_busy>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d002      	beq.n	8012f28 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012f22:	f06f 0305 	mvn.w	r3, #5
 8012f26:	e043      	b.n	8012fb0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	60fb      	str	r3, [r7, #12]
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d1ef      	bne.n	8012f16 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f36:	68f8      	ldr	r0, [r7, #12]
 8012f38:	f7ff fed6 	bl	8012ce8 <tcp_output_segment_busy>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d002      	beq.n	8012f48 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f42:	f06f 0305 	mvn.w	r3, #5
 8012f46:	e033      	b.n	8012fb0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	8b5b      	ldrh	r3, [r3, #26]
 8012f62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	68db      	ldr	r3, [r3, #12]
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7f8 fd4b 	bl	800ba0e <lwip_htonl>
 8012f78:	4604      	mov	r4, r0
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	891b      	ldrh	r3, [r3, #8]
 8012f7e:	461d      	mov	r5, r3
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	899b      	ldrh	r3, [r3, #12]
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f8 fd2b 	bl	800b9e4 <lwip_htons>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	b2db      	uxtb	r3, r3
 8012f92:	f003 0303 	and.w	r3, r3, #3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d001      	beq.n	8012f9e <tcp_rexmit_rto_prepare+0xba>
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	e000      	b.n	8012fa0 <tcp_rexmit_rto_prepare+0xbc>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	442b      	add	r3, r5
 8012fa2:	18e2      	adds	r2, r4, r3
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2200      	movs	r2, #0
 8012fac:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012fae:	2300      	movs	r3, #0
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fb8:	08018da0 	.word	0x08018da0
 8012fbc:	080193dc 	.word	0x080193dc
 8012fc0:	08018df4 	.word	0x08018df4

08012fc4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d106      	bne.n	8012fe0 <tcp_rexmit_rto_commit+0x1c>
 8012fd2:	4b0d      	ldr	r3, [pc, #52]	; (8013008 <tcp_rexmit_rto_commit+0x44>)
 8012fd4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012fd8:	490c      	ldr	r1, [pc, #48]	; (801300c <tcp_rexmit_rto_commit+0x48>)
 8012fda:	480d      	ldr	r0, [pc, #52]	; (8013010 <tcp_rexmit_rto_commit+0x4c>)
 8012fdc:	f003 faca 	bl	8016574 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fe6:	2bff      	cmp	r3, #255	; 0xff
 8012fe8:	d007      	beq.n	8012ffa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	b2da      	uxtb	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f7ff fc80 	bl	8012900 <tcp_output>
}
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	08018da0 	.word	0x08018da0
 801300c:	08019400 	.word	0x08019400
 8013010:	08018df4 	.word	0x08018df4

08013014 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d106      	bne.n	8013030 <tcp_rexmit_rto+0x1c>
 8013022:	4b0a      	ldr	r3, [pc, #40]	; (801304c <tcp_rexmit_rto+0x38>)
 8013024:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013028:	4909      	ldr	r1, [pc, #36]	; (8013050 <tcp_rexmit_rto+0x3c>)
 801302a:	480a      	ldr	r0, [pc, #40]	; (8013054 <tcp_rexmit_rto+0x40>)
 801302c:	f003 faa2 	bl	8016574 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff ff57 	bl	8012ee4 <tcp_rexmit_rto_prepare>
 8013036:	4603      	mov	r3, r0
 8013038:	2b00      	cmp	r3, #0
 801303a:	d102      	bne.n	8013042 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7ff ffc1 	bl	8012fc4 <tcp_rexmit_rto_commit>
  }
}
 8013042:	bf00      	nop
 8013044:	3708      	adds	r7, #8
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	08018da0 	.word	0x08018da0
 8013050:	08019424 	.word	0x08019424
 8013054:	08018df4 	.word	0x08018df4

08013058 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013058:	b590      	push	{r4, r7, lr}
 801305a:	b085      	sub	sp, #20
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d106      	bne.n	8013074 <tcp_rexmit+0x1c>
 8013066:	4b2f      	ldr	r3, [pc, #188]	; (8013124 <tcp_rexmit+0xcc>)
 8013068:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801306c:	492e      	ldr	r1, [pc, #184]	; (8013128 <tcp_rexmit+0xd0>)
 801306e:	482f      	ldr	r0, [pc, #188]	; (801312c <tcp_rexmit+0xd4>)
 8013070:	f003 fa80 	bl	8016574 <iprintf>

  if (pcb->unacked == NULL) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013078:	2b00      	cmp	r3, #0
 801307a:	d102      	bne.n	8013082 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801307c:	f06f 0305 	mvn.w	r3, #5
 8013080:	e04c      	b.n	801311c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013086:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013088:	68b8      	ldr	r0, [r7, #8]
 801308a:	f7ff fe2d 	bl	8012ce8 <tcp_output_segment_busy>
 801308e:	4603      	mov	r3, r0
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013094:	f06f 0305 	mvn.w	r3, #5
 8013098:	e040      	b.n	801311c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	336c      	adds	r3, #108	; 0x6c
 80130a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130a8:	e002      	b.n	80130b0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d011      	beq.n	80130dc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f8 fca4 	bl	800ba0e <lwip_htonl>
 80130c6:	4604      	mov	r4, r0
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7f8 fc9d 	bl	800ba0e <lwip_htonl>
 80130d4:	4603      	mov	r3, r0
 80130d6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80130d8:	2b00      	cmp	r3, #0
 80130da:	dbe6      	blt.n	80130aa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	68ba      	ldr	r2, [r7, #8]
 80130e8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d103      	bne.n	80130fa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013100:	2bff      	cmp	r3, #255	; 0xff
 8013102:	d007      	beq.n	8013114 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801310a:	3301      	adds	r3, #1
 801310c:	b2da      	uxtb	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2200      	movs	r2, #0
 8013118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801311a:	2300      	movs	r3, #0
}
 801311c:	4618      	mov	r0, r3
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	bd90      	pop	{r4, r7, pc}
 8013124:	08018da0 	.word	0x08018da0
 8013128:	08019440 	.word	0x08019440
 801312c:	08018df4 	.word	0x08018df4

08013130 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d106      	bne.n	801314c <tcp_rexmit_fast+0x1c>
 801313e:	4b2a      	ldr	r3, [pc, #168]	; (80131e8 <tcp_rexmit_fast+0xb8>)
 8013140:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013144:	4929      	ldr	r1, [pc, #164]	; (80131ec <tcp_rexmit_fast+0xbc>)
 8013146:	482a      	ldr	r0, [pc, #168]	; (80131f0 <tcp_rexmit_fast+0xc0>)
 8013148:	f003 fa14 	bl	8016574 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013150:	2b00      	cmp	r3, #0
 8013152:	d045      	beq.n	80131e0 <tcp_rexmit_fast+0xb0>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	8b5b      	ldrh	r3, [r3, #26]
 8013158:	f003 0304 	and.w	r3, r3, #4
 801315c:	2b00      	cmp	r3, #0
 801315e:	d13f      	bne.n	80131e0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f7ff ff79 	bl	8013058 <tcp_rexmit>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d139      	bne.n	80131e0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013178:	4293      	cmp	r3, r2
 801317a:	bf28      	it	cs
 801317c:	4613      	movcs	r3, r2
 801317e:	b29b      	uxth	r3, r3
 8013180:	2b00      	cmp	r3, #0
 8013182:	da00      	bge.n	8013186 <tcp_rexmit_fast+0x56>
 8013184:	3301      	adds	r3, #1
 8013186:	105b      	asrs	r3, r3, #1
 8013188:	b29a      	uxth	r2, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013196:	461a      	mov	r2, r3
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801319c:	005b      	lsls	r3, r3, #1
 801319e:	429a      	cmp	r2, r3
 80131a0:	d206      	bcs.n	80131b0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131a6:	005b      	lsls	r3, r3, #1
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131ba:	4619      	mov	r1, r3
 80131bc:	0049      	lsls	r1, r1, #1
 80131be:	440b      	add	r3, r1
 80131c0:	b29b      	uxth	r3, r3
 80131c2:	4413      	add	r3, r2
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	8b5b      	ldrh	r3, [r3, #26]
 80131d0:	f043 0304 	orr.w	r3, r3, #4
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80131e0:	bf00      	nop
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	08018da0 	.word	0x08018da0
 80131ec:	08019458 	.word	0x08019458
 80131f0:	08018df4 	.word	0x08018df4

080131f4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b086      	sub	sp, #24
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	607b      	str	r3, [r7, #4]
 80131fe:	460b      	mov	r3, r1
 8013200:	817b      	strh	r3, [r7, #10]
 8013202:	4613      	mov	r3, r2
 8013204:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013206:	897a      	ldrh	r2, [r7, #10]
 8013208:	893b      	ldrh	r3, [r7, #8]
 801320a:	4413      	add	r3, r2
 801320c:	b29b      	uxth	r3, r3
 801320e:	3314      	adds	r3, #20
 8013210:	b29b      	uxth	r3, r3
 8013212:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013216:	4619      	mov	r1, r3
 8013218:	2022      	movs	r0, #34	; 0x22
 801321a:	f7f9 fd15 	bl	800cc48 <pbuf_alloc>
 801321e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d04d      	beq.n	80132c2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013226:	897b      	ldrh	r3, [r7, #10]
 8013228:	3313      	adds	r3, #19
 801322a:	697a      	ldr	r2, [r7, #20]
 801322c:	8952      	ldrh	r2, [r2, #10]
 801322e:	4293      	cmp	r3, r2
 8013230:	db06      	blt.n	8013240 <tcp_output_alloc_header_common+0x4c>
 8013232:	4b26      	ldr	r3, [pc, #152]	; (80132cc <tcp_output_alloc_header_common+0xd8>)
 8013234:	f240 7223 	movw	r2, #1827	; 0x723
 8013238:	4925      	ldr	r1, [pc, #148]	; (80132d0 <tcp_output_alloc_header_common+0xdc>)
 801323a:	4826      	ldr	r0, [pc, #152]	; (80132d4 <tcp_output_alloc_header_common+0xe0>)
 801323c:	f003 f99a 	bl	8016574 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013246:	8c3b      	ldrh	r3, [r7, #32]
 8013248:	4618      	mov	r0, r3
 801324a:	f7f8 fbcb 	bl	800b9e4 <lwip_htons>
 801324e:	4603      	mov	r3, r0
 8013250:	461a      	mov	r2, r3
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013258:	4618      	mov	r0, r3
 801325a:	f7f8 fbc3 	bl	800b9e4 <lwip_htons>
 801325e:	4603      	mov	r3, r0
 8013260:	461a      	mov	r2, r3
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801326c:	68f8      	ldr	r0, [r7, #12]
 801326e:	f7f8 fbce 	bl	800ba0e <lwip_htonl>
 8013272:	4602      	mov	r2, r0
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013278:	897b      	ldrh	r3, [r7, #10]
 801327a:	089b      	lsrs	r3, r3, #2
 801327c:	b29b      	uxth	r3, r3
 801327e:	3305      	adds	r3, #5
 8013280:	b29b      	uxth	r3, r3
 8013282:	031b      	lsls	r3, r3, #12
 8013284:	b29a      	uxth	r2, r3
 8013286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801328a:	b29b      	uxth	r3, r3
 801328c:	4313      	orrs	r3, r2
 801328e:	b29b      	uxth	r3, r3
 8013290:	4618      	mov	r0, r3
 8013292:	f7f8 fba7 	bl	800b9e4 <lwip_htons>
 8013296:	4603      	mov	r3, r0
 8013298:	461a      	mov	r2, r3
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801329e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f8 fb9f 	bl	800b9e4 <lwip_htons>
 80132a6:	4603      	mov	r3, r0
 80132a8:	461a      	mov	r2, r3
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	2200      	movs	r2, #0
 80132b2:	741a      	strb	r2, [r3, #16]
 80132b4:	2200      	movs	r2, #0
 80132b6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	2200      	movs	r2, #0
 80132bc:	749a      	strb	r2, [r3, #18]
 80132be:	2200      	movs	r2, #0
 80132c0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80132c2:	697b      	ldr	r3, [r7, #20]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3718      	adds	r7, #24
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	08018da0 	.word	0x08018da0
 80132d0:	08019478 	.word	0x08019478
 80132d4:	08018df4 	.word	0x08018df4

080132d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80132d8:	b5b0      	push	{r4, r5, r7, lr}
 80132da:	b08a      	sub	sp, #40	; 0x28
 80132dc:	af04      	add	r7, sp, #16
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	607b      	str	r3, [r7, #4]
 80132e2:	460b      	mov	r3, r1
 80132e4:	817b      	strh	r3, [r7, #10]
 80132e6:	4613      	mov	r3, r2
 80132e8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d106      	bne.n	80132fe <tcp_output_alloc_header+0x26>
 80132f0:	4b15      	ldr	r3, [pc, #84]	; (8013348 <tcp_output_alloc_header+0x70>)
 80132f2:	f240 7242 	movw	r2, #1858	; 0x742
 80132f6:	4915      	ldr	r1, [pc, #84]	; (801334c <tcp_output_alloc_header+0x74>)
 80132f8:	4815      	ldr	r0, [pc, #84]	; (8013350 <tcp_output_alloc_header+0x78>)
 80132fa:	f003 f93b 	bl	8016574 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	8adb      	ldrh	r3, [r3, #22]
 8013306:	68fa      	ldr	r2, [r7, #12]
 8013308:	8b12      	ldrh	r2, [r2, #24]
 801330a:	68f9      	ldr	r1, [r7, #12]
 801330c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801330e:	893d      	ldrh	r5, [r7, #8]
 8013310:	897c      	ldrh	r4, [r7, #10]
 8013312:	9103      	str	r1, [sp, #12]
 8013314:	2110      	movs	r1, #16
 8013316:	9102      	str	r1, [sp, #8]
 8013318:	9201      	str	r2, [sp, #4]
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	462a      	mov	r2, r5
 8013320:	4621      	mov	r1, r4
 8013322:	f7ff ff67 	bl	80131f4 <tcp_output_alloc_header_common>
 8013326:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d006      	beq.n	801333c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013336:	441a      	add	r2, r3
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801333c:	697b      	ldr	r3, [r7, #20]
}
 801333e:	4618      	mov	r0, r3
 8013340:	3718      	adds	r7, #24
 8013342:	46bd      	mov	sp, r7
 8013344:	bdb0      	pop	{r4, r5, r7, pc}
 8013346:	bf00      	nop
 8013348:	08018da0 	.word	0x08018da0
 801334c:	080194a8 	.word	0x080194a8
 8013350:	08018df4 	.word	0x08018df4

08013354 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b088      	sub	sp, #32
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	4611      	mov	r1, r2
 8013360:	461a      	mov	r2, r3
 8013362:	460b      	mov	r3, r1
 8013364:	71fb      	strb	r3, [r7, #7]
 8013366:	4613      	mov	r3, r2
 8013368:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801336a:	2300      	movs	r3, #0
 801336c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d106      	bne.n	8013382 <tcp_output_fill_options+0x2e>
 8013374:	4b13      	ldr	r3, [pc, #76]	; (80133c4 <tcp_output_fill_options+0x70>)
 8013376:	f240 7256 	movw	r2, #1878	; 0x756
 801337a:	4913      	ldr	r1, [pc, #76]	; (80133c8 <tcp_output_fill_options+0x74>)
 801337c:	4813      	ldr	r0, [pc, #76]	; (80133cc <tcp_output_fill_options+0x78>)
 801337e:	f003 f8f9 	bl	8016574 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013388:	69bb      	ldr	r3, [r7, #24]
 801338a:	3314      	adds	r3, #20
 801338c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	f103 0214 	add.w	r2, r3, #20
 8013394:	8bfb      	ldrh	r3, [r7, #30]
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	4619      	mov	r1, r3
 801339a:	79fb      	ldrb	r3, [r7, #7]
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	f003 0304 	and.w	r3, r3, #4
 80133a2:	440b      	add	r3, r1
 80133a4:	4413      	add	r3, r2
 80133a6:	697a      	ldr	r2, [r7, #20]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d006      	beq.n	80133ba <tcp_output_fill_options+0x66>
 80133ac:	4b05      	ldr	r3, [pc, #20]	; (80133c4 <tcp_output_fill_options+0x70>)
 80133ae:	f240 7275 	movw	r2, #1909	; 0x775
 80133b2:	4907      	ldr	r1, [pc, #28]	; (80133d0 <tcp_output_fill_options+0x7c>)
 80133b4:	4805      	ldr	r0, [pc, #20]	; (80133cc <tcp_output_fill_options+0x78>)
 80133b6:	f003 f8dd 	bl	8016574 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80133ba:	bf00      	nop
 80133bc:	3720      	adds	r7, #32
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	08018da0 	.word	0x08018da0
 80133c8:	080194d0 	.word	0x080194d0
 80133cc:	08018df4 	.word	0x08018df4
 80133d0:	080193c8 	.word	0x080193c8

080133d4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08a      	sub	sp, #40	; 0x28
 80133d8:	af04      	add	r7, sp, #16
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
 80133e0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d106      	bne.n	80133f6 <tcp_output_control_segment+0x22>
 80133e8:	4b1c      	ldr	r3, [pc, #112]	; (801345c <tcp_output_control_segment+0x88>)
 80133ea:	f240 7287 	movw	r2, #1927	; 0x787
 80133ee:	491c      	ldr	r1, [pc, #112]	; (8013460 <tcp_output_control_segment+0x8c>)
 80133f0:	481c      	ldr	r0, [pc, #112]	; (8013464 <tcp_output_control_segment+0x90>)
 80133f2:	f003 f8bf 	bl	8016574 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80133f6:	683a      	ldr	r2, [r7, #0]
 80133f8:	6879      	ldr	r1, [r7, #4]
 80133fa:	68f8      	ldr	r0, [r7, #12]
 80133fc:	f7fe fae8 	bl	80119d0 <tcp_route>
 8013400:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d102      	bne.n	801340e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013408:	23fc      	movs	r3, #252	; 0xfc
 801340a:	75fb      	strb	r3, [r7, #23]
 801340c:	e01c      	b.n	8013448 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d006      	beq.n	8013422 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	7adb      	ldrb	r3, [r3, #11]
 8013418:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	7a9b      	ldrb	r3, [r3, #10]
 801341e:	757b      	strb	r3, [r7, #21]
 8013420:	e003      	b.n	801342a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013422:	23ff      	movs	r3, #255	; 0xff
 8013424:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013426:	2300      	movs	r3, #0
 8013428:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801342a:	7dba      	ldrb	r2, [r7, #22]
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	9302      	str	r3, [sp, #8]
 8013430:	2306      	movs	r3, #6
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	7d7b      	ldrb	r3, [r7, #21]
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	4613      	mov	r3, r2
 801343a:	683a      	ldr	r2, [r7, #0]
 801343c:	6879      	ldr	r1, [r7, #4]
 801343e:	68b8      	ldr	r0, [r7, #8]
 8013440:	f001 ff96 	bl	8015370 <ip4_output_if>
 8013444:	4603      	mov	r3, r0
 8013446:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013448:	68b8      	ldr	r0, [r7, #8]
 801344a:	f7f9 fee1 	bl	800d210 <pbuf_free>
  return err;
 801344e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3718      	adds	r7, #24
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	08018da0 	.word	0x08018da0
 8013460:	080194f8 	.word	0x080194f8
 8013464:	08018df4 	.word	0x08018df4

08013468 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013468:	b590      	push	{r4, r7, lr}
 801346a:	b08b      	sub	sp, #44	; 0x2c
 801346c:	af04      	add	r7, sp, #16
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	607a      	str	r2, [r7, #4]
 8013474:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d106      	bne.n	801348a <tcp_rst+0x22>
 801347c:	4b1f      	ldr	r3, [pc, #124]	; (80134fc <tcp_rst+0x94>)
 801347e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013482:	491f      	ldr	r1, [pc, #124]	; (8013500 <tcp_rst+0x98>)
 8013484:	481f      	ldr	r0, [pc, #124]	; (8013504 <tcp_rst+0x9c>)
 8013486:	f003 f875 	bl	8016574 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	2b00      	cmp	r3, #0
 801348e:	d106      	bne.n	801349e <tcp_rst+0x36>
 8013490:	4b1a      	ldr	r3, [pc, #104]	; (80134fc <tcp_rst+0x94>)
 8013492:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013496:	491c      	ldr	r1, [pc, #112]	; (8013508 <tcp_rst+0xa0>)
 8013498:	481a      	ldr	r0, [pc, #104]	; (8013504 <tcp_rst+0x9c>)
 801349a:	f003 f86b 	bl	8016574 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801349e:	2300      	movs	r3, #0
 80134a0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80134a2:	f246 0308 	movw	r3, #24584	; 0x6008
 80134a6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80134a8:	7dfb      	ldrb	r3, [r7, #23]
 80134aa:	b29c      	uxth	r4, r3
 80134ac:	68b8      	ldr	r0, [r7, #8]
 80134ae:	f7f8 faae 	bl	800ba0e <lwip_htonl>
 80134b2:	4602      	mov	r2, r0
 80134b4:	8abb      	ldrh	r3, [r7, #20]
 80134b6:	9303      	str	r3, [sp, #12]
 80134b8:	2314      	movs	r3, #20
 80134ba:	9302      	str	r3, [sp, #8]
 80134bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	4613      	mov	r3, r2
 80134c6:	2200      	movs	r2, #0
 80134c8:	4621      	mov	r1, r4
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7ff fe92 	bl	80131f4 <tcp_output_alloc_header_common>
 80134d0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d00c      	beq.n	80134f2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134d8:	7dfb      	ldrb	r3, [r7, #23]
 80134da:	2200      	movs	r2, #0
 80134dc:	6939      	ldr	r1, [r7, #16]
 80134de:	68f8      	ldr	r0, [r7, #12]
 80134e0:	f7ff ff38 	bl	8013354 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80134e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e6:	683a      	ldr	r2, [r7, #0]
 80134e8:	6939      	ldr	r1, [r7, #16]
 80134ea:	68f8      	ldr	r0, [r7, #12]
 80134ec:	f7ff ff72 	bl	80133d4 <tcp_output_control_segment>
 80134f0:	e000      	b.n	80134f4 <tcp_rst+0x8c>
    return;
 80134f2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80134f4:	371c      	adds	r7, #28
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd90      	pop	{r4, r7, pc}
 80134fa:	bf00      	nop
 80134fc:	08018da0 	.word	0x08018da0
 8013500:	08019524 	.word	0x08019524
 8013504:	08018df4 	.word	0x08018df4
 8013508:	08019540 	.word	0x08019540

0801350c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801350c:	b590      	push	{r4, r7, lr}
 801350e:	b087      	sub	sp, #28
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d106      	bne.n	8013530 <tcp_send_empty_ack+0x24>
 8013522:	4b28      	ldr	r3, [pc, #160]	; (80135c4 <tcp_send_empty_ack+0xb8>)
 8013524:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013528:	4927      	ldr	r1, [pc, #156]	; (80135c8 <tcp_send_empty_ack+0xbc>)
 801352a:	4828      	ldr	r0, [pc, #160]	; (80135cc <tcp_send_empty_ack+0xc0>)
 801352c:	f003 f822 	bl	8016574 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013530:	7dfb      	ldrb	r3, [r7, #23]
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	b2db      	uxtb	r3, r3
 8013536:	f003 0304 	and.w	r3, r3, #4
 801353a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801353c:	7d7b      	ldrb	r3, [r7, #21]
 801353e:	b29c      	uxth	r4, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013544:	4618      	mov	r0, r3
 8013546:	f7f8 fa62 	bl	800ba0e <lwip_htonl>
 801354a:	4603      	mov	r3, r0
 801354c:	2200      	movs	r2, #0
 801354e:	4621      	mov	r1, r4
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fec1 	bl	80132d8 <tcp_output_alloc_header>
 8013556:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d109      	bne.n	8013572 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	8b5b      	ldrh	r3, [r3, #26]
 8013562:	f043 0303 	orr.w	r3, r3, #3
 8013566:	b29a      	uxth	r2, r3
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801356c:	f06f 0301 	mvn.w	r3, #1
 8013570:	e023      	b.n	80135ba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013572:	7dbb      	ldrb	r3, [r7, #22]
 8013574:	7dfa      	ldrb	r2, [r7, #23]
 8013576:	6939      	ldr	r1, [r7, #16]
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7ff feeb 	bl	8013354 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	3304      	adds	r3, #4
 8013584:	6939      	ldr	r1, [r7, #16]
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f7ff ff24 	bl	80133d4 <tcp_output_control_segment>
 801358c:	4603      	mov	r3, r0
 801358e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d007      	beq.n	80135a8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	8b5b      	ldrh	r3, [r3, #26]
 801359c:	f043 0303 	orr.w	r3, r3, #3
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	835a      	strh	r2, [r3, #26]
 80135a6:	e006      	b.n	80135b6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	8b5b      	ldrh	r3, [r3, #26]
 80135ac:	f023 0303 	bic.w	r3, r3, #3
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80135b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	371c      	adds	r7, #28
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd90      	pop	{r4, r7, pc}
 80135c2:	bf00      	nop
 80135c4:	08018da0 	.word	0x08018da0
 80135c8:	0801955c 	.word	0x0801955c
 80135cc:	08018df4 	.word	0x08018df4

080135d0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80135d0:	b590      	push	{r4, r7, lr}
 80135d2:	b087      	sub	sp, #28
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135d8:	2300      	movs	r3, #0
 80135da:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d106      	bne.n	80135f0 <tcp_keepalive+0x20>
 80135e2:	4b18      	ldr	r3, [pc, #96]	; (8013644 <tcp_keepalive+0x74>)
 80135e4:	f640 0224 	movw	r2, #2084	; 0x824
 80135e8:	4917      	ldr	r1, [pc, #92]	; (8013648 <tcp_keepalive+0x78>)
 80135ea:	4818      	ldr	r0, [pc, #96]	; (801364c <tcp_keepalive+0x7c>)
 80135ec:	f002 ffc2 	bl	8016574 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80135f0:	7dfb      	ldrb	r3, [r7, #23]
 80135f2:	b29c      	uxth	r4, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135f8:	3b01      	subs	r3, #1
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7f8 fa07 	bl	800ba0e <lwip_htonl>
 8013600:	4603      	mov	r3, r0
 8013602:	2200      	movs	r2, #0
 8013604:	4621      	mov	r1, r4
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7ff fe66 	bl	80132d8 <tcp_output_alloc_header>
 801360c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d102      	bne.n	801361a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013614:	f04f 33ff 	mov.w	r3, #4294967295
 8013618:	e010      	b.n	801363c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	2200      	movs	r2, #0
 801361e:	6939      	ldr	r1, [r7, #16]
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7ff fe97 	bl	8013354 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	3304      	adds	r3, #4
 801362c:	6939      	ldr	r1, [r7, #16]
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7ff fed0 	bl	80133d4 <tcp_output_control_segment>
 8013634:	4603      	mov	r3, r0
 8013636:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801363c:	4618      	mov	r0, r3
 801363e:	371c      	adds	r7, #28
 8013640:	46bd      	mov	sp, r7
 8013642:	bd90      	pop	{r4, r7, pc}
 8013644:	08018da0 	.word	0x08018da0
 8013648:	0801957c 	.word	0x0801957c
 801364c:	08018df4 	.word	0x08018df4

08013650 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013650:	b590      	push	{r4, r7, lr}
 8013652:	b08b      	sub	sp, #44	; 0x2c
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013658:	2300      	movs	r3, #0
 801365a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d106      	bne.n	8013672 <tcp_zero_window_probe+0x22>
 8013664:	4b4c      	ldr	r3, [pc, #304]	; (8013798 <tcp_zero_window_probe+0x148>)
 8013666:	f640 024f 	movw	r2, #2127	; 0x84f
 801366a:	494c      	ldr	r1, [pc, #304]	; (801379c <tcp_zero_window_probe+0x14c>)
 801366c:	484c      	ldr	r0, [pc, #304]	; (80137a0 <tcp_zero_window_probe+0x150>)
 801366e:	f002 ff81 	bl	8016574 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013676:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013678:	6a3b      	ldr	r3, [r7, #32]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d101      	bne.n	8013682 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	e086      	b.n	8013790 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013688:	2bff      	cmp	r3, #255	; 0xff
 801368a:	d007      	beq.n	801369c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013692:	3301      	adds	r3, #1
 8013694:	b2da      	uxtb	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801369c:	6a3b      	ldr	r3, [r7, #32]
 801369e:	68db      	ldr	r3, [r3, #12]
 80136a0:	899b      	ldrh	r3, [r3, #12]
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7f8 f99d 	bl	800b9e4 <lwip_htons>
 80136aa:	4603      	mov	r3, r0
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	f003 0301 	and.w	r3, r3, #1
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d005      	beq.n	80136c2 <tcp_zero_window_probe+0x72>
 80136b6:	6a3b      	ldr	r3, [r7, #32]
 80136b8:	891b      	ldrh	r3, [r3, #8]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d101      	bne.n	80136c2 <tcp_zero_window_probe+0x72>
 80136be:	2301      	movs	r3, #1
 80136c0:	e000      	b.n	80136c4 <tcp_zero_window_probe+0x74>
 80136c2:	2300      	movs	r3, #0
 80136c4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80136c6:	7ffb      	ldrb	r3, [r7, #31]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	bf0c      	ite	eq
 80136cc:	2301      	moveq	r3, #1
 80136ce:	2300      	movne	r3, #0
 80136d0:	b2db      	uxtb	r3, r3
 80136d2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80136d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136d8:	b299      	uxth	r1, r3
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	8bba      	ldrh	r2, [r7, #28]
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ff fdf8 	bl	80132d8 <tcp_output_alloc_header>
 80136e8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d102      	bne.n	80136f6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80136f0:	f04f 33ff 	mov.w	r3, #4294967295
 80136f4:	e04c      	b.n	8013790 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80136fc:	7ffb      	ldrb	r3, [r7, #31]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d011      	beq.n	8013726 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	899b      	ldrh	r3, [r3, #12]
 8013706:	b29b      	uxth	r3, r3
 8013708:	b21b      	sxth	r3, r3
 801370a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801370e:	b21c      	sxth	r4, r3
 8013710:	2011      	movs	r0, #17
 8013712:	f7f8 f967 	bl	800b9e4 <lwip_htons>
 8013716:	4603      	mov	r3, r0
 8013718:	b21b      	sxth	r3, r3
 801371a:	4323      	orrs	r3, r4
 801371c:	b21b      	sxth	r3, r3
 801371e:	b29a      	uxth	r2, r3
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	819a      	strh	r2, [r3, #12]
 8013724:	e010      	b.n	8013748 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	685b      	ldr	r3, [r3, #4]
 801372a:	3314      	adds	r3, #20
 801372c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801372e:	6a3b      	ldr	r3, [r7, #32]
 8013730:	6858      	ldr	r0, [r3, #4]
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	891a      	ldrh	r2, [r3, #8]
 8013738:	6a3b      	ldr	r3, [r7, #32]
 801373a:	891b      	ldrh	r3, [r3, #8]
 801373c:	1ad3      	subs	r3, r2, r3
 801373e:	b29b      	uxth	r3, r3
 8013740:	2201      	movs	r2, #1
 8013742:	6939      	ldr	r1, [r7, #16]
 8013744:	f7f9 ff5e 	bl	800d604 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013748:	6a3b      	ldr	r3, [r7, #32]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	4618      	mov	r0, r3
 8013750:	f7f8 f95d 	bl	800ba0e <lwip_htonl>
 8013754:	4603      	mov	r3, r0
 8013756:	3301      	adds	r3, #1
 8013758:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	2b00      	cmp	r3, #0
 8013764:	da02      	bge.n	801376c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	68fa      	ldr	r2, [r7, #12]
 801376a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801376c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013770:	2200      	movs	r2, #0
 8013772:	69b9      	ldr	r1, [r7, #24]
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f7ff fded 	bl	8013354 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	3304      	adds	r3, #4
 8013780:	69b9      	ldr	r1, [r7, #24]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7ff fe26 	bl	80133d4 <tcp_output_control_segment>
 8013788:	4603      	mov	r3, r0
 801378a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801378c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013790:	4618      	mov	r0, r3
 8013792:	372c      	adds	r7, #44	; 0x2c
 8013794:	46bd      	mov	sp, r7
 8013796:	bd90      	pop	{r4, r7, pc}
 8013798:	08018da0 	.word	0x08018da0
 801379c:	08019598 	.word	0x08019598
 80137a0:	08018df4 	.word	0x08018df4

080137a4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80137ac:	f7fa f818 	bl	800d7e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80137b0:	4b0a      	ldr	r3, [pc, #40]	; (80137dc <tcpip_tcp_timer+0x38>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d103      	bne.n	80137c0 <tcpip_tcp_timer+0x1c>
 80137b8:	4b09      	ldr	r3, [pc, #36]	; (80137e0 <tcpip_tcp_timer+0x3c>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d005      	beq.n	80137cc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80137c0:	2200      	movs	r2, #0
 80137c2:	4908      	ldr	r1, [pc, #32]	; (80137e4 <tcpip_tcp_timer+0x40>)
 80137c4:	20fa      	movs	r0, #250	; 0xfa
 80137c6:	f000 f8f3 	bl	80139b0 <sys_timeout>
 80137ca:	e003      	b.n	80137d4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80137cc:	4b06      	ldr	r3, [pc, #24]	; (80137e8 <tcpip_tcp_timer+0x44>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	601a      	str	r2, [r3, #0]
  }
}
 80137d2:	bf00      	nop
 80137d4:	bf00      	nop
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	24003614 	.word	0x24003614
 80137e0:	24003624 	.word	0x24003624
 80137e4:	080137a5 	.word	0x080137a5
 80137e8:	24000130 	.word	0x24000130

080137ec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80137f0:	4b0a      	ldr	r3, [pc, #40]	; (801381c <tcp_timer_needed+0x30>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d10f      	bne.n	8013818 <tcp_timer_needed+0x2c>
 80137f8:	4b09      	ldr	r3, [pc, #36]	; (8013820 <tcp_timer_needed+0x34>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d103      	bne.n	8013808 <tcp_timer_needed+0x1c>
 8013800:	4b08      	ldr	r3, [pc, #32]	; (8013824 <tcp_timer_needed+0x38>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d007      	beq.n	8013818 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013808:	4b04      	ldr	r3, [pc, #16]	; (801381c <tcp_timer_needed+0x30>)
 801380a:	2201      	movs	r2, #1
 801380c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801380e:	2200      	movs	r2, #0
 8013810:	4905      	ldr	r1, [pc, #20]	; (8013828 <tcp_timer_needed+0x3c>)
 8013812:	20fa      	movs	r0, #250	; 0xfa
 8013814:	f000 f8cc 	bl	80139b0 <sys_timeout>
  }
}
 8013818:	bf00      	nop
 801381a:	bd80      	pop	{r7, pc}
 801381c:	24000130 	.word	0x24000130
 8013820:	24003614 	.word	0x24003614
 8013824:	24003624 	.word	0x24003624
 8013828:	080137a5 	.word	0x080137a5

0801382c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013838:	2006      	movs	r0, #6
 801383a:	f7f8 fe03 	bl	800c444 <memp_malloc>
 801383e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d109      	bne.n	801385a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d151      	bne.n	80138f0 <sys_timeout_abs+0xc4>
 801384c:	4b2a      	ldr	r3, [pc, #168]	; (80138f8 <sys_timeout_abs+0xcc>)
 801384e:	22be      	movs	r2, #190	; 0xbe
 8013850:	492a      	ldr	r1, [pc, #168]	; (80138fc <sys_timeout_abs+0xd0>)
 8013852:	482b      	ldr	r0, [pc, #172]	; (8013900 <sys_timeout_abs+0xd4>)
 8013854:	f002 fe8e 	bl	8016574 <iprintf>
    return;
 8013858:	e04a      	b.n	80138f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	2200      	movs	r2, #0
 801385e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	68ba      	ldr	r2, [r7, #8]
 8013864:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	687a      	ldr	r2, [r7, #4]
 801386a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	68fa      	ldr	r2, [r7, #12]
 8013870:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013872:	4b24      	ldr	r3, [pc, #144]	; (8013904 <sys_timeout_abs+0xd8>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d103      	bne.n	8013882 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801387a:	4a22      	ldr	r2, [pc, #136]	; (8013904 <sys_timeout_abs+0xd8>)
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	6013      	str	r3, [r2, #0]
    return;
 8013880:	e037      	b.n	80138f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	685a      	ldr	r2, [r3, #4]
 8013886:	4b1f      	ldr	r3, [pc, #124]	; (8013904 <sys_timeout_abs+0xd8>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	1ad3      	subs	r3, r2, r3
 801388e:	0fdb      	lsrs	r3, r3, #31
 8013890:	f003 0301 	and.w	r3, r3, #1
 8013894:	b2db      	uxtb	r3, r3
 8013896:	2b00      	cmp	r3, #0
 8013898:	d007      	beq.n	80138aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801389a:	4b1a      	ldr	r3, [pc, #104]	; (8013904 <sys_timeout_abs+0xd8>)
 801389c:	681a      	ldr	r2, [r3, #0]
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80138a2:	4a18      	ldr	r2, [pc, #96]	; (8013904 <sys_timeout_abs+0xd8>)
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	6013      	str	r3, [r2, #0]
 80138a8:	e023      	b.n	80138f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80138aa:	4b16      	ldr	r3, [pc, #88]	; (8013904 <sys_timeout_abs+0xd8>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	617b      	str	r3, [r7, #20]
 80138b0:	e01a      	b.n	80138e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d00b      	beq.n	80138d2 <sys_timeout_abs+0xa6>
 80138ba:	693b      	ldr	r3, [r7, #16]
 80138bc:	685a      	ldr	r2, [r3, #4]
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	0fdb      	lsrs	r3, r3, #31
 80138c8:	f003 0301 	and.w	r3, r3, #1
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d007      	beq.n	80138e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	693a      	ldr	r2, [r7, #16]
 80138de:	601a      	str	r2, [r3, #0]
        break;
 80138e0:	e007      	b.n	80138f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	617b      	str	r3, [r7, #20]
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d1e1      	bne.n	80138b2 <sys_timeout_abs+0x86>
 80138ee:	e000      	b.n	80138f2 <sys_timeout_abs+0xc6>
    return;
 80138f0:	bf00      	nop
      }
    }
  }
}
 80138f2:	3718      	adds	r7, #24
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	080195bc 	.word	0x080195bc
 80138fc:	080195f0 	.word	0x080195f0
 8013900:	08019630 	.word	0x08019630
 8013904:	24000128 	.word	0x24000128

08013908 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b086      	sub	sp, #24
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	4798      	blx	r3

  now = sys_now();
 801391a:	f7f7 ff89 	bl	800b830 <sys_now>
 801391e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	4b0f      	ldr	r3, [pc, #60]	; (8013964 <lwip_cyclic_timer+0x5c>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4413      	add	r3, r2
 801392a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	1ad3      	subs	r3, r2, r3
 8013932:	0fdb      	lsrs	r3, r3, #31
 8013934:	f003 0301 	and.w	r3, r3, #1
 8013938:	b2db      	uxtb	r3, r3
 801393a:	2b00      	cmp	r3, #0
 801393c:	d009      	beq.n	8013952 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	4413      	add	r3, r2
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	4907      	ldr	r1, [pc, #28]	; (8013968 <lwip_cyclic_timer+0x60>)
 801394a:	4618      	mov	r0, r3
 801394c:	f7ff ff6e 	bl	801382c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013950:	e004      	b.n	801395c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	4904      	ldr	r1, [pc, #16]	; (8013968 <lwip_cyclic_timer+0x60>)
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	f7ff ff68 	bl	801382c <sys_timeout_abs>
}
 801395c:	bf00      	nop
 801395e:	3718      	adds	r7, #24
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}
 8013964:	2400012c 	.word	0x2400012c
 8013968:	08013909 	.word	0x08013909

0801396c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013972:	2301      	movs	r3, #1
 8013974:	607b      	str	r3, [r7, #4]
 8013976:	e00e      	b.n	8013996 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013978:	4a0b      	ldr	r2, [pc, #44]	; (80139a8 <sys_timeouts_init+0x3c>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	4a08      	ldr	r2, [pc, #32]	; (80139a8 <sys_timeouts_init+0x3c>)
 8013986:	4413      	add	r3, r2
 8013988:	461a      	mov	r2, r3
 801398a:	4908      	ldr	r1, [pc, #32]	; (80139ac <sys_timeouts_init+0x40>)
 801398c:	f000 f810 	bl	80139b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	3301      	adds	r3, #1
 8013994:	607b      	str	r3, [r7, #4]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2b02      	cmp	r3, #2
 801399a:	d9ed      	bls.n	8013978 <sys_timeouts_init+0xc>
  }
}
 801399c:	bf00      	nop
 801399e:	bf00      	nop
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	0801afa8 	.word	0x0801afa8
 80139ac:	08013909 	.word	0x08013909

080139b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139c2:	d306      	bcc.n	80139d2 <sys_timeout+0x22>
 80139c4:	4b0a      	ldr	r3, [pc, #40]	; (80139f0 <sys_timeout+0x40>)
 80139c6:	f240 1229 	movw	r2, #297	; 0x129
 80139ca:	490a      	ldr	r1, [pc, #40]	; (80139f4 <sys_timeout+0x44>)
 80139cc:	480a      	ldr	r0, [pc, #40]	; (80139f8 <sys_timeout+0x48>)
 80139ce:	f002 fdd1 	bl	8016574 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80139d2:	f7f7 ff2d 	bl	800b830 <sys_now>
 80139d6:	4602      	mov	r2, r0
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	4413      	add	r3, r2
 80139dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80139de:	687a      	ldr	r2, [r7, #4]
 80139e0:	68b9      	ldr	r1, [r7, #8]
 80139e2:	6978      	ldr	r0, [r7, #20]
 80139e4:	f7ff ff22 	bl	801382c <sys_timeout_abs>
#endif
}
 80139e8:	bf00      	nop
 80139ea:	3718      	adds	r7, #24
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	080195bc 	.word	0x080195bc
 80139f4:	08019658 	.word	0x08019658
 80139f8:	08019630 	.word	0x08019630

080139fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013a02:	f7f7 ff15 	bl	800b830 <sys_now>
 8013a06:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013a08:	4b1a      	ldr	r3, [pc, #104]	; (8013a74 <sys_check_timeouts+0x78>)
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <sys_check_timeouts+0x1a>
 8013a12:	f7f9 f8c3 	bl	800cb9c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013a16:	4b18      	ldr	r3, [pc, #96]	; (8013a78 <sys_check_timeouts+0x7c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d022      	beq.n	8013a68 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	68fa      	ldr	r2, [r7, #12]
 8013a28:	1ad3      	subs	r3, r2, r3
 8013a2a:	0fdb      	lsrs	r3, r3, #31
 8013a2c:	f003 0301 	and.w	r3, r3, #1
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d11a      	bne.n	8013a6c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	4a0f      	ldr	r2, [pc, #60]	; (8013a78 <sys_check_timeouts+0x7c>)
 8013a3c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	689b      	ldr	r3, [r3, #8]
 8013a42:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	4a0b      	ldr	r2, [pc, #44]	; (8013a7c <sys_check_timeouts+0x80>)
 8013a50:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a52:	68b9      	ldr	r1, [r7, #8]
 8013a54:	2006      	movs	r0, #6
 8013a56:	f7f8 fd65 	bl	800c524 <memp_free>
    if (handler != NULL) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d0d3      	beq.n	8013a08 <sys_check_timeouts+0xc>
      handler(arg);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6838      	ldr	r0, [r7, #0]
 8013a64:	4798      	blx	r3
  do {
 8013a66:	e7cf      	b.n	8013a08 <sys_check_timeouts+0xc>
      return;
 8013a68:	bf00      	nop
 8013a6a:	e000      	b.n	8013a6e <sys_check_timeouts+0x72>
      return;
 8013a6c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013a6e:	3710      	adds	r7, #16
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	2400360c 	.word	0x2400360c
 8013a78:	24000128 	.word	0x24000128
 8013a7c:	2400012c 	.word	0x2400012c

08013a80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013a84:	f002 fd8e 	bl	80165a4 <rand>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	4b01      	ldr	r3, [pc, #4]	; (8013aa0 <udp_init+0x20>)
 8013a9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013a9c:	bf00      	nop
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	24000034 	.word	0x24000034

08013aa4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	4613      	mov	r3, r2
 8013ab0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d105      	bne.n	8013ac4 <udp_input_local_match+0x20>
 8013ab8:	4b27      	ldr	r3, [pc, #156]	; (8013b58 <udp_input_local_match+0xb4>)
 8013aba:	2287      	movs	r2, #135	; 0x87
 8013abc:	4927      	ldr	r1, [pc, #156]	; (8013b5c <udp_input_local_match+0xb8>)
 8013abe:	4828      	ldr	r0, [pc, #160]	; (8013b60 <udp_input_local_match+0xbc>)
 8013ac0:	f002 fd58 	bl	8016574 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d105      	bne.n	8013ad6 <udp_input_local_match+0x32>
 8013aca:	4b23      	ldr	r3, [pc, #140]	; (8013b58 <udp_input_local_match+0xb4>)
 8013acc:	2288      	movs	r2, #136	; 0x88
 8013ace:	4925      	ldr	r1, [pc, #148]	; (8013b64 <udp_input_local_match+0xc0>)
 8013ad0:	4823      	ldr	r0, [pc, #140]	; (8013b60 <udp_input_local_match+0xbc>)
 8013ad2:	f002 fd4f 	bl	8016574 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	7a1b      	ldrb	r3, [r3, #8]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00b      	beq.n	8013af6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	7a1a      	ldrb	r2, [r3, #8]
 8013ae2:	4b21      	ldr	r3, [pc, #132]	; (8013b68 <udp_input_local_match+0xc4>)
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013aea:	3301      	adds	r3, #1
 8013aec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d001      	beq.n	8013af6 <udp_input_local_match+0x52>
    return 0;
 8013af2:	2300      	movs	r3, #0
 8013af4:	e02b      	b.n	8013b4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013af6:	79fb      	ldrb	r3, [r7, #7]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d018      	beq.n	8013b2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d013      	beq.n	8013b2a <udp_input_local_match+0x86>
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00f      	beq.n	8013b2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013b0a:	4b17      	ldr	r3, [pc, #92]	; (8013b68 <udp_input_local_match+0xc4>)
 8013b0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b12:	d00a      	beq.n	8013b2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681a      	ldr	r2, [r3, #0]
 8013b18:	4b13      	ldr	r3, [pc, #76]	; (8013b68 <udp_input_local_match+0xc4>)
 8013b1a:	695b      	ldr	r3, [r3, #20]
 8013b1c:	405a      	eors	r2, r3
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	3308      	adds	r3, #8
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d110      	bne.n	8013b4c <udp_input_local_match+0xa8>
          return 1;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e00f      	b.n	8013b4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d009      	beq.n	8013b48 <udp_input_local_match+0xa4>
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d005      	beq.n	8013b48 <udp_input_local_match+0xa4>
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	4b09      	ldr	r3, [pc, #36]	; (8013b68 <udp_input_local_match+0xc4>)
 8013b42:	695b      	ldr	r3, [r3, #20]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d101      	bne.n	8013b4c <udp_input_local_match+0xa8>
        return 1;
 8013b48:	2301      	movs	r3, #1
 8013b4a:	e000      	b.n	8013b4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013b4c:	2300      	movs	r3, #0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3710      	adds	r7, #16
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	080196a4 	.word	0x080196a4
 8013b5c:	080196d4 	.word	0x080196d4
 8013b60:	080196f8 	.word	0x080196f8
 8013b64:	08019720 	.word	0x08019720
 8013b68:	24000724 	.word	0x24000724

08013b6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013b6c:	b590      	push	{r4, r7, lr}
 8013b6e:	b08d      	sub	sp, #52	; 0x34
 8013b70:	af02      	add	r7, sp, #8
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013b76:	2300      	movs	r3, #0
 8013b78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d105      	bne.n	8013b8c <udp_input+0x20>
 8013b80:	4b7c      	ldr	r3, [pc, #496]	; (8013d74 <udp_input+0x208>)
 8013b82:	22cf      	movs	r2, #207	; 0xcf
 8013b84:	497c      	ldr	r1, [pc, #496]	; (8013d78 <udp_input+0x20c>)
 8013b86:	487d      	ldr	r0, [pc, #500]	; (8013d7c <udp_input+0x210>)
 8013b88:	f002 fcf4 	bl	8016574 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d105      	bne.n	8013b9e <udp_input+0x32>
 8013b92:	4b78      	ldr	r3, [pc, #480]	; (8013d74 <udp_input+0x208>)
 8013b94:	22d0      	movs	r2, #208	; 0xd0
 8013b96:	497a      	ldr	r1, [pc, #488]	; (8013d80 <udp_input+0x214>)
 8013b98:	4878      	ldr	r0, [pc, #480]	; (8013d7c <udp_input+0x210>)
 8013b9a:	f002 fceb 	bl	8016574 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	895b      	ldrh	r3, [r3, #10]
 8013ba2:	2b07      	cmp	r3, #7
 8013ba4:	d803      	bhi.n	8013bae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7f9 fb32 	bl	800d210 <pbuf_free>
    goto end;
 8013bac:	e0de      	b.n	8013d6c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013bb4:	4b73      	ldr	r3, [pc, #460]	; (8013d84 <udp_input+0x218>)
 8013bb6:	695b      	ldr	r3, [r3, #20]
 8013bb8:	4a72      	ldr	r2, [pc, #456]	; (8013d84 <udp_input+0x218>)
 8013bba:	6812      	ldr	r2, [r2, #0]
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f001 fcae 	bl	8015520 <ip4_addr_isbroadcast_u32>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f7 ff08 	bl	800b9e4 <lwip_htons>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	885b      	ldrh	r3, [r3, #2]
 8013bdc:	b29b      	uxth	r3, r3
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7f7 ff00 	bl	800b9e4 <lwip_htons>
 8013be4:	4603      	mov	r3, r0
 8013be6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013be8:	2300      	movs	r3, #0
 8013bea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013bec:	2300      	movs	r3, #0
 8013bee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bf4:	4b64      	ldr	r3, [pc, #400]	; (8013d88 <udp_input+0x21c>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8013bfa:	e054      	b.n	8013ca6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfe:	8a5b      	ldrh	r3, [r3, #18]
 8013c00:	89fa      	ldrh	r2, [r7, #14]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d14a      	bne.n	8013c9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013c06:	7cfb      	ldrb	r3, [r7, #19]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	6839      	ldr	r1, [r7, #0]
 8013c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c0e:	f7ff ff49 	bl	8013aa4 <udp_input_local_match>
 8013c12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d041      	beq.n	8013c9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1a:	7c1b      	ldrb	r3, [r3, #16]
 8013c1c:	f003 0304 	and.w	r3, r3, #4
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d11d      	bne.n	8013c60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d102      	bne.n	8013c30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	61fb      	str	r3, [r7, #28]
 8013c2e:	e017      	b.n	8013c60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013c30:	7cfb      	ldrb	r3, [r7, #19]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d014      	beq.n	8013c60 <udp_input+0xf4>
 8013c36:	4b53      	ldr	r3, [pc, #332]	; (8013d84 <udp_input+0x218>)
 8013c38:	695b      	ldr	r3, [r3, #20]
 8013c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c3e:	d10f      	bne.n	8013c60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	3304      	adds	r3, #4
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d008      	beq.n	8013c60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	3304      	adds	r3, #4
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d101      	bne.n	8013c60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c62:	8a9b      	ldrh	r3, [r3, #20]
 8013c64:	8a3a      	ldrh	r2, [r7, #16]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d118      	bne.n	8013c9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d005      	beq.n	8013c7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c74:	685a      	ldr	r2, [r3, #4]
 8013c76:	4b43      	ldr	r3, [pc, #268]	; (8013d84 <udp_input+0x218>)
 8013c78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d10e      	bne.n	8013c9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013c7e:	6a3b      	ldr	r3, [r7, #32]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d014      	beq.n	8013cae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c86:	68da      	ldr	r2, [r3, #12]
 8013c88:	6a3b      	ldr	r3, [r7, #32]
 8013c8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013c8c:	4b3e      	ldr	r3, [pc, #248]	; (8013d88 <udp_input+0x21c>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013c94:	4a3c      	ldr	r2, [pc, #240]	; (8013d88 <udp_input+0x21c>)
 8013c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013c9a:	e008      	b.n	8013cae <udp_input+0x142>
      }
    }

    prev = pcb;
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8013ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d1a7      	bne.n	8013bfc <udp_input+0x90>
 8013cac:	e000      	b.n	8013cb0 <udp_input+0x144>
        break;
 8013cae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d101      	bne.n	8013cba <udp_input+0x14e>
    pcb = uncon_pcb;
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d002      	beq.n	8013cc6 <udp_input+0x15a>
    for_us = 1;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	76fb      	strb	r3, [r7, #27]
 8013cc4:	e00a      	b.n	8013cdc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	3304      	adds	r3, #4
 8013cca:	681a      	ldr	r2, [r3, #0]
 8013ccc:	4b2d      	ldr	r3, [pc, #180]	; (8013d84 <udp_input+0x218>)
 8013cce:	695b      	ldr	r3, [r3, #20]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	bf0c      	ite	eq
 8013cd4:	2301      	moveq	r3, #1
 8013cd6:	2300      	movne	r3, #0
 8013cd8:	b2db      	uxtb	r3, r3
 8013cda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013cdc:	7efb      	ldrb	r3, [r7, #27]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d041      	beq.n	8013d66 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013ce2:	2108      	movs	r1, #8
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f7f9 fa0d 	bl	800d104 <pbuf_remove_header>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00a      	beq.n	8013d06 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013cf0:	4b20      	ldr	r3, [pc, #128]	; (8013d74 <udp_input+0x208>)
 8013cf2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013cf6:	4925      	ldr	r1, [pc, #148]	; (8013d8c <udp_input+0x220>)
 8013cf8:	4820      	ldr	r0, [pc, #128]	; (8013d7c <udp_input+0x210>)
 8013cfa:	f002 fc3b 	bl	8016574 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f7f9 fa86 	bl	800d210 <pbuf_free>
      goto end;
 8013d04:	e032      	b.n	8013d6c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d012      	beq.n	8013d32 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0e:	699b      	ldr	r3, [r3, #24]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d00a      	beq.n	8013d2a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d16:	699c      	ldr	r4, [r3, #24]
 8013d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1a:	69d8      	ldr	r0, [r3, #28]
 8013d1c:	8a3b      	ldrh	r3, [r7, #16]
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	4b1b      	ldr	r3, [pc, #108]	; (8013d90 <udp_input+0x224>)
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013d26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013d28:	e021      	b.n	8013d6e <udp_input+0x202>
        pbuf_free(p);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7f9 fa70 	bl	800d210 <pbuf_free>
        goto end;
 8013d30:	e01c      	b.n	8013d6c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013d32:	7cfb      	ldrb	r3, [r7, #19]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d112      	bne.n	8013d5e <udp_input+0x1f2>
 8013d38:	4b12      	ldr	r3, [pc, #72]	; (8013d84 <udp_input+0x218>)
 8013d3a:	695b      	ldr	r3, [r3, #20]
 8013d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d40:	2be0      	cmp	r3, #224	; 0xe0
 8013d42:	d00c      	beq.n	8013d5e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013d44:	4b0f      	ldr	r3, [pc, #60]	; (8013d84 <udp_input+0x218>)
 8013d46:	899b      	ldrh	r3, [r3, #12]
 8013d48:	3308      	adds	r3, #8
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	b21b      	sxth	r3, r3
 8013d4e:	4619      	mov	r1, r3
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7f9 fa4a 	bl	800d1ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013d56:	2103      	movs	r1, #3
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f001 f8b7 	bl	8014ecc <icmp_dest_unreach>
      pbuf_free(p);
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7f9 fa56 	bl	800d210 <pbuf_free>
  return;
 8013d64:	e003      	b.n	8013d6e <udp_input+0x202>
    pbuf_free(p);
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f7f9 fa52 	bl	800d210 <pbuf_free>
  return;
 8013d6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013d6e:	372c      	adds	r7, #44	; 0x2c
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd90      	pop	{r4, r7, pc}
 8013d74:	080196a4 	.word	0x080196a4
 8013d78:	08019748 	.word	0x08019748
 8013d7c:	080196f8 	.word	0x080196f8
 8013d80:	08019760 	.word	0x08019760
 8013d84:	24000724 	.word	0x24000724
 8013d88:	2400362c 	.word	0x2400362c
 8013d8c:	0801977c 	.word	0x0801977c
 8013d90:	24000734 	.word	0x24000734

08013d94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b085      	sub	sp, #20
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d01e      	beq.n	8013de2 <udp_netif_ip_addr_changed+0x4e>
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d01a      	beq.n	8013de2 <udp_netif_ip_addr_changed+0x4e>
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d017      	beq.n	8013de2 <udp_netif_ip_addr_changed+0x4e>
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d013      	beq.n	8013de2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013dba:	4b0d      	ldr	r3, [pc, #52]	; (8013df0 <udp_netif_ip_addr_changed+0x5c>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	60fb      	str	r3, [r7, #12]
 8013dc0:	e00c      	b.n	8013ddc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d103      	bne.n	8013dd6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	60fb      	str	r3, [r7, #12]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1ef      	bne.n	8013dc2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013de2:	bf00      	nop
 8013de4:	3714      	adds	r7, #20
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr
 8013dee:	bf00      	nop
 8013df0:	2400362c 	.word	0x2400362c

08013df4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013dfc:	4915      	ldr	r1, [pc, #84]	; (8013e54 <etharp_free_entry+0x60>)
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	4613      	mov	r3, r2
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	4413      	add	r3, r2
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	440b      	add	r3, r1
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d013      	beq.n	8013e38 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e10:	4910      	ldr	r1, [pc, #64]	; (8013e54 <etharp_free_entry+0x60>)
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	4613      	mov	r3, r2
 8013e16:	005b      	lsls	r3, r3, #1
 8013e18:	4413      	add	r3, r2
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	440b      	add	r3, r1
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f9 f9f5 	bl	800d210 <pbuf_free>
    arp_table[i].q = NULL;
 8013e26:	490b      	ldr	r1, [pc, #44]	; (8013e54 <etharp_free_entry+0x60>)
 8013e28:	687a      	ldr	r2, [r7, #4]
 8013e2a:	4613      	mov	r3, r2
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	4413      	add	r3, r2
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	440b      	add	r3, r1
 8013e34:	2200      	movs	r2, #0
 8013e36:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013e38:	4906      	ldr	r1, [pc, #24]	; (8013e54 <etharp_free_entry+0x60>)
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	005b      	lsls	r3, r3, #1
 8013e40:	4413      	add	r3, r2
 8013e42:	00db      	lsls	r3, r3, #3
 8013e44:	440b      	add	r3, r1
 8013e46:	3314      	adds	r3, #20
 8013e48:	2200      	movs	r2, #0
 8013e4a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013e4c:	bf00      	nop
 8013e4e:	3708      	adds	r7, #8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	24000134 	.word	0x24000134

08013e58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e5e:	2300      	movs	r3, #0
 8013e60:	607b      	str	r3, [r7, #4]
 8013e62:	e096      	b.n	8013f92 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013e64:	494f      	ldr	r1, [pc, #316]	; (8013fa4 <etharp_tmr+0x14c>)
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	4613      	mov	r3, r2
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	4413      	add	r3, r2
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	440b      	add	r3, r1
 8013e72:	3314      	adds	r3, #20
 8013e74:	781b      	ldrb	r3, [r3, #0]
 8013e76:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013e78:	78fb      	ldrb	r3, [r7, #3]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	f000 8086 	beq.w	8013f8c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013e80:	4948      	ldr	r1, [pc, #288]	; (8013fa4 <etharp_tmr+0x14c>)
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	4613      	mov	r3, r2
 8013e86:	005b      	lsls	r3, r3, #1
 8013e88:	4413      	add	r3, r2
 8013e8a:	00db      	lsls	r3, r3, #3
 8013e8c:	440b      	add	r3, r1
 8013e8e:	3312      	adds	r3, #18
 8013e90:	881b      	ldrh	r3, [r3, #0]
 8013e92:	3301      	adds	r3, #1
 8013e94:	b298      	uxth	r0, r3
 8013e96:	4943      	ldr	r1, [pc, #268]	; (8013fa4 <etharp_tmr+0x14c>)
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	00db      	lsls	r3, r3, #3
 8013ea2:	440b      	add	r3, r1
 8013ea4:	3312      	adds	r3, #18
 8013ea6:	4602      	mov	r2, r0
 8013ea8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013eaa:	493e      	ldr	r1, [pc, #248]	; (8013fa4 <etharp_tmr+0x14c>)
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	005b      	lsls	r3, r3, #1
 8013eb2:	4413      	add	r3, r2
 8013eb4:	00db      	lsls	r3, r3, #3
 8013eb6:	440b      	add	r3, r1
 8013eb8:	3312      	adds	r3, #18
 8013eba:	881b      	ldrh	r3, [r3, #0]
 8013ebc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013ec0:	d215      	bcs.n	8013eee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013ec2:	4938      	ldr	r1, [pc, #224]	; (8013fa4 <etharp_tmr+0x14c>)
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	4413      	add	r3, r2
 8013ecc:	00db      	lsls	r3, r3, #3
 8013ece:	440b      	add	r3, r1
 8013ed0:	3314      	adds	r3, #20
 8013ed2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d10e      	bne.n	8013ef6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013ed8:	4932      	ldr	r1, [pc, #200]	; (8013fa4 <etharp_tmr+0x14c>)
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4613      	mov	r3, r2
 8013ede:	005b      	lsls	r3, r3, #1
 8013ee0:	4413      	add	r3, r2
 8013ee2:	00db      	lsls	r3, r3, #3
 8013ee4:	440b      	add	r3, r1
 8013ee6:	3312      	adds	r3, #18
 8013ee8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013eea:	2b04      	cmp	r3, #4
 8013eec:	d903      	bls.n	8013ef6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff ff80 	bl	8013df4 <etharp_free_entry>
 8013ef4:	e04a      	b.n	8013f8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013ef6:	492b      	ldr	r1, [pc, #172]	; (8013fa4 <etharp_tmr+0x14c>)
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	4613      	mov	r3, r2
 8013efc:	005b      	lsls	r3, r3, #1
 8013efe:	4413      	add	r3, r2
 8013f00:	00db      	lsls	r3, r3, #3
 8013f02:	440b      	add	r3, r1
 8013f04:	3314      	adds	r3, #20
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	2b03      	cmp	r3, #3
 8013f0a:	d10a      	bne.n	8013f22 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f0c:	4925      	ldr	r1, [pc, #148]	; (8013fa4 <etharp_tmr+0x14c>)
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	4613      	mov	r3, r2
 8013f12:	005b      	lsls	r3, r3, #1
 8013f14:	4413      	add	r3, r2
 8013f16:	00db      	lsls	r3, r3, #3
 8013f18:	440b      	add	r3, r1
 8013f1a:	3314      	adds	r3, #20
 8013f1c:	2204      	movs	r2, #4
 8013f1e:	701a      	strb	r2, [r3, #0]
 8013f20:	e034      	b.n	8013f8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f22:	4920      	ldr	r1, [pc, #128]	; (8013fa4 <etharp_tmr+0x14c>)
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	4613      	mov	r3, r2
 8013f28:	005b      	lsls	r3, r3, #1
 8013f2a:	4413      	add	r3, r2
 8013f2c:	00db      	lsls	r3, r3, #3
 8013f2e:	440b      	add	r3, r1
 8013f30:	3314      	adds	r3, #20
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	2b04      	cmp	r3, #4
 8013f36:	d10a      	bne.n	8013f4e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013f38:	491a      	ldr	r1, [pc, #104]	; (8013fa4 <etharp_tmr+0x14c>)
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	005b      	lsls	r3, r3, #1
 8013f40:	4413      	add	r3, r2
 8013f42:	00db      	lsls	r3, r3, #3
 8013f44:	440b      	add	r3, r1
 8013f46:	3314      	adds	r3, #20
 8013f48:	2202      	movs	r2, #2
 8013f4a:	701a      	strb	r2, [r3, #0]
 8013f4c:	e01e      	b.n	8013f8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f4e:	4915      	ldr	r1, [pc, #84]	; (8013fa4 <etharp_tmr+0x14c>)
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	4613      	mov	r3, r2
 8013f54:	005b      	lsls	r3, r3, #1
 8013f56:	4413      	add	r3, r2
 8013f58:	00db      	lsls	r3, r3, #3
 8013f5a:	440b      	add	r3, r1
 8013f5c:	3314      	adds	r3, #20
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d113      	bne.n	8013f8c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013f64:	490f      	ldr	r1, [pc, #60]	; (8013fa4 <etharp_tmr+0x14c>)
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	005b      	lsls	r3, r3, #1
 8013f6c:	4413      	add	r3, r2
 8013f6e:	00db      	lsls	r3, r3, #3
 8013f70:	440b      	add	r3, r1
 8013f72:	3308      	adds	r3, #8
 8013f74:	6818      	ldr	r0, [r3, #0]
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	4613      	mov	r3, r2
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	4413      	add	r3, r2
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	4a08      	ldr	r2, [pc, #32]	; (8013fa4 <etharp_tmr+0x14c>)
 8013f82:	4413      	add	r3, r2
 8013f84:	3304      	adds	r3, #4
 8013f86:	4619      	mov	r1, r3
 8013f88:	f000 fe6e 	bl	8014c68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	607b      	str	r3, [r7, #4]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2b09      	cmp	r3, #9
 8013f96:	f77f af65 	ble.w	8013e64 <etharp_tmr+0xc>
      }
    }
  }
}
 8013f9a:	bf00      	nop
 8013f9c:	bf00      	nop
 8013f9e:	3708      	adds	r7, #8
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}
 8013fa4:	24000134 	.word	0x24000134

08013fa8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08a      	sub	sp, #40	; 0x28
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	607a      	str	r2, [r7, #4]
 8013fb4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013fb6:	230a      	movs	r3, #10
 8013fb8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013fba:	230a      	movs	r3, #10
 8013fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013fbe:	230a      	movs	r3, #10
 8013fc0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013fc6:	230a      	movs	r3, #10
 8013fc8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	83bb      	strh	r3, [r7, #28]
 8013fce:	2300      	movs	r3, #0
 8013fd0:	837b      	strh	r3, [r7, #26]
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	843b      	strh	r3, [r7, #32]
 8013fda:	e0ae      	b.n	801413a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013fdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fe0:	49a6      	ldr	r1, [pc, #664]	; (801427c <etharp_find_entry+0x2d4>)
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	005b      	lsls	r3, r3, #1
 8013fe6:	4413      	add	r3, r2
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	440b      	add	r3, r1
 8013fec:	3314      	adds	r3, #20
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013ff2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013ff6:	2b0a      	cmp	r3, #10
 8013ff8:	d105      	bne.n	8014006 <etharp_find_entry+0x5e>
 8013ffa:	7dfb      	ldrb	r3, [r7, #23]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d102      	bne.n	8014006 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014000:	8c3b      	ldrh	r3, [r7, #32]
 8014002:	847b      	strh	r3, [r7, #34]	; 0x22
 8014004:	e095      	b.n	8014132 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014006:	7dfb      	ldrb	r3, [r7, #23]
 8014008:	2b00      	cmp	r3, #0
 801400a:	f000 8092 	beq.w	8014132 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801400e:	7dfb      	ldrb	r3, [r7, #23]
 8014010:	2b01      	cmp	r3, #1
 8014012:	d009      	beq.n	8014028 <etharp_find_entry+0x80>
 8014014:	7dfb      	ldrb	r3, [r7, #23]
 8014016:	2b01      	cmp	r3, #1
 8014018:	d806      	bhi.n	8014028 <etharp_find_entry+0x80>
 801401a:	4b99      	ldr	r3, [pc, #612]	; (8014280 <etharp_find_entry+0x2d8>)
 801401c:	f240 1223 	movw	r2, #291	; 0x123
 8014020:	4998      	ldr	r1, [pc, #608]	; (8014284 <etharp_find_entry+0x2dc>)
 8014022:	4899      	ldr	r0, [pc, #612]	; (8014288 <etharp_find_entry+0x2e0>)
 8014024:	f002 faa6 	bl	8016574 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d020      	beq.n	8014070 <etharp_find_entry+0xc8>
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6819      	ldr	r1, [r3, #0]
 8014032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014036:	4891      	ldr	r0, [pc, #580]	; (801427c <etharp_find_entry+0x2d4>)
 8014038:	4613      	mov	r3, r2
 801403a:	005b      	lsls	r3, r3, #1
 801403c:	4413      	add	r3, r2
 801403e:	00db      	lsls	r3, r3, #3
 8014040:	4403      	add	r3, r0
 8014042:	3304      	adds	r3, #4
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	4299      	cmp	r1, r3
 8014048:	d112      	bne.n	8014070 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00c      	beq.n	801406a <etharp_find_entry+0xc2>
 8014050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014054:	4989      	ldr	r1, [pc, #548]	; (801427c <etharp_find_entry+0x2d4>)
 8014056:	4613      	mov	r3, r2
 8014058:	005b      	lsls	r3, r3, #1
 801405a:	4413      	add	r3, r2
 801405c:	00db      	lsls	r3, r3, #3
 801405e:	440b      	add	r3, r1
 8014060:	3308      	adds	r3, #8
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	429a      	cmp	r2, r3
 8014068:	d102      	bne.n	8014070 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801406a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801406e:	e100      	b.n	8014272 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014070:	7dfb      	ldrb	r3, [r7, #23]
 8014072:	2b01      	cmp	r3, #1
 8014074:	d140      	bne.n	80140f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801407a:	4980      	ldr	r1, [pc, #512]	; (801427c <etharp_find_entry+0x2d4>)
 801407c:	4613      	mov	r3, r2
 801407e:	005b      	lsls	r3, r3, #1
 8014080:	4413      	add	r3, r2
 8014082:	00db      	lsls	r3, r3, #3
 8014084:	440b      	add	r3, r1
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d01a      	beq.n	80140c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801408c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014090:	497a      	ldr	r1, [pc, #488]	; (801427c <etharp_find_entry+0x2d4>)
 8014092:	4613      	mov	r3, r2
 8014094:	005b      	lsls	r3, r3, #1
 8014096:	4413      	add	r3, r2
 8014098:	00db      	lsls	r3, r3, #3
 801409a:	440b      	add	r3, r1
 801409c:	3312      	adds	r3, #18
 801409e:	881b      	ldrh	r3, [r3, #0]
 80140a0:	8bba      	ldrh	r2, [r7, #28]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d845      	bhi.n	8014132 <etharp_find_entry+0x18a>
            old_queue = i;
 80140a6:	8c3b      	ldrh	r3, [r7, #32]
 80140a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80140aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ae:	4973      	ldr	r1, [pc, #460]	; (801427c <etharp_find_entry+0x2d4>)
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	440b      	add	r3, r1
 80140ba:	3312      	adds	r3, #18
 80140bc:	881b      	ldrh	r3, [r3, #0]
 80140be:	83bb      	strh	r3, [r7, #28]
 80140c0:	e037      	b.n	8014132 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80140c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140c6:	496d      	ldr	r1, [pc, #436]	; (801427c <etharp_find_entry+0x2d4>)
 80140c8:	4613      	mov	r3, r2
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	4413      	add	r3, r2
 80140ce:	00db      	lsls	r3, r3, #3
 80140d0:	440b      	add	r3, r1
 80140d2:	3312      	adds	r3, #18
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	8b7a      	ldrh	r2, [r7, #26]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d82a      	bhi.n	8014132 <etharp_find_entry+0x18a>
            old_pending = i;
 80140dc:	8c3b      	ldrh	r3, [r7, #32]
 80140de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80140e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e4:	4965      	ldr	r1, [pc, #404]	; (801427c <etharp_find_entry+0x2d4>)
 80140e6:	4613      	mov	r3, r2
 80140e8:	005b      	lsls	r3, r3, #1
 80140ea:	4413      	add	r3, r2
 80140ec:	00db      	lsls	r3, r3, #3
 80140ee:	440b      	add	r3, r1
 80140f0:	3312      	adds	r3, #18
 80140f2:	881b      	ldrh	r3, [r3, #0]
 80140f4:	837b      	strh	r3, [r7, #26]
 80140f6:	e01c      	b.n	8014132 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80140f8:	7dfb      	ldrb	r3, [r7, #23]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d919      	bls.n	8014132 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80140fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014102:	495e      	ldr	r1, [pc, #376]	; (801427c <etharp_find_entry+0x2d4>)
 8014104:	4613      	mov	r3, r2
 8014106:	005b      	lsls	r3, r3, #1
 8014108:	4413      	add	r3, r2
 801410a:	00db      	lsls	r3, r3, #3
 801410c:	440b      	add	r3, r1
 801410e:	3312      	adds	r3, #18
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	8b3a      	ldrh	r2, [r7, #24]
 8014114:	429a      	cmp	r2, r3
 8014116:	d80c      	bhi.n	8014132 <etharp_find_entry+0x18a>
            old_stable = i;
 8014118:	8c3b      	ldrh	r3, [r7, #32]
 801411a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801411c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014120:	4956      	ldr	r1, [pc, #344]	; (801427c <etharp_find_entry+0x2d4>)
 8014122:	4613      	mov	r3, r2
 8014124:	005b      	lsls	r3, r3, #1
 8014126:	4413      	add	r3, r2
 8014128:	00db      	lsls	r3, r3, #3
 801412a:	440b      	add	r3, r1
 801412c:	3312      	adds	r3, #18
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014132:	8c3b      	ldrh	r3, [r7, #32]
 8014134:	3301      	adds	r3, #1
 8014136:	b29b      	uxth	r3, r3
 8014138:	843b      	strh	r3, [r7, #32]
 801413a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801413e:	2b09      	cmp	r3, #9
 8014140:	f77f af4c 	ble.w	8013fdc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014144:	7afb      	ldrb	r3, [r7, #11]
 8014146:	f003 0302 	and.w	r3, r3, #2
 801414a:	2b00      	cmp	r3, #0
 801414c:	d108      	bne.n	8014160 <etharp_find_entry+0x1b8>
 801414e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014152:	2b0a      	cmp	r3, #10
 8014154:	d107      	bne.n	8014166 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014156:	7afb      	ldrb	r3, [r7, #11]
 8014158:	f003 0301 	and.w	r3, r3, #1
 801415c:	2b00      	cmp	r3, #0
 801415e:	d102      	bne.n	8014166 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014160:	f04f 33ff 	mov.w	r3, #4294967295
 8014164:	e085      	b.n	8014272 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014166:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801416a:	2b09      	cmp	r3, #9
 801416c:	dc02      	bgt.n	8014174 <etharp_find_entry+0x1cc>
    i = empty;
 801416e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014170:	843b      	strh	r3, [r7, #32]
 8014172:	e039      	b.n	80141e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014174:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014178:	2b09      	cmp	r3, #9
 801417a:	dc14      	bgt.n	80141a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801417c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801417e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014184:	493d      	ldr	r1, [pc, #244]	; (801427c <etharp_find_entry+0x2d4>)
 8014186:	4613      	mov	r3, r2
 8014188:	005b      	lsls	r3, r3, #1
 801418a:	4413      	add	r3, r2
 801418c:	00db      	lsls	r3, r3, #3
 801418e:	440b      	add	r3, r1
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d018      	beq.n	80141c8 <etharp_find_entry+0x220>
 8014196:	4b3a      	ldr	r3, [pc, #232]	; (8014280 <etharp_find_entry+0x2d8>)
 8014198:	f240 126d 	movw	r2, #365	; 0x16d
 801419c:	493b      	ldr	r1, [pc, #236]	; (801428c <etharp_find_entry+0x2e4>)
 801419e:	483a      	ldr	r0, [pc, #232]	; (8014288 <etharp_find_entry+0x2e0>)
 80141a0:	f002 f9e8 	bl	8016574 <iprintf>
 80141a4:	e010      	b.n	80141c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80141a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80141aa:	2b09      	cmp	r3, #9
 80141ac:	dc02      	bgt.n	80141b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80141ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141b0:	843b      	strh	r3, [r7, #32]
 80141b2:	e009      	b.n	80141c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80141b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80141b8:	2b09      	cmp	r3, #9
 80141ba:	dc02      	bgt.n	80141c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80141bc:	8bfb      	ldrh	r3, [r7, #30]
 80141be:	843b      	strh	r3, [r7, #32]
 80141c0:	e002      	b.n	80141c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80141c2:	f04f 33ff 	mov.w	r3, #4294967295
 80141c6:	e054      	b.n	8014272 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141cc:	2b09      	cmp	r3, #9
 80141ce:	dd06      	ble.n	80141de <etharp_find_entry+0x236>
 80141d0:	4b2b      	ldr	r3, [pc, #172]	; (8014280 <etharp_find_entry+0x2d8>)
 80141d2:	f240 127f 	movw	r2, #383	; 0x17f
 80141d6:	492e      	ldr	r1, [pc, #184]	; (8014290 <etharp_find_entry+0x2e8>)
 80141d8:	482b      	ldr	r0, [pc, #172]	; (8014288 <etharp_find_entry+0x2e0>)
 80141da:	f002 f9cb 	bl	8016574 <iprintf>
    etharp_free_entry(i);
 80141de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7ff fe06 	bl	8013df4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80141e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141ec:	2b09      	cmp	r3, #9
 80141ee:	dd06      	ble.n	80141fe <etharp_find_entry+0x256>
 80141f0:	4b23      	ldr	r3, [pc, #140]	; (8014280 <etharp_find_entry+0x2d8>)
 80141f2:	f240 1283 	movw	r2, #387	; 0x183
 80141f6:	4926      	ldr	r1, [pc, #152]	; (8014290 <etharp_find_entry+0x2e8>)
 80141f8:	4823      	ldr	r0, [pc, #140]	; (8014288 <etharp_find_entry+0x2e0>)
 80141fa:	f002 f9bb 	bl	8016574 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80141fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014202:	491e      	ldr	r1, [pc, #120]	; (801427c <etharp_find_entry+0x2d4>)
 8014204:	4613      	mov	r3, r2
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	4413      	add	r3, r2
 801420a:	00db      	lsls	r3, r3, #3
 801420c:	440b      	add	r3, r1
 801420e:	3314      	adds	r3, #20
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d006      	beq.n	8014224 <etharp_find_entry+0x27c>
 8014216:	4b1a      	ldr	r3, [pc, #104]	; (8014280 <etharp_find_entry+0x2d8>)
 8014218:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801421c:	491d      	ldr	r1, [pc, #116]	; (8014294 <etharp_find_entry+0x2ec>)
 801421e:	481a      	ldr	r0, [pc, #104]	; (8014288 <etharp_find_entry+0x2e0>)
 8014220:	f002 f9a8 	bl	8016574 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d00b      	beq.n	8014242 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801422a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6819      	ldr	r1, [r3, #0]
 8014232:	4812      	ldr	r0, [pc, #72]	; (801427c <etharp_find_entry+0x2d4>)
 8014234:	4613      	mov	r3, r2
 8014236:	005b      	lsls	r3, r3, #1
 8014238:	4413      	add	r3, r2
 801423a:	00db      	lsls	r3, r3, #3
 801423c:	4403      	add	r3, r0
 801423e:	3304      	adds	r3, #4
 8014240:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014242:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014246:	490d      	ldr	r1, [pc, #52]	; (801427c <etharp_find_entry+0x2d4>)
 8014248:	4613      	mov	r3, r2
 801424a:	005b      	lsls	r3, r3, #1
 801424c:	4413      	add	r3, r2
 801424e:	00db      	lsls	r3, r3, #3
 8014250:	440b      	add	r3, r1
 8014252:	3312      	adds	r3, #18
 8014254:	2200      	movs	r2, #0
 8014256:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801425c:	4907      	ldr	r1, [pc, #28]	; (801427c <etharp_find_entry+0x2d4>)
 801425e:	4613      	mov	r3, r2
 8014260:	005b      	lsls	r3, r3, #1
 8014262:	4413      	add	r3, r2
 8014264:	00db      	lsls	r3, r3, #3
 8014266:	440b      	add	r3, r1
 8014268:	3308      	adds	r3, #8
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801426e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014272:	4618      	mov	r0, r3
 8014274:	3728      	adds	r7, #40	; 0x28
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	24000134 	.word	0x24000134
 8014280:	08019a08 	.word	0x08019a08
 8014284:	08019a40 	.word	0x08019a40
 8014288:	08019a80 	.word	0x08019a80
 801428c:	08019aa8 	.word	0x08019aa8
 8014290:	08019ac0 	.word	0x08019ac0
 8014294:	08019ad4 	.word	0x08019ad4

08014298 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b088      	sub	sp, #32
 801429c:	af02      	add	r7, sp, #8
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	60b9      	str	r1, [r7, #8]
 80142a2:	607a      	str	r2, [r7, #4]
 80142a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80142ac:	2b06      	cmp	r3, #6
 80142ae:	d006      	beq.n	80142be <etharp_update_arp_entry+0x26>
 80142b0:	4b48      	ldr	r3, [pc, #288]	; (80143d4 <etharp_update_arp_entry+0x13c>)
 80142b2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80142b6:	4948      	ldr	r1, [pc, #288]	; (80143d8 <etharp_update_arp_entry+0x140>)
 80142b8:	4848      	ldr	r0, [pc, #288]	; (80143dc <etharp_update_arp_entry+0x144>)
 80142ba:	f002 f95b 	bl	8016574 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d012      	beq.n	80142ea <etharp_update_arp_entry+0x52>
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d00e      	beq.n	80142ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	68f9      	ldr	r1, [r7, #12]
 80142d2:	4618      	mov	r0, r3
 80142d4:	f001 f924 	bl	8015520 <ip4_addr_isbroadcast_u32>
 80142d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d105      	bne.n	80142ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80142e6:	2be0      	cmp	r3, #224	; 0xe0
 80142e8:	d102      	bne.n	80142f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80142ea:	f06f 030f 	mvn.w	r3, #15
 80142ee:	e06c      	b.n	80143ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80142f0:	78fb      	ldrb	r3, [r7, #3]
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	4619      	mov	r1, r3
 80142f6:	68b8      	ldr	r0, [r7, #8]
 80142f8:	f7ff fe56 	bl	8013fa8 <etharp_find_entry>
 80142fc:	4603      	mov	r3, r0
 80142fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014300:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014304:	2b00      	cmp	r3, #0
 8014306:	da02      	bge.n	801430e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014308:	8afb      	ldrh	r3, [r7, #22]
 801430a:	b25b      	sxtb	r3, r3
 801430c:	e05d      	b.n	80143ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801430e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014312:	4933      	ldr	r1, [pc, #204]	; (80143e0 <etharp_update_arp_entry+0x148>)
 8014314:	4613      	mov	r3, r2
 8014316:	005b      	lsls	r3, r3, #1
 8014318:	4413      	add	r3, r2
 801431a:	00db      	lsls	r3, r3, #3
 801431c:	440b      	add	r3, r1
 801431e:	3314      	adds	r3, #20
 8014320:	2202      	movs	r2, #2
 8014322:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014328:	492d      	ldr	r1, [pc, #180]	; (80143e0 <etharp_update_arp_entry+0x148>)
 801432a:	4613      	mov	r3, r2
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4413      	add	r3, r2
 8014330:	00db      	lsls	r3, r3, #3
 8014332:	440b      	add	r3, r1
 8014334:	3308      	adds	r3, #8
 8014336:	68fa      	ldr	r2, [r7, #12]
 8014338:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801433a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801433e:	4613      	mov	r3, r2
 8014340:	005b      	lsls	r3, r3, #1
 8014342:	4413      	add	r3, r2
 8014344:	00db      	lsls	r3, r3, #3
 8014346:	3308      	adds	r3, #8
 8014348:	4a25      	ldr	r2, [pc, #148]	; (80143e0 <etharp_update_arp_entry+0x148>)
 801434a:	4413      	add	r3, r2
 801434c:	3304      	adds	r3, #4
 801434e:	2206      	movs	r2, #6
 8014350:	6879      	ldr	r1, [r7, #4]
 8014352:	4618      	mov	r0, r3
 8014354:	f002 f8f8 	bl	8016548 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801435c:	4920      	ldr	r1, [pc, #128]	; (80143e0 <etharp_update_arp_entry+0x148>)
 801435e:	4613      	mov	r3, r2
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	4413      	add	r3, r2
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	440b      	add	r3, r1
 8014368:	3312      	adds	r3, #18
 801436a:	2200      	movs	r2, #0
 801436c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801436e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014372:	491b      	ldr	r1, [pc, #108]	; (80143e0 <etharp_update_arp_entry+0x148>)
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	440b      	add	r3, r1
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d021      	beq.n	80143c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014388:	4915      	ldr	r1, [pc, #84]	; (80143e0 <etharp_update_arp_entry+0x148>)
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801439c:	4910      	ldr	r1, [pc, #64]	; (80143e0 <etharp_update_arp_entry+0x148>)
 801439e:	4613      	mov	r3, r2
 80143a0:	005b      	lsls	r3, r3, #1
 80143a2:	4413      	add	r3, r2
 80143a4:	00db      	lsls	r3, r3, #3
 80143a6:	440b      	add	r3, r1
 80143a8:	2200      	movs	r2, #0
 80143aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80143b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6939      	ldr	r1, [r7, #16]
 80143bc:	68f8      	ldr	r0, [r7, #12]
 80143be:	f002 f849 	bl	8016454 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80143c2:	6938      	ldr	r0, [r7, #16]
 80143c4:	f7f8 ff24 	bl	800d210 <pbuf_free>
  }
  return ERR_OK;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3718      	adds	r7, #24
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	08019a08 	.word	0x08019a08
 80143d8:	08019b00 	.word	0x08019b00
 80143dc:	08019a80 	.word	0x08019a80
 80143e0:	24000134 	.word	0x24000134

080143e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143ec:	2300      	movs	r3, #0
 80143ee:	60fb      	str	r3, [r7, #12]
 80143f0:	e01e      	b.n	8014430 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80143f2:	4913      	ldr	r1, [pc, #76]	; (8014440 <etharp_cleanup_netif+0x5c>)
 80143f4:	68fa      	ldr	r2, [r7, #12]
 80143f6:	4613      	mov	r3, r2
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	4413      	add	r3, r2
 80143fc:	00db      	lsls	r3, r3, #3
 80143fe:	440b      	add	r3, r1
 8014400:	3314      	adds	r3, #20
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014406:	7afb      	ldrb	r3, [r7, #11]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d00e      	beq.n	801442a <etharp_cleanup_netif+0x46>
 801440c:	490c      	ldr	r1, [pc, #48]	; (8014440 <etharp_cleanup_netif+0x5c>)
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	4613      	mov	r3, r2
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	4413      	add	r3, r2
 8014416:	00db      	lsls	r3, r3, #3
 8014418:	440b      	add	r3, r1
 801441a:	3308      	adds	r3, #8
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	429a      	cmp	r2, r3
 8014422:	d102      	bne.n	801442a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014424:	68f8      	ldr	r0, [r7, #12]
 8014426:	f7ff fce5 	bl	8013df4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	3301      	adds	r3, #1
 801442e:	60fb      	str	r3, [r7, #12]
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	2b09      	cmp	r3, #9
 8014434:	dddd      	ble.n	80143f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014436:	bf00      	nop
 8014438:	bf00      	nop
 801443a:	3710      	adds	r7, #16
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}
 8014440:	24000134 	.word	0x24000134

08014444 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014444:	b5b0      	push	{r4, r5, r7, lr}
 8014446:	b08a      	sub	sp, #40	; 0x28
 8014448:	af04      	add	r7, sp, #16
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d107      	bne.n	8014464 <etharp_input+0x20>
 8014454:	4b3d      	ldr	r3, [pc, #244]	; (801454c <etharp_input+0x108>)
 8014456:	f240 228a 	movw	r2, #650	; 0x28a
 801445a:	493d      	ldr	r1, [pc, #244]	; (8014550 <etharp_input+0x10c>)
 801445c:	483d      	ldr	r0, [pc, #244]	; (8014554 <etharp_input+0x110>)
 801445e:	f002 f889 	bl	8016574 <iprintf>
 8014462:	e06f      	b.n	8014544 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	881b      	ldrh	r3, [r3, #0]
 801446e:	b29b      	uxth	r3, r3
 8014470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014474:	d10c      	bne.n	8014490 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801447a:	2b06      	cmp	r3, #6
 801447c:	d108      	bne.n	8014490 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014482:	2b04      	cmp	r3, #4
 8014484:	d104      	bne.n	8014490 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	885b      	ldrh	r3, [r3, #2]
 801448a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801448c:	2b08      	cmp	r3, #8
 801448e:	d003      	beq.n	8014498 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f7f8 febd 	bl	800d210 <pbuf_free>
    return;
 8014496:	e055      	b.n	8014544 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	330e      	adds	r3, #14
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	3318      	adds	r3, #24
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	3304      	adds	r3, #4
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d102      	bne.n	80144b8 <etharp_input+0x74>
    for_us = 0;
 80144b2:	2300      	movs	r3, #0
 80144b4:	75fb      	strb	r3, [r7, #23]
 80144b6:	e009      	b.n	80144cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80144b8:	68ba      	ldr	r2, [r7, #8]
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	3304      	adds	r3, #4
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	bf0c      	ite	eq
 80144c4:	2301      	moveq	r3, #1
 80144c6:	2300      	movne	r3, #0
 80144c8:	b2db      	uxtb	r3, r3
 80144ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	f103 0208 	add.w	r2, r3, #8
 80144d2:	7dfb      	ldrb	r3, [r7, #23]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <etharp_input+0x98>
 80144d8:	2301      	movs	r3, #1
 80144da:	e000      	b.n	80144de <etharp_input+0x9a>
 80144dc:	2302      	movs	r3, #2
 80144de:	f107 010c 	add.w	r1, r7, #12
 80144e2:	6838      	ldr	r0, [r7, #0]
 80144e4:	f7ff fed8 	bl	8014298 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	88db      	ldrh	r3, [r3, #6]
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80144f2:	d003      	beq.n	80144fc <etharp_input+0xb8>
 80144f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144f8:	d01e      	beq.n	8014538 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80144fa:	e020      	b.n	801453e <etharp_input+0xfa>
      if (for_us) {
 80144fc:	7dfb      	ldrb	r3, [r7, #23]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d01c      	beq.n	801453c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014518:	693a      	ldr	r2, [r7, #16]
 801451a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801451c:	2102      	movs	r1, #2
 801451e:	9103      	str	r1, [sp, #12]
 8014520:	f107 010c 	add.w	r1, r7, #12
 8014524:	9102      	str	r1, [sp, #8]
 8014526:	9201      	str	r2, [sp, #4]
 8014528:	9300      	str	r3, [sp, #0]
 801452a:	462b      	mov	r3, r5
 801452c:	4622      	mov	r2, r4
 801452e:	4601      	mov	r1, r0
 8014530:	6838      	ldr	r0, [r7, #0]
 8014532:	f000 faeb 	bl	8014b0c <etharp_raw>
      break;
 8014536:	e001      	b.n	801453c <etharp_input+0xf8>
      break;
 8014538:	bf00      	nop
 801453a:	e000      	b.n	801453e <etharp_input+0xfa>
      break;
 801453c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7f8 fe66 	bl	800d210 <pbuf_free>
}
 8014544:	3718      	adds	r7, #24
 8014546:	46bd      	mov	sp, r7
 8014548:	bdb0      	pop	{r4, r5, r7, pc}
 801454a:	bf00      	nop
 801454c:	08019a08 	.word	0x08019a08
 8014550:	08019b58 	.word	0x08019b58
 8014554:	08019a80 	.word	0x08019a80

08014558 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b086      	sub	sp, #24
 801455c:	af02      	add	r7, sp, #8
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	4613      	mov	r3, r2
 8014564:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014566:	79fa      	ldrb	r2, [r7, #7]
 8014568:	4944      	ldr	r1, [pc, #272]	; (801467c <etharp_output_to_arp_index+0x124>)
 801456a:	4613      	mov	r3, r2
 801456c:	005b      	lsls	r3, r3, #1
 801456e:	4413      	add	r3, r2
 8014570:	00db      	lsls	r3, r3, #3
 8014572:	440b      	add	r3, r1
 8014574:	3314      	adds	r3, #20
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	2b01      	cmp	r3, #1
 801457a:	d806      	bhi.n	801458a <etharp_output_to_arp_index+0x32>
 801457c:	4b40      	ldr	r3, [pc, #256]	; (8014680 <etharp_output_to_arp_index+0x128>)
 801457e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014582:	4940      	ldr	r1, [pc, #256]	; (8014684 <etharp_output_to_arp_index+0x12c>)
 8014584:	4840      	ldr	r0, [pc, #256]	; (8014688 <etharp_output_to_arp_index+0x130>)
 8014586:	f001 fff5 	bl	8016574 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801458a:	79fa      	ldrb	r2, [r7, #7]
 801458c:	493b      	ldr	r1, [pc, #236]	; (801467c <etharp_output_to_arp_index+0x124>)
 801458e:	4613      	mov	r3, r2
 8014590:	005b      	lsls	r3, r3, #1
 8014592:	4413      	add	r3, r2
 8014594:	00db      	lsls	r3, r3, #3
 8014596:	440b      	add	r3, r1
 8014598:	3314      	adds	r3, #20
 801459a:	781b      	ldrb	r3, [r3, #0]
 801459c:	2b02      	cmp	r3, #2
 801459e:	d153      	bne.n	8014648 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80145a0:	79fa      	ldrb	r2, [r7, #7]
 80145a2:	4936      	ldr	r1, [pc, #216]	; (801467c <etharp_output_to_arp_index+0x124>)
 80145a4:	4613      	mov	r3, r2
 80145a6:	005b      	lsls	r3, r3, #1
 80145a8:	4413      	add	r3, r2
 80145aa:	00db      	lsls	r3, r3, #3
 80145ac:	440b      	add	r3, r1
 80145ae:	3312      	adds	r3, #18
 80145b0:	881b      	ldrh	r3, [r3, #0]
 80145b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80145b6:	d919      	bls.n	80145ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80145b8:	79fa      	ldrb	r2, [r7, #7]
 80145ba:	4613      	mov	r3, r2
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	4413      	add	r3, r2
 80145c0:	00db      	lsls	r3, r3, #3
 80145c2:	4a2e      	ldr	r2, [pc, #184]	; (801467c <etharp_output_to_arp_index+0x124>)
 80145c4:	4413      	add	r3, r2
 80145c6:	3304      	adds	r3, #4
 80145c8:	4619      	mov	r1, r3
 80145ca:	68f8      	ldr	r0, [r7, #12]
 80145cc:	f000 fb4c 	bl	8014c68 <etharp_request>
 80145d0:	4603      	mov	r3, r0
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d138      	bne.n	8014648 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80145d6:	79fa      	ldrb	r2, [r7, #7]
 80145d8:	4928      	ldr	r1, [pc, #160]	; (801467c <etharp_output_to_arp_index+0x124>)
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	440b      	add	r3, r1
 80145e4:	3314      	adds	r3, #20
 80145e6:	2203      	movs	r2, #3
 80145e8:	701a      	strb	r2, [r3, #0]
 80145ea:	e02d      	b.n	8014648 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80145ec:	79fa      	ldrb	r2, [r7, #7]
 80145ee:	4923      	ldr	r1, [pc, #140]	; (801467c <etharp_output_to_arp_index+0x124>)
 80145f0:	4613      	mov	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	4413      	add	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	440b      	add	r3, r1
 80145fa:	3312      	adds	r3, #18
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014602:	d321      	bcc.n	8014648 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014604:	79fa      	ldrb	r2, [r7, #7]
 8014606:	4613      	mov	r3, r2
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	00db      	lsls	r3, r3, #3
 801460e:	4a1b      	ldr	r2, [pc, #108]	; (801467c <etharp_output_to_arp_index+0x124>)
 8014610:	4413      	add	r3, r2
 8014612:	1d19      	adds	r1, r3, #4
 8014614:	79fa      	ldrb	r2, [r7, #7]
 8014616:	4613      	mov	r3, r2
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	4413      	add	r3, r2
 801461c:	00db      	lsls	r3, r3, #3
 801461e:	3308      	adds	r3, #8
 8014620:	4a16      	ldr	r2, [pc, #88]	; (801467c <etharp_output_to_arp_index+0x124>)
 8014622:	4413      	add	r3, r2
 8014624:	3304      	adds	r3, #4
 8014626:	461a      	mov	r2, r3
 8014628:	68f8      	ldr	r0, [r7, #12]
 801462a:	f000 fafb 	bl	8014c24 <etharp_request_dst>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d109      	bne.n	8014648 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014634:	79fa      	ldrb	r2, [r7, #7]
 8014636:	4911      	ldr	r1, [pc, #68]	; (801467c <etharp_output_to_arp_index+0x124>)
 8014638:	4613      	mov	r3, r2
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	4413      	add	r3, r2
 801463e:	00db      	lsls	r3, r3, #3
 8014640:	440b      	add	r3, r1
 8014642:	3314      	adds	r3, #20
 8014644:	2203      	movs	r2, #3
 8014646:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801464e:	79fa      	ldrb	r2, [r7, #7]
 8014650:	4613      	mov	r3, r2
 8014652:	005b      	lsls	r3, r3, #1
 8014654:	4413      	add	r3, r2
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	3308      	adds	r3, #8
 801465a:	4a08      	ldr	r2, [pc, #32]	; (801467c <etharp_output_to_arp_index+0x124>)
 801465c:	4413      	add	r3, r2
 801465e:	3304      	adds	r3, #4
 8014660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014664:	9200      	str	r2, [sp, #0]
 8014666:	460a      	mov	r2, r1
 8014668:	68b9      	ldr	r1, [r7, #8]
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f001 fef2 	bl	8016454 <ethernet_output>
 8014670:	4603      	mov	r3, r0
}
 8014672:	4618      	mov	r0, r3
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	24000134 	.word	0x24000134
 8014680:	08019a08 	.word	0x08019a08
 8014684:	08019b78 	.word	0x08019b78
 8014688:	08019a80 	.word	0x08019a80

0801468c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b08a      	sub	sp, #40	; 0x28
 8014690:	af02      	add	r7, sp, #8
 8014692:	60f8      	str	r0, [r7, #12]
 8014694:	60b9      	str	r1, [r7, #8]
 8014696:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d106      	bne.n	80146b0 <etharp_output+0x24>
 80146a2:	4b73      	ldr	r3, [pc, #460]	; (8014870 <etharp_output+0x1e4>)
 80146a4:	f240 321e 	movw	r2, #798	; 0x31e
 80146a8:	4972      	ldr	r1, [pc, #456]	; (8014874 <etharp_output+0x1e8>)
 80146aa:	4873      	ldr	r0, [pc, #460]	; (8014878 <etharp_output+0x1ec>)
 80146ac:	f001 ff62 	bl	8016574 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d106      	bne.n	80146c4 <etharp_output+0x38>
 80146b6:	4b6e      	ldr	r3, [pc, #440]	; (8014870 <etharp_output+0x1e4>)
 80146b8:	f240 321f 	movw	r2, #799	; 0x31f
 80146bc:	496f      	ldr	r1, [pc, #444]	; (801487c <etharp_output+0x1f0>)
 80146be:	486e      	ldr	r0, [pc, #440]	; (8014878 <etharp_output+0x1ec>)
 80146c0:	f001 ff58 	bl	8016574 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d106      	bne.n	80146d8 <etharp_output+0x4c>
 80146ca:	4b69      	ldr	r3, [pc, #420]	; (8014870 <etharp_output+0x1e4>)
 80146cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80146d0:	496b      	ldr	r1, [pc, #428]	; (8014880 <etharp_output+0x1f4>)
 80146d2:	4869      	ldr	r0, [pc, #420]	; (8014878 <etharp_output+0x1ec>)
 80146d4:	f001 ff4e 	bl	8016574 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	68f9      	ldr	r1, [r7, #12]
 80146de:	4618      	mov	r0, r3
 80146e0:	f000 ff1e 	bl	8015520 <ip4_addr_isbroadcast_u32>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d002      	beq.n	80146f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80146ea:	4b66      	ldr	r3, [pc, #408]	; (8014884 <etharp_output+0x1f8>)
 80146ec:	61fb      	str	r3, [r7, #28]
 80146ee:	e0af      	b.n	8014850 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80146f8:	2be0      	cmp	r3, #224	; 0xe0
 80146fa:	d118      	bne.n	801472e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80146fc:	2301      	movs	r3, #1
 80146fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014700:	2300      	movs	r3, #0
 8014702:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014704:	235e      	movs	r3, #94	; 0x5e
 8014706:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	3301      	adds	r3, #1
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014712:	b2db      	uxtb	r3, r3
 8014714:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	3302      	adds	r3, #2
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	3303      	adds	r3, #3
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014726:	f107 0310 	add.w	r3, r7, #16
 801472a:	61fb      	str	r3, [r7, #28]
 801472c:	e090      	b.n	8014850 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	3304      	adds	r3, #4
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	405a      	eors	r2, r3
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	3308      	adds	r3, #8
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4013      	ands	r3, r2
 8014742:	2b00      	cmp	r3, #0
 8014744:	d012      	beq.n	801476c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801474c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014750:	4293      	cmp	r3, r2
 8014752:	d00b      	beq.n	801476c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	330c      	adds	r3, #12
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d003      	beq.n	8014766 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	330c      	adds	r3, #12
 8014762:	61bb      	str	r3, [r7, #24]
 8014764:	e002      	b.n	801476c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014766:	f06f 0303 	mvn.w	r3, #3
 801476a:	e07d      	b.n	8014868 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801476c:	4b46      	ldr	r3, [pc, #280]	; (8014888 <etharp_output+0x1fc>)
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	4619      	mov	r1, r3
 8014772:	4a46      	ldr	r2, [pc, #280]	; (801488c <etharp_output+0x200>)
 8014774:	460b      	mov	r3, r1
 8014776:	005b      	lsls	r3, r3, #1
 8014778:	440b      	add	r3, r1
 801477a:	00db      	lsls	r3, r3, #3
 801477c:	4413      	add	r3, r2
 801477e:	3314      	adds	r3, #20
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d925      	bls.n	80147d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014786:	4b40      	ldr	r3, [pc, #256]	; (8014888 <etharp_output+0x1fc>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	4619      	mov	r1, r3
 801478c:	4a3f      	ldr	r2, [pc, #252]	; (801488c <etharp_output+0x200>)
 801478e:	460b      	mov	r3, r1
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	440b      	add	r3, r1
 8014794:	00db      	lsls	r3, r3, #3
 8014796:	4413      	add	r3, r2
 8014798:	3308      	adds	r3, #8
 801479a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d117      	bne.n	80147d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	681a      	ldr	r2, [r3, #0]
 80147a6:	4b38      	ldr	r3, [pc, #224]	; (8014888 <etharp_output+0x1fc>)
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	4618      	mov	r0, r3
 80147ac:	4937      	ldr	r1, [pc, #220]	; (801488c <etharp_output+0x200>)
 80147ae:	4603      	mov	r3, r0
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	4403      	add	r3, r0
 80147b4:	00db      	lsls	r3, r3, #3
 80147b6:	440b      	add	r3, r1
 80147b8:	3304      	adds	r3, #4
 80147ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147bc:	429a      	cmp	r2, r3
 80147be:	d108      	bne.n	80147d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80147c0:	4b31      	ldr	r3, [pc, #196]	; (8014888 <etharp_output+0x1fc>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	461a      	mov	r2, r3
 80147c6:	68b9      	ldr	r1, [r7, #8]
 80147c8:	68f8      	ldr	r0, [r7, #12]
 80147ca:	f7ff fec5 	bl	8014558 <etharp_output_to_arp_index>
 80147ce:	4603      	mov	r3, r0
 80147d0:	e04a      	b.n	8014868 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80147d2:	2300      	movs	r3, #0
 80147d4:	75fb      	strb	r3, [r7, #23]
 80147d6:	e031      	b.n	801483c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80147d8:	7dfa      	ldrb	r2, [r7, #23]
 80147da:	492c      	ldr	r1, [pc, #176]	; (801488c <etharp_output+0x200>)
 80147dc:	4613      	mov	r3, r2
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	4413      	add	r3, r2
 80147e2:	00db      	lsls	r3, r3, #3
 80147e4:	440b      	add	r3, r1
 80147e6:	3314      	adds	r3, #20
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	d923      	bls.n	8014836 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80147ee:	7dfa      	ldrb	r2, [r7, #23]
 80147f0:	4926      	ldr	r1, [pc, #152]	; (801488c <etharp_output+0x200>)
 80147f2:	4613      	mov	r3, r2
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	4413      	add	r3, r2
 80147f8:	00db      	lsls	r3, r3, #3
 80147fa:	440b      	add	r3, r1
 80147fc:	3308      	adds	r3, #8
 80147fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	429a      	cmp	r2, r3
 8014804:	d117      	bne.n	8014836 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	6819      	ldr	r1, [r3, #0]
 801480a:	7dfa      	ldrb	r2, [r7, #23]
 801480c:	481f      	ldr	r0, [pc, #124]	; (801488c <etharp_output+0x200>)
 801480e:	4613      	mov	r3, r2
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	4413      	add	r3, r2
 8014814:	00db      	lsls	r3, r3, #3
 8014816:	4403      	add	r3, r0
 8014818:	3304      	adds	r3, #4
 801481a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801481c:	4299      	cmp	r1, r3
 801481e:	d10a      	bne.n	8014836 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014820:	4a19      	ldr	r2, [pc, #100]	; (8014888 <etharp_output+0x1fc>)
 8014822:	7dfb      	ldrb	r3, [r7, #23]
 8014824:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014826:	7dfb      	ldrb	r3, [r7, #23]
 8014828:	461a      	mov	r2, r3
 801482a:	68b9      	ldr	r1, [r7, #8]
 801482c:	68f8      	ldr	r0, [r7, #12]
 801482e:	f7ff fe93 	bl	8014558 <etharp_output_to_arp_index>
 8014832:	4603      	mov	r3, r0
 8014834:	e018      	b.n	8014868 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014836:	7dfb      	ldrb	r3, [r7, #23]
 8014838:	3301      	adds	r3, #1
 801483a:	75fb      	strb	r3, [r7, #23]
 801483c:	7dfb      	ldrb	r3, [r7, #23]
 801483e:	2b09      	cmp	r3, #9
 8014840:	d9ca      	bls.n	80147d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	69b9      	ldr	r1, [r7, #24]
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f000 f822 	bl	8014890 <etharp_query>
 801484c:	4603      	mov	r3, r0
 801484e:	e00b      	b.n	8014868 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	68b9      	ldr	r1, [r7, #8]
 8014860:	68f8      	ldr	r0, [r7, #12]
 8014862:	f001 fdf7 	bl	8016454 <ethernet_output>
 8014866:	4603      	mov	r3, r0
}
 8014868:	4618      	mov	r0, r3
 801486a:	3720      	adds	r7, #32
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	08019a08 	.word	0x08019a08
 8014874:	08019b58 	.word	0x08019b58
 8014878:	08019a80 	.word	0x08019a80
 801487c:	08019ba8 	.word	0x08019ba8
 8014880:	08019b48 	.word	0x08019b48
 8014884:	0801afc4 	.word	0x0801afc4
 8014888:	24000224 	.word	0x24000224
 801488c:	24000134 	.word	0x24000134

08014890 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b08c      	sub	sp, #48	; 0x30
 8014894:	af02      	add	r7, sp, #8
 8014896:	60f8      	str	r0, [r7, #12]
 8014898:	60b9      	str	r1, [r7, #8]
 801489a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3326      	adds	r3, #38	; 0x26
 80148a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80148a2:	23ff      	movs	r3, #255	; 0xff
 80148a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80148a8:	2300      	movs	r3, #0
 80148aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	68f9      	ldr	r1, [r7, #12]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f000 fe34 	bl	8015520 <ip4_addr_isbroadcast_u32>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d10c      	bne.n	80148d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80148c6:	2be0      	cmp	r3, #224	; 0xe0
 80148c8:	d006      	beq.n	80148d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d003      	beq.n	80148d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d102      	bne.n	80148de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80148d8:	f06f 030f 	mvn.w	r3, #15
 80148dc:	e101      	b.n	8014ae2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80148de:	68fa      	ldr	r2, [r7, #12]
 80148e0:	2101      	movs	r1, #1
 80148e2:	68b8      	ldr	r0, [r7, #8]
 80148e4:	f7ff fb60 	bl	8013fa8 <etharp_find_entry>
 80148e8:	4603      	mov	r3, r0
 80148ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80148ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	da02      	bge.n	80148fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80148f4:	8a7b      	ldrh	r3, [r7, #18]
 80148f6:	b25b      	sxtb	r3, r3
 80148f8:	e0f3      	b.n	8014ae2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80148fa:	8a7b      	ldrh	r3, [r7, #18]
 80148fc:	2b7e      	cmp	r3, #126	; 0x7e
 80148fe:	d906      	bls.n	801490e <etharp_query+0x7e>
 8014900:	4b7a      	ldr	r3, [pc, #488]	; (8014aec <etharp_query+0x25c>)
 8014902:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014906:	497a      	ldr	r1, [pc, #488]	; (8014af0 <etharp_query+0x260>)
 8014908:	487a      	ldr	r0, [pc, #488]	; (8014af4 <etharp_query+0x264>)
 801490a:	f001 fe33 	bl	8016574 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801490e:	8a7b      	ldrh	r3, [r7, #18]
 8014910:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014912:	7c7a      	ldrb	r2, [r7, #17]
 8014914:	4978      	ldr	r1, [pc, #480]	; (8014af8 <etharp_query+0x268>)
 8014916:	4613      	mov	r3, r2
 8014918:	005b      	lsls	r3, r3, #1
 801491a:	4413      	add	r3, r2
 801491c:	00db      	lsls	r3, r3, #3
 801491e:	440b      	add	r3, r1
 8014920:	3314      	adds	r3, #20
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d115      	bne.n	8014954 <etharp_query+0xc4>
    is_new_entry = 1;
 8014928:	2301      	movs	r3, #1
 801492a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801492c:	7c7a      	ldrb	r2, [r7, #17]
 801492e:	4972      	ldr	r1, [pc, #456]	; (8014af8 <etharp_query+0x268>)
 8014930:	4613      	mov	r3, r2
 8014932:	005b      	lsls	r3, r3, #1
 8014934:	4413      	add	r3, r2
 8014936:	00db      	lsls	r3, r3, #3
 8014938:	440b      	add	r3, r1
 801493a:	3314      	adds	r3, #20
 801493c:	2201      	movs	r2, #1
 801493e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014940:	7c7a      	ldrb	r2, [r7, #17]
 8014942:	496d      	ldr	r1, [pc, #436]	; (8014af8 <etharp_query+0x268>)
 8014944:	4613      	mov	r3, r2
 8014946:	005b      	lsls	r3, r3, #1
 8014948:	4413      	add	r3, r2
 801494a:	00db      	lsls	r3, r3, #3
 801494c:	440b      	add	r3, r1
 801494e:	3308      	adds	r3, #8
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014954:	7c7a      	ldrb	r2, [r7, #17]
 8014956:	4968      	ldr	r1, [pc, #416]	; (8014af8 <etharp_query+0x268>)
 8014958:	4613      	mov	r3, r2
 801495a:	005b      	lsls	r3, r3, #1
 801495c:	4413      	add	r3, r2
 801495e:	00db      	lsls	r3, r3, #3
 8014960:	440b      	add	r3, r1
 8014962:	3314      	adds	r3, #20
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	2b01      	cmp	r3, #1
 8014968:	d011      	beq.n	801498e <etharp_query+0xfe>
 801496a:	7c7a      	ldrb	r2, [r7, #17]
 801496c:	4962      	ldr	r1, [pc, #392]	; (8014af8 <etharp_query+0x268>)
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	3314      	adds	r3, #20
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	2b01      	cmp	r3, #1
 801497e:	d806      	bhi.n	801498e <etharp_query+0xfe>
 8014980:	4b5a      	ldr	r3, [pc, #360]	; (8014aec <etharp_query+0x25c>)
 8014982:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014986:	495d      	ldr	r1, [pc, #372]	; (8014afc <etharp_query+0x26c>)
 8014988:	485a      	ldr	r0, [pc, #360]	; (8014af4 <etharp_query+0x264>)
 801498a:	f001 fdf3 	bl	8016574 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d102      	bne.n	801499a <etharp_query+0x10a>
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d10c      	bne.n	80149b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801499a:	68b9      	ldr	r1, [r7, #8]
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f000 f963 	bl	8014c68 <etharp_request>
 80149a2:	4603      	mov	r3, r0
 80149a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d102      	bne.n	80149b4 <etharp_query+0x124>
      return result;
 80149ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80149b2:	e096      	b.n	8014ae2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d106      	bne.n	80149c8 <etharp_query+0x138>
 80149ba:	4b4c      	ldr	r3, [pc, #304]	; (8014aec <etharp_query+0x25c>)
 80149bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80149c0:	494f      	ldr	r1, [pc, #316]	; (8014b00 <etharp_query+0x270>)
 80149c2:	484c      	ldr	r0, [pc, #304]	; (8014af4 <etharp_query+0x264>)
 80149c4:	f001 fdd6 	bl	8016574 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80149c8:	7c7a      	ldrb	r2, [r7, #17]
 80149ca:	494b      	ldr	r1, [pc, #300]	; (8014af8 <etharp_query+0x268>)
 80149cc:	4613      	mov	r3, r2
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	440b      	add	r3, r1
 80149d6:	3314      	adds	r3, #20
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d917      	bls.n	8014a0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80149de:	4a49      	ldr	r2, [pc, #292]	; (8014b04 <etharp_query+0x274>)
 80149e0:	7c7b      	ldrb	r3, [r7, #17]
 80149e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80149e4:	7c7a      	ldrb	r2, [r7, #17]
 80149e6:	4613      	mov	r3, r2
 80149e8:	005b      	lsls	r3, r3, #1
 80149ea:	4413      	add	r3, r2
 80149ec:	00db      	lsls	r3, r3, #3
 80149ee:	3308      	adds	r3, #8
 80149f0:	4a41      	ldr	r2, [pc, #260]	; (8014af8 <etharp_query+0x268>)
 80149f2:	4413      	add	r3, r2
 80149f4:	3304      	adds	r3, #4
 80149f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80149fa:	9200      	str	r2, [sp, #0]
 80149fc:	697a      	ldr	r2, [r7, #20]
 80149fe:	6879      	ldr	r1, [r7, #4]
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f001 fd27 	bl	8016454 <ethernet_output>
 8014a06:	4603      	mov	r3, r0
 8014a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a0c:	e067      	b.n	8014ade <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a0e:	7c7a      	ldrb	r2, [r7, #17]
 8014a10:	4939      	ldr	r1, [pc, #228]	; (8014af8 <etharp_query+0x268>)
 8014a12:	4613      	mov	r3, r2
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	4413      	add	r3, r2
 8014a18:	00db      	lsls	r3, r3, #3
 8014a1a:	440b      	add	r3, r1
 8014a1c:	3314      	adds	r3, #20
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d15c      	bne.n	8014ade <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a2c:	e01c      	b.n	8014a68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	895a      	ldrh	r2, [r3, #10]
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	891b      	ldrh	r3, [r3, #8]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d10a      	bne.n	8014a50 <etharp_query+0x1c0>
 8014a3a:	69fb      	ldr	r3, [r7, #28]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d006      	beq.n	8014a50 <etharp_query+0x1c0>
 8014a42:	4b2a      	ldr	r3, [pc, #168]	; (8014aec <etharp_query+0x25c>)
 8014a44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014a48:	492f      	ldr	r1, [pc, #188]	; (8014b08 <etharp_query+0x278>)
 8014a4a:	482a      	ldr	r0, [pc, #168]	; (8014af4 <etharp_query+0x264>)
 8014a4c:	f001 fd92 	bl	8016574 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	7b1b      	ldrb	r3, [r3, #12]
 8014a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d002      	beq.n	8014a62 <etharp_query+0x1d2>
        copy_needed = 1;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	61bb      	str	r3, [r7, #24]
        break;
 8014a60:	e005      	b.n	8014a6e <etharp_query+0x1de>
      }
      p = p->next;
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d1df      	bne.n	8014a2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d007      	beq.n	8014a84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014a7a:	200e      	movs	r0, #14
 8014a7c:	f7f8 fe34 	bl	800d6e8 <pbuf_clone>
 8014a80:	61f8      	str	r0, [r7, #28]
 8014a82:	e004      	b.n	8014a8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014a88:	69f8      	ldr	r0, [r7, #28]
 8014a8a:	f7f8 fc61 	bl	800d350 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d021      	beq.n	8014ad8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014a94:	7c7a      	ldrb	r2, [r7, #17]
 8014a96:	4918      	ldr	r1, [pc, #96]	; (8014af8 <etharp_query+0x268>)
 8014a98:	4613      	mov	r3, r2
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d00a      	beq.n	8014abe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014aa8:	7c7a      	ldrb	r2, [r7, #17]
 8014aaa:	4913      	ldr	r1, [pc, #76]	; (8014af8 <etharp_query+0x268>)
 8014aac:	4613      	mov	r3, r2
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	4413      	add	r3, r2
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	440b      	add	r3, r1
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7f8 fba9 	bl	800d210 <pbuf_free>
      }
      arp_table[i].q = p;
 8014abe:	7c7a      	ldrb	r2, [r7, #17]
 8014ac0:	490d      	ldr	r1, [pc, #52]	; (8014af8 <etharp_query+0x268>)
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	005b      	lsls	r3, r3, #1
 8014ac6:	4413      	add	r3, r2
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	440b      	add	r3, r1
 8014acc:	69fa      	ldr	r2, [r7, #28]
 8014ace:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ad6:	e002      	b.n	8014ade <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014ad8:	23ff      	movs	r3, #255	; 0xff
 8014ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3728      	adds	r7, #40	; 0x28
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	08019a08 	.word	0x08019a08
 8014af0:	08019bb4 	.word	0x08019bb4
 8014af4:	08019a80 	.word	0x08019a80
 8014af8:	24000134 	.word	0x24000134
 8014afc:	08019bc4 	.word	0x08019bc4
 8014b00:	08019ba8 	.word	0x08019ba8
 8014b04:	24000224 	.word	0x24000224
 8014b08:	08019bec 	.word	0x08019bec

08014b0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b08a      	sub	sp, #40	; 0x28
 8014b10:	af02      	add	r7, sp, #8
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
 8014b18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d106      	bne.n	8014b32 <etharp_raw+0x26>
 8014b24:	4b3a      	ldr	r3, [pc, #232]	; (8014c10 <etharp_raw+0x104>)
 8014b26:	f240 4257 	movw	r2, #1111	; 0x457
 8014b2a:	493a      	ldr	r1, [pc, #232]	; (8014c14 <etharp_raw+0x108>)
 8014b2c:	483a      	ldr	r0, [pc, #232]	; (8014c18 <etharp_raw+0x10c>)
 8014b2e:	f001 fd21 	bl	8016574 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014b32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b36:	211c      	movs	r1, #28
 8014b38:	200e      	movs	r0, #14
 8014b3a:	f7f8 f885 	bl	800cc48 <pbuf_alloc>
 8014b3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d102      	bne.n	8014b4c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014b46:	f04f 33ff 	mov.w	r3, #4294967295
 8014b4a:	e05d      	b.n	8014c08 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014b4c:	69bb      	ldr	r3, [r7, #24]
 8014b4e:	895b      	ldrh	r3, [r3, #10]
 8014b50:	2b1b      	cmp	r3, #27
 8014b52:	d806      	bhi.n	8014b62 <etharp_raw+0x56>
 8014b54:	4b2e      	ldr	r3, [pc, #184]	; (8014c10 <etharp_raw+0x104>)
 8014b56:	f240 4262 	movw	r2, #1122	; 0x462
 8014b5a:	4930      	ldr	r1, [pc, #192]	; (8014c1c <etharp_raw+0x110>)
 8014b5c:	482e      	ldr	r0, [pc, #184]	; (8014c18 <etharp_raw+0x10c>)
 8014b5e:	f001 fd09 	bl	8016574 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014b62:	69bb      	ldr	r3, [r7, #24]
 8014b64:	685b      	ldr	r3, [r3, #4]
 8014b66:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014b68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f6 ff3a 	bl	800b9e4 <lwip_htons>
 8014b70:	4603      	mov	r3, r0
 8014b72:	461a      	mov	r2, r3
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014b7e:	2b06      	cmp	r3, #6
 8014b80:	d006      	beq.n	8014b90 <etharp_raw+0x84>
 8014b82:	4b23      	ldr	r3, [pc, #140]	; (8014c10 <etharp_raw+0x104>)
 8014b84:	f240 4269 	movw	r2, #1129	; 0x469
 8014b88:	4925      	ldr	r1, [pc, #148]	; (8014c20 <etharp_raw+0x114>)
 8014b8a:	4823      	ldr	r0, [pc, #140]	; (8014c18 <etharp_raw+0x10c>)
 8014b8c:	f001 fcf2 	bl	8016574 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	3308      	adds	r3, #8
 8014b94:	2206      	movs	r2, #6
 8014b96:	6839      	ldr	r1, [r7, #0]
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f001 fcd5 	bl	8016548 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	3312      	adds	r3, #18
 8014ba2:	2206      	movs	r2, #6
 8014ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f001 fcce 	bl	8016548 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	330e      	adds	r3, #14
 8014bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014bb2:	6812      	ldr	r2, [r2, #0]
 8014bb4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	3318      	adds	r3, #24
 8014bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bbc:	6812      	ldr	r2, [r2, #0]
 8014bbe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014bc0:	697b      	ldr	r3, [r7, #20]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	701a      	strb	r2, [r3, #0]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f042 0201 	orr.w	r2, r2, #1
 8014bcc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	f042 0208 	orr.w	r2, r2, #8
 8014bd6:	709a      	strb	r2, [r3, #2]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	2206      	movs	r2, #6
 8014be0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	2204      	movs	r2, #4
 8014be6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014be8:	f640 0306 	movw	r3, #2054	; 0x806
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	69b9      	ldr	r1, [r7, #24]
 8014bf4:	68f8      	ldr	r0, [r7, #12]
 8014bf6:	f001 fc2d 	bl	8016454 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014bfa:	69b8      	ldr	r0, [r7, #24]
 8014bfc:	f7f8 fb08 	bl	800d210 <pbuf_free>
  p = NULL;
 8014c00:	2300      	movs	r3, #0
 8014c02:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3720      	adds	r7, #32
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	08019a08 	.word	0x08019a08
 8014c14:	08019b58 	.word	0x08019b58
 8014c18:	08019a80 	.word	0x08019a80
 8014c1c:	08019c08 	.word	0x08019c08
 8014c20:	08019c3c 	.word	0x08019c3c

08014c24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b088      	sub	sp, #32
 8014c28:	af04      	add	r7, sp, #16
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c40:	2201      	movs	r2, #1
 8014c42:	9203      	str	r2, [sp, #12]
 8014c44:	68ba      	ldr	r2, [r7, #8]
 8014c46:	9202      	str	r2, [sp, #8]
 8014c48:	4a06      	ldr	r2, [pc, #24]	; (8014c64 <etharp_request_dst+0x40>)
 8014c4a:	9201      	str	r2, [sp, #4]
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	4603      	mov	r3, r0
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	68f8      	ldr	r0, [r7, #12]
 8014c54:	f7ff ff5a 	bl	8014b0c <etharp_raw>
 8014c58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3710      	adds	r7, #16
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	0801afcc 	.word	0x0801afcc

08014c68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014c72:	4a05      	ldr	r2, [pc, #20]	; (8014c88 <etharp_request+0x20>)
 8014c74:	6839      	ldr	r1, [r7, #0]
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	f7ff ffd4 	bl	8014c24 <etharp_request_dst>
 8014c7c:	4603      	mov	r3, r0
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3708      	adds	r7, #8
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	0801afc4 	.word	0x0801afc4

08014c8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b08e      	sub	sp, #56	; 0x38
 8014c90:	af04      	add	r7, sp, #16
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014c96:	4b87      	ldr	r3, [pc, #540]	; (8014eb4 <icmp_input+0x228>)
 8014c98:	689b      	ldr	r3, [r3, #8]
 8014c9a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	f003 030f 	and.w	r3, r3, #15
 8014ca4:	b2db      	uxtb	r3, r3
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cae:	2b13      	cmp	r3, #19
 8014cb0:	f240 80e8 	bls.w	8014e84 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	895b      	ldrh	r3, [r3, #10]
 8014cb8:	2b03      	cmp	r3, #3
 8014cba:	f240 80e5 	bls.w	8014e88 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014cc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	f000 80d2 	beq.w	8014e76 <icmp_input+0x1ea>
 8014cd2:	2b08      	cmp	r3, #8
 8014cd4:	f040 80d2 	bne.w	8014e7c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014cd8:	4b77      	ldr	r3, [pc, #476]	; (8014eb8 <icmp_input+0x22c>)
 8014cda:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014cdc:	4b75      	ldr	r3, [pc, #468]	; (8014eb4 <icmp_input+0x228>)
 8014cde:	695b      	ldr	r3, [r3, #20]
 8014ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ce4:	2be0      	cmp	r3, #224	; 0xe0
 8014ce6:	f000 80d6 	beq.w	8014e96 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014cea:	4b72      	ldr	r3, [pc, #456]	; (8014eb4 <icmp_input+0x228>)
 8014cec:	695b      	ldr	r3, [r3, #20]
 8014cee:	4a71      	ldr	r2, [pc, #452]	; (8014eb4 <icmp_input+0x228>)
 8014cf0:	6812      	ldr	r2, [r2, #0]
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f000 fc13 	bl	8015520 <ip4_addr_isbroadcast_u32>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f040 80cc 	bne.w	8014e9a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	891b      	ldrh	r3, [r3, #8]
 8014d06:	2b07      	cmp	r3, #7
 8014d08:	f240 80c0 	bls.w	8014e8c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7f6 ff06 	bl	800bb1e <inet_chksum_pbuf>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d003      	beq.n	8014d20 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f7f8 fa79 	bl	800d210 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014d1e:	e0c5      	b.n	8014eac <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d22:	330e      	adds	r3, #14
 8014d24:	4619      	mov	r1, r3
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7f8 f9dc 	bl	800d0e4 <pbuf_add_header>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d04b      	beq.n	8014dca <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	891a      	ldrh	r2, [r3, #8]
 8014d36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d38:	4413      	add	r3, r2
 8014d3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	891b      	ldrh	r3, [r3, #8]
 8014d40:	8b7a      	ldrh	r2, [r7, #26]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	f0c0 80ab 	bcc.w	8014e9e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014d48:	8b7b      	ldrh	r3, [r7, #26]
 8014d4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d4e:	4619      	mov	r1, r3
 8014d50:	200e      	movs	r0, #14
 8014d52:	f7f7 ff79 	bl	800cc48 <pbuf_alloc>
 8014d56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f000 80a1 	beq.w	8014ea2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	895b      	ldrh	r3, [r3, #10]
 8014d64:	461a      	mov	r2, r3
 8014d66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d68:	3308      	adds	r3, #8
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d203      	bcs.n	8014d76 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014d6e:	6978      	ldr	r0, [r7, #20]
 8014d70:	f7f8 fa4e 	bl	800d210 <pbuf_free>
          goto icmperr;
 8014d74:	e096      	b.n	8014ea4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f001 fbe2 	bl	8016548 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014d84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d86:	4619      	mov	r1, r3
 8014d88:	6978      	ldr	r0, [r7, #20]
 8014d8a:	f7f8 f9bb 	bl	800d104 <pbuf_remove_header>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d009      	beq.n	8014da8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014d94:	4b49      	ldr	r3, [pc, #292]	; (8014ebc <icmp_input+0x230>)
 8014d96:	22b6      	movs	r2, #182	; 0xb6
 8014d98:	4949      	ldr	r1, [pc, #292]	; (8014ec0 <icmp_input+0x234>)
 8014d9a:	484a      	ldr	r0, [pc, #296]	; (8014ec4 <icmp_input+0x238>)
 8014d9c:	f001 fbea 	bl	8016574 <iprintf>
          pbuf_free(r);
 8014da0:	6978      	ldr	r0, [r7, #20]
 8014da2:	f7f8 fa35 	bl	800d210 <pbuf_free>
          goto icmperr;
 8014da6:	e07d      	b.n	8014ea4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014da8:	6879      	ldr	r1, [r7, #4]
 8014daa:	6978      	ldr	r0, [r7, #20]
 8014dac:	f7f8 fb58 	bl	800d460 <pbuf_copy>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d003      	beq.n	8014dbe <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014db6:	6978      	ldr	r0, [r7, #20]
 8014db8:	f7f8 fa2a 	bl	800d210 <pbuf_free>
          goto icmperr;
 8014dbc:	e072      	b.n	8014ea4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f7f8 fa26 	bl	800d210 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	607b      	str	r3, [r7, #4]
 8014dc8:	e00f      	b.n	8014dea <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dcc:	330e      	adds	r3, #14
 8014dce:	4619      	mov	r1, r3
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f7f8 f997 	bl	800d104 <pbuf_remove_header>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d006      	beq.n	8014dea <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014ddc:	4b37      	ldr	r3, [pc, #220]	; (8014ebc <icmp_input+0x230>)
 8014dde:	22c7      	movs	r2, #199	; 0xc7
 8014de0:	4939      	ldr	r1, [pc, #228]	; (8014ec8 <icmp_input+0x23c>)
 8014de2:	4838      	ldr	r0, [pc, #224]	; (8014ec4 <icmp_input+0x238>)
 8014de4:	f001 fbc6 	bl	8016574 <iprintf>
          goto icmperr;
 8014de8:	e05c      	b.n	8014ea4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014df0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014df2:	4619      	mov	r1, r3
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f7f8 f975 	bl	800d0e4 <pbuf_add_header>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d13c      	bne.n	8014e7a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014e0e:	4b29      	ldr	r3, [pc, #164]	; (8014eb4 <icmp_input+0x228>)
 8014e10:	691a      	ldr	r2, [r3, #16]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	885b      	ldrh	r3, [r3, #2]
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d907      	bls.n	8014e3a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	885b      	ldrh	r3, [r3, #2]
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	3309      	adds	r3, #9
 8014e32:	b29a      	uxth	r2, r3
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	805a      	strh	r2, [r3, #2]
 8014e38:	e006      	b.n	8014e48 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	885b      	ldrh	r3, [r3, #2]
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	3308      	adds	r3, #8
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	22ff      	movs	r2, #255	; 0xff
 8014e4c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2200      	movs	r2, #0
 8014e52:	729a      	strb	r2, [r3, #10]
 8014e54:	2200      	movs	r2, #0
 8014e56:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	9302      	str	r3, [sp, #8]
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	2300      	movs	r3, #0
 8014e62:	9300      	str	r3, [sp, #0]
 8014e64:	23ff      	movs	r3, #255	; 0xff
 8014e66:	2200      	movs	r2, #0
 8014e68:	69f9      	ldr	r1, [r7, #28]
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 fa80 	bl	8015370 <ip4_output_if>
 8014e70:	4603      	mov	r3, r0
 8014e72:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014e74:	e001      	b.n	8014e7a <icmp_input+0x1ee>
      break;
 8014e76:	bf00      	nop
 8014e78:	e000      	b.n	8014e7c <icmp_input+0x1f0>
      break;
 8014e7a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7f8 f9c7 	bl	800d210 <pbuf_free>
  return;
 8014e82:	e013      	b.n	8014eac <icmp_input+0x220>
    goto lenerr;
 8014e84:	bf00      	nop
 8014e86:	e002      	b.n	8014e8e <icmp_input+0x202>
    goto lenerr;
 8014e88:	bf00      	nop
 8014e8a:	e000      	b.n	8014e8e <icmp_input+0x202>
        goto lenerr;
 8014e8c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7f8 f9be 	bl	800d210 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014e94:	e00a      	b.n	8014eac <icmp_input+0x220>
        goto icmperr;
 8014e96:	bf00      	nop
 8014e98:	e004      	b.n	8014ea4 <icmp_input+0x218>
        goto icmperr;
 8014e9a:	bf00      	nop
 8014e9c:	e002      	b.n	8014ea4 <icmp_input+0x218>
          goto icmperr;
 8014e9e:	bf00      	nop
 8014ea0:	e000      	b.n	8014ea4 <icmp_input+0x218>
          goto icmperr;
 8014ea2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f7f8 f9b3 	bl	800d210 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014eaa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014eac:	3728      	adds	r7, #40	; 0x28
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	24000724 	.word	0x24000724
 8014eb8:	24000738 	.word	0x24000738
 8014ebc:	08019c80 	.word	0x08019c80
 8014ec0:	08019cb8 	.word	0x08019cb8
 8014ec4:	08019cf0 	.word	0x08019cf0
 8014ec8:	08019d18 	.word	0x08019d18

08014ecc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014ed8:	78fb      	ldrb	r3, [r7, #3]
 8014eda:	461a      	mov	r2, r3
 8014edc:	2103      	movs	r1, #3
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f000 f814 	bl	8014f0c <icmp_send_response>
}
 8014ee4:	bf00      	nop
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014ef8:	78fb      	ldrb	r3, [r7, #3]
 8014efa:	461a      	mov	r2, r3
 8014efc:	210b      	movs	r1, #11
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 f804 	bl	8014f0c <icmp_send_response>
}
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b08c      	sub	sp, #48	; 0x30
 8014f10:	af04      	add	r7, sp, #16
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	460b      	mov	r3, r1
 8014f16:	70fb      	strb	r3, [r7, #3]
 8014f18:	4613      	mov	r3, r2
 8014f1a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014f1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f20:	2124      	movs	r1, #36	; 0x24
 8014f22:	2022      	movs	r0, #34	; 0x22
 8014f24:	f7f7 fe90 	bl	800cc48 <pbuf_alloc>
 8014f28:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d056      	beq.n	8014fde <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	895b      	ldrh	r3, [r3, #10]
 8014f34:	2b23      	cmp	r3, #35	; 0x23
 8014f36:	d806      	bhi.n	8014f46 <icmp_send_response+0x3a>
 8014f38:	4b2b      	ldr	r3, [pc, #172]	; (8014fe8 <icmp_send_response+0xdc>)
 8014f3a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014f3e:	492b      	ldr	r1, [pc, #172]	; (8014fec <icmp_send_response+0xe0>)
 8014f40:	482b      	ldr	r0, [pc, #172]	; (8014ff0 <icmp_send_response+0xe4>)
 8014f42:	f001 fb17 	bl	8016574 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014f4c:	69fb      	ldr	r3, [r7, #28]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	78fa      	ldrb	r2, [r7, #3]
 8014f56:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	78ba      	ldrb	r2, [r7, #2]
 8014f5c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014f5e:	697b      	ldr	r3, [r7, #20]
 8014f60:	2200      	movs	r2, #0
 8014f62:	711a      	strb	r2, [r3, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	719a      	strb	r2, [r3, #6]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014f72:	69fb      	ldr	r3, [r7, #28]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	f103 0008 	add.w	r0, r3, #8
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	221c      	movs	r2, #28
 8014f80:	4619      	mov	r1, r3
 8014f82:	f001 fae1 	bl	8016548 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014f86:	69bb      	ldr	r3, [r7, #24]
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014f8c:	f107 030c 	add.w	r3, r7, #12
 8014f90:	4618      	mov	r0, r3
 8014f92:	f000 f82f 	bl	8014ff4 <ip4_route>
 8014f96:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d01b      	beq.n	8014fd6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	709a      	strb	r2, [r3, #2]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	895b      	ldrh	r3, [r3, #10]
 8014fac:	4619      	mov	r1, r3
 8014fae:	6978      	ldr	r0, [r7, #20]
 8014fb0:	f7f6 fda3 	bl	800bafa <inet_chksum>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014fbc:	f107 020c 	add.w	r2, r7, #12
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	9302      	str	r3, [sp, #8]
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	9301      	str	r3, [sp, #4]
 8014fc8:	2300      	movs	r3, #0
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	23ff      	movs	r3, #255	; 0xff
 8014fce:	2100      	movs	r1, #0
 8014fd0:	69f8      	ldr	r0, [r7, #28]
 8014fd2:	f000 f9cd 	bl	8015370 <ip4_output_if>
  }
  pbuf_free(q);
 8014fd6:	69f8      	ldr	r0, [r7, #28]
 8014fd8:	f7f8 f91a 	bl	800d210 <pbuf_free>
 8014fdc:	e000      	b.n	8014fe0 <icmp_send_response+0xd4>
    return;
 8014fde:	bf00      	nop
}
 8014fe0:	3720      	adds	r7, #32
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	08019c80 	.word	0x08019c80
 8014fec:	08019d4c 	.word	0x08019d4c
 8014ff0:	08019cf0 	.word	0x08019cf0

08014ff4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b085      	sub	sp, #20
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014ffc:	4b33      	ldr	r3, [pc, #204]	; (80150cc <ip4_route+0xd8>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	60fb      	str	r3, [r7, #12]
 8015002:	e036      	b.n	8015072 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801500a:	f003 0301 	and.w	r3, r3, #1
 801500e:	b2db      	uxtb	r3, r3
 8015010:	2b00      	cmp	r3, #0
 8015012:	d02b      	beq.n	801506c <ip4_route+0x78>
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801501a:	089b      	lsrs	r3, r3, #2
 801501c:	f003 0301 	and.w	r3, r3, #1
 8015020:	b2db      	uxtb	r3, r3
 8015022:	2b00      	cmp	r3, #0
 8015024:	d022      	beq.n	801506c <ip4_route+0x78>
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	3304      	adds	r3, #4
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d01d      	beq.n	801506c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	3304      	adds	r3, #4
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	405a      	eors	r2, r3
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	3308      	adds	r3, #8
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	4013      	ands	r3, r2
 8015044:	2b00      	cmp	r3, #0
 8015046:	d101      	bne.n	801504c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	e038      	b.n	80150be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015052:	f003 0302 	and.w	r3, r3, #2
 8015056:	2b00      	cmp	r3, #0
 8015058:	d108      	bne.n	801506c <ip4_route+0x78>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	330c      	adds	r3, #12
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	429a      	cmp	r2, r3
 8015066:	d101      	bne.n	801506c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	e028      	b.n	80150be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	60fb      	str	r3, [r7, #12]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d1c5      	bne.n	8015004 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015078:	4b15      	ldr	r3, [pc, #84]	; (80150d0 <ip4_route+0xdc>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d01a      	beq.n	80150b6 <ip4_route+0xc2>
 8015080:	4b13      	ldr	r3, [pc, #76]	; (80150d0 <ip4_route+0xdc>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015088:	f003 0301 	and.w	r3, r3, #1
 801508c:	2b00      	cmp	r3, #0
 801508e:	d012      	beq.n	80150b6 <ip4_route+0xc2>
 8015090:	4b0f      	ldr	r3, [pc, #60]	; (80150d0 <ip4_route+0xdc>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015098:	f003 0304 	and.w	r3, r3, #4
 801509c:	2b00      	cmp	r3, #0
 801509e:	d00a      	beq.n	80150b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150a0:	4b0b      	ldr	r3, [pc, #44]	; (80150d0 <ip4_route+0xdc>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	3304      	adds	r3, #4
 80150a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d004      	beq.n	80150b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	2b7f      	cmp	r3, #127	; 0x7f
 80150b4:	d101      	bne.n	80150ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	e001      	b.n	80150be <ip4_route+0xca>
  }

  return netif_default;
 80150ba:	4b05      	ldr	r3, [pc, #20]	; (80150d0 <ip4_route+0xdc>)
 80150bc:	681b      	ldr	r3, [r3, #0]
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3714      	adds	r7, #20
 80150c2:	46bd      	mov	sp, r7
 80150c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c8:	4770      	bx	lr
 80150ca:	bf00      	nop
 80150cc:	24003604 	.word	0x24003604
 80150d0:	24003608 	.word	0x24003608

080150d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150e2:	f003 0301 	and.w	r3, r3, #1
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d016      	beq.n	801511a <ip4_input_accept+0x46>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	3304      	adds	r3, #4
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d011      	beq.n	801511a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80150f6:	4b0b      	ldr	r3, [pc, #44]	; (8015124 <ip4_input_accept+0x50>)
 80150f8:	695a      	ldr	r2, [r3, #20]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	3304      	adds	r3, #4
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	429a      	cmp	r2, r3
 8015102:	d008      	beq.n	8015116 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015104:	4b07      	ldr	r3, [pc, #28]	; (8015124 <ip4_input_accept+0x50>)
 8015106:	695b      	ldr	r3, [r3, #20]
 8015108:	6879      	ldr	r1, [r7, #4]
 801510a:	4618      	mov	r0, r3
 801510c:	f000 fa08 	bl	8015520 <ip4_addr_isbroadcast_u32>
 8015110:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015112:	2b00      	cmp	r3, #0
 8015114:	d001      	beq.n	801511a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015116:	2301      	movs	r3, #1
 8015118:	e000      	b.n	801511c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801511a:	2300      	movs	r3, #0
}
 801511c:	4618      	mov	r0, r3
 801511e:	3708      	adds	r7, #8
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	24000724 	.word	0x24000724

08015128 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b086      	sub	sp, #24
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
 8015130:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	091b      	lsrs	r3, r3, #4
 801513e:	b2db      	uxtb	r3, r3
 8015140:	2b04      	cmp	r3, #4
 8015142:	d004      	beq.n	801514e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7f8 f863 	bl	800d210 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801514a:	2300      	movs	r3, #0
 801514c:	e107      	b.n	801535e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	f003 030f 	and.w	r3, r3, #15
 8015156:	b2db      	uxtb	r3, r3
 8015158:	009b      	lsls	r3, r3, #2
 801515a:	b2db      	uxtb	r3, r3
 801515c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	885b      	ldrh	r3, [r3, #2]
 8015162:	b29b      	uxth	r3, r3
 8015164:	4618      	mov	r0, r3
 8015166:	f7f6 fc3d 	bl	800b9e4 <lwip_htons>
 801516a:	4603      	mov	r3, r0
 801516c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	891b      	ldrh	r3, [r3, #8]
 8015172:	89ba      	ldrh	r2, [r7, #12]
 8015174:	429a      	cmp	r2, r3
 8015176:	d204      	bcs.n	8015182 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015178:	89bb      	ldrh	r3, [r7, #12]
 801517a:	4619      	mov	r1, r3
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f7f7 fec1 	bl	800cf04 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	895b      	ldrh	r3, [r3, #10]
 8015186:	89fa      	ldrh	r2, [r7, #14]
 8015188:	429a      	cmp	r2, r3
 801518a:	d807      	bhi.n	801519c <ip4_input+0x74>
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	891b      	ldrh	r3, [r3, #8]
 8015190:	89ba      	ldrh	r2, [r7, #12]
 8015192:	429a      	cmp	r2, r3
 8015194:	d802      	bhi.n	801519c <ip4_input+0x74>
 8015196:	89fb      	ldrh	r3, [r7, #14]
 8015198:	2b13      	cmp	r3, #19
 801519a:	d804      	bhi.n	80151a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7f8 f837 	bl	800d210 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e0db      	b.n	801535e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	691b      	ldr	r3, [r3, #16]
 80151aa:	4a6f      	ldr	r2, [pc, #444]	; (8015368 <ip4_input+0x240>)
 80151ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	4a6d      	ldr	r2, [pc, #436]	; (8015368 <ip4_input+0x240>)
 80151b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151b6:	4b6c      	ldr	r3, [pc, #432]	; (8015368 <ip4_input+0x240>)
 80151b8:	695b      	ldr	r3, [r3, #20]
 80151ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151be:	2be0      	cmp	r3, #224	; 0xe0
 80151c0:	d112      	bne.n	80151e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151c8:	f003 0301 	and.w	r3, r3, #1
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d007      	beq.n	80151e2 <ip4_input+0xba>
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	3304      	adds	r3, #4
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d002      	beq.n	80151e2 <ip4_input+0xba>
      netif = inp;
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	613b      	str	r3, [r7, #16]
 80151e0:	e02a      	b.n	8015238 <ip4_input+0x110>
    } else {
      netif = NULL;
 80151e2:	2300      	movs	r3, #0
 80151e4:	613b      	str	r3, [r7, #16]
 80151e6:	e027      	b.n	8015238 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80151e8:	6838      	ldr	r0, [r7, #0]
 80151ea:	f7ff ff73 	bl	80150d4 <ip4_input_accept>
 80151ee:	4603      	mov	r3, r0
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d002      	beq.n	80151fa <ip4_input+0xd2>
      netif = inp;
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	613b      	str	r3, [r7, #16]
 80151f8:	e01e      	b.n	8015238 <ip4_input+0x110>
    } else {
      netif = NULL;
 80151fa:	2300      	movs	r3, #0
 80151fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80151fe:	4b5a      	ldr	r3, [pc, #360]	; (8015368 <ip4_input+0x240>)
 8015200:	695b      	ldr	r3, [r3, #20]
 8015202:	b2db      	uxtb	r3, r3
 8015204:	2b7f      	cmp	r3, #127	; 0x7f
 8015206:	d017      	beq.n	8015238 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015208:	4b58      	ldr	r3, [pc, #352]	; (801536c <ip4_input+0x244>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	613b      	str	r3, [r7, #16]
 801520e:	e00e      	b.n	801522e <ip4_input+0x106>
          if (netif == inp) {
 8015210:	693a      	ldr	r2, [r7, #16]
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	429a      	cmp	r2, r3
 8015216:	d006      	beq.n	8015226 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015218:	6938      	ldr	r0, [r7, #16]
 801521a:	f7ff ff5b 	bl	80150d4 <ip4_input_accept>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d108      	bne.n	8015236 <ip4_input+0x10e>
 8015224:	e000      	b.n	8015228 <ip4_input+0x100>
            continue;
 8015226:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	613b      	str	r3, [r7, #16]
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d1ed      	bne.n	8015210 <ip4_input+0xe8>
 8015234:	e000      	b.n	8015238 <ip4_input+0x110>
            break;
 8015236:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015238:	4b4b      	ldr	r3, [pc, #300]	; (8015368 <ip4_input+0x240>)
 801523a:	691b      	ldr	r3, [r3, #16]
 801523c:	6839      	ldr	r1, [r7, #0]
 801523e:	4618      	mov	r0, r3
 8015240:	f000 f96e 	bl	8015520 <ip4_addr_isbroadcast_u32>
 8015244:	4603      	mov	r3, r0
 8015246:	2b00      	cmp	r3, #0
 8015248:	d105      	bne.n	8015256 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801524a:	4b47      	ldr	r3, [pc, #284]	; (8015368 <ip4_input+0x240>)
 801524c:	691b      	ldr	r3, [r3, #16]
 801524e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015252:	2be0      	cmp	r3, #224	; 0xe0
 8015254:	d104      	bne.n	8015260 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	f7f7 ffda 	bl	800d210 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801525c:	2300      	movs	r3, #0
 801525e:	e07e      	b.n	801535e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d104      	bne.n	8015270 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f7f7 ffd2 	bl	800d210 <pbuf_free>
    return ERR_OK;
 801526c:	2300      	movs	r3, #0
 801526e:	e076      	b.n	801535e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	88db      	ldrh	r3, [r3, #6]
 8015274:	b29b      	uxth	r3, r3
 8015276:	461a      	mov	r2, r3
 8015278:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801527c:	4013      	ands	r3, r2
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00b      	beq.n	801529a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f000 fd24 	bl	8015cd0 <ip4_reass>
 8015288:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d101      	bne.n	8015294 <ip4_input+0x16c>
      return ERR_OK;
 8015290:	2300      	movs	r3, #0
 8015292:	e064      	b.n	801535e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801529a:	4a33      	ldr	r2, [pc, #204]	; (8015368 <ip4_input+0x240>)
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80152a0:	4a31      	ldr	r2, [pc, #196]	; (8015368 <ip4_input+0x240>)
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80152a6:	4a30      	ldr	r2, [pc, #192]	; (8015368 <ip4_input+0x240>)
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	f003 030f 	and.w	r3, r3, #15
 80152b4:	b2db      	uxtb	r3, r3
 80152b6:	009b      	lsls	r3, r3, #2
 80152b8:	b2db      	uxtb	r3, r3
 80152ba:	b29a      	uxth	r2, r3
 80152bc:	4b2a      	ldr	r3, [pc, #168]	; (8015368 <ip4_input+0x240>)
 80152be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80152c0:	89fb      	ldrh	r3, [r7, #14]
 80152c2:	4619      	mov	r1, r3
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f7f7 ff1d 	bl	800d104 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	7a5b      	ldrb	r3, [r3, #9]
 80152ce:	2b11      	cmp	r3, #17
 80152d0:	d006      	beq.n	80152e0 <ip4_input+0x1b8>
 80152d2:	2b11      	cmp	r3, #17
 80152d4:	dc13      	bgt.n	80152fe <ip4_input+0x1d6>
 80152d6:	2b01      	cmp	r3, #1
 80152d8:	d00c      	beq.n	80152f4 <ip4_input+0x1cc>
 80152da:	2b06      	cmp	r3, #6
 80152dc:	d005      	beq.n	80152ea <ip4_input+0x1c2>
 80152de:	e00e      	b.n	80152fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80152e0:	6839      	ldr	r1, [r7, #0]
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f7fe fc42 	bl	8013b6c <udp_input>
        break;
 80152e8:	e026      	b.n	8015338 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80152ea:	6839      	ldr	r1, [r7, #0]
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f7fa f867 	bl	800f3c0 <tcp_input>
        break;
 80152f2:	e021      	b.n	8015338 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80152f4:	6839      	ldr	r1, [r7, #0]
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f7ff fcc8 	bl	8014c8c <icmp_input>
        break;
 80152fc:	e01c      	b.n	8015338 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80152fe:	4b1a      	ldr	r3, [pc, #104]	; (8015368 <ip4_input+0x240>)
 8015300:	695b      	ldr	r3, [r3, #20]
 8015302:	6939      	ldr	r1, [r7, #16]
 8015304:	4618      	mov	r0, r3
 8015306:	f000 f90b 	bl	8015520 <ip4_addr_isbroadcast_u32>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d10f      	bne.n	8015330 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015310:	4b15      	ldr	r3, [pc, #84]	; (8015368 <ip4_input+0x240>)
 8015312:	695b      	ldr	r3, [r3, #20]
 8015314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015318:	2be0      	cmp	r3, #224	; 0xe0
 801531a:	d009      	beq.n	8015330 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801531c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015320:	4619      	mov	r1, r3
 8015322:	6878      	ldr	r0, [r7, #4]
 8015324:	f7f7 ff61 	bl	800d1ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015328:	2102      	movs	r1, #2
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f7ff fdce 	bl	8014ecc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7f7 ff6d 	bl	800d210 <pbuf_free>
        break;
 8015336:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015338:	4b0b      	ldr	r3, [pc, #44]	; (8015368 <ip4_input+0x240>)
 801533a:	2200      	movs	r2, #0
 801533c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801533e:	4b0a      	ldr	r3, [pc, #40]	; (8015368 <ip4_input+0x240>)
 8015340:	2200      	movs	r2, #0
 8015342:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015344:	4b08      	ldr	r3, [pc, #32]	; (8015368 <ip4_input+0x240>)
 8015346:	2200      	movs	r2, #0
 8015348:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801534a:	4b07      	ldr	r3, [pc, #28]	; (8015368 <ip4_input+0x240>)
 801534c:	2200      	movs	r2, #0
 801534e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015350:	4b05      	ldr	r3, [pc, #20]	; (8015368 <ip4_input+0x240>)
 8015352:	2200      	movs	r2, #0
 8015354:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015356:	4b04      	ldr	r3, [pc, #16]	; (8015368 <ip4_input+0x240>)
 8015358:	2200      	movs	r2, #0
 801535a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801535c:	2300      	movs	r3, #0
}
 801535e:	4618      	mov	r0, r3
 8015360:	3718      	adds	r7, #24
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	24000724 	.word	0x24000724
 801536c:	24003604 	.word	0x24003604

08015370 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b08a      	sub	sp, #40	; 0x28
 8015374:	af04      	add	r7, sp, #16
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	607a      	str	r2, [r7, #4]
 801537c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801537e:	68bb      	ldr	r3, [r7, #8]
 8015380:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d009      	beq.n	801539c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d003      	beq.n	8015396 <ip4_output_if+0x26>
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d102      	bne.n	801539c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015398:	3304      	adds	r3, #4
 801539a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801539c:	78fa      	ldrb	r2, [r7, #3]
 801539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a0:	9302      	str	r3, [sp, #8]
 80153a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80153a6:	9301      	str	r3, [sp, #4]
 80153a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80153ac:	9300      	str	r3, [sp, #0]
 80153ae:	4613      	mov	r3, r2
 80153b0:	687a      	ldr	r2, [r7, #4]
 80153b2:	6979      	ldr	r1, [r7, #20]
 80153b4:	68f8      	ldr	r0, [r7, #12]
 80153b6:	f000 f805 	bl	80153c4 <ip4_output_if_src>
 80153ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3718      	adds	r7, #24
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}

080153c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b088      	sub	sp, #32
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	607a      	str	r2, [r7, #4]
 80153d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	7b9b      	ldrb	r3, [r3, #14]
 80153d6:	2b01      	cmp	r3, #1
 80153d8:	d006      	beq.n	80153e8 <ip4_output_if_src+0x24>
 80153da:	4b4b      	ldr	r3, [pc, #300]	; (8015508 <ip4_output_if_src+0x144>)
 80153dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80153e0:	494a      	ldr	r1, [pc, #296]	; (801550c <ip4_output_if_src+0x148>)
 80153e2:	484b      	ldr	r0, [pc, #300]	; (8015510 <ip4_output_if_src+0x14c>)
 80153e4:	f001 f8c6 	bl	8016574 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d060      	beq.n	80154b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80153ee:	2314      	movs	r3, #20
 80153f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80153f2:	2114      	movs	r1, #20
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f7f7 fe75 	bl	800d0e4 <pbuf_add_header>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d002      	beq.n	8015406 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015400:	f06f 0301 	mvn.w	r3, #1
 8015404:	e07c      	b.n	8015500 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	895b      	ldrh	r3, [r3, #10]
 8015410:	2b13      	cmp	r3, #19
 8015412:	d806      	bhi.n	8015422 <ip4_output_if_src+0x5e>
 8015414:	4b3c      	ldr	r3, [pc, #240]	; (8015508 <ip4_output_if_src+0x144>)
 8015416:	f44f 7262 	mov.w	r2, #904	; 0x388
 801541a:	493e      	ldr	r1, [pc, #248]	; (8015514 <ip4_output_if_src+0x150>)
 801541c:	483c      	ldr	r0, [pc, #240]	; (8015510 <ip4_output_if_src+0x14c>)
 801541e:	f001 f8a9 	bl	8016574 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	78fa      	ldrb	r2, [r7, #3]
 8015426:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801542e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015438:	8b7b      	ldrh	r3, [r7, #26]
 801543a:	089b      	lsrs	r3, r3, #2
 801543c:	b29b      	uxth	r3, r3
 801543e:	b2db      	uxtb	r3, r3
 8015440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015444:	b2da      	uxtb	r2, r3
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015450:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	891b      	ldrh	r3, [r3, #8]
 8015456:	4618      	mov	r0, r3
 8015458:	f7f6 fac4 	bl	800b9e4 <lwip_htons>
 801545c:	4603      	mov	r3, r0
 801545e:	461a      	mov	r2, r3
 8015460:	69fb      	ldr	r3, [r7, #28]
 8015462:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	2200      	movs	r2, #0
 8015468:	719a      	strb	r2, [r3, #6]
 801546a:	2200      	movs	r2, #0
 801546c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801546e:	4b2a      	ldr	r3, [pc, #168]	; (8015518 <ip4_output_if_src+0x154>)
 8015470:	881b      	ldrh	r3, [r3, #0]
 8015472:	4618      	mov	r0, r3
 8015474:	f7f6 fab6 	bl	800b9e4 <lwip_htons>
 8015478:	4603      	mov	r3, r0
 801547a:	461a      	mov	r2, r3
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015480:	4b25      	ldr	r3, [pc, #148]	; (8015518 <ip4_output_if_src+0x154>)
 8015482:	881b      	ldrh	r3, [r3, #0]
 8015484:	3301      	adds	r3, #1
 8015486:	b29a      	uxth	r2, r3
 8015488:	4b23      	ldr	r3, [pc, #140]	; (8015518 <ip4_output_if_src+0x154>)
 801548a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d104      	bne.n	801549c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015492:	4b22      	ldr	r3, [pc, #136]	; (801551c <ip4_output_if_src+0x158>)
 8015494:	681a      	ldr	r2, [r3, #0]
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	60da      	str	r2, [r3, #12]
 801549a:	e003      	b.n	80154a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	69fb      	ldr	r3, [r7, #28]
 80154a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	2200      	movs	r2, #0
 80154a8:	729a      	strb	r2, [r3, #10]
 80154aa:	2200      	movs	r2, #0
 80154ac:	72da      	strb	r2, [r3, #11]
 80154ae:	e00f      	b.n	80154d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	895b      	ldrh	r3, [r3, #10]
 80154b4:	2b13      	cmp	r3, #19
 80154b6:	d802      	bhi.n	80154be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80154b8:	f06f 0301 	mvn.w	r3, #1
 80154bc:	e020      	b.n	8015500 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	691b      	ldr	r3, [r3, #16]
 80154c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80154ca:	f107 0314 	add.w	r3, r7, #20
 80154ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80154d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d00c      	beq.n	80154f2 <ip4_output_if_src+0x12e>
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	891a      	ldrh	r2, [r3, #8]
 80154dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d906      	bls.n	80154f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f000 fddf 	bl	80160ac <ip4_frag>
 80154ee:	4603      	mov	r3, r0
 80154f0:	e006      	b.n	8015500 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80154f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f4:	695b      	ldr	r3, [r3, #20]
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	68f9      	ldr	r1, [r7, #12]
 80154fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154fc:	4798      	blx	r3
 80154fe:	4603      	mov	r3, r0
}
 8015500:	4618      	mov	r0, r3
 8015502:	3720      	adds	r7, #32
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	08019d78 	.word	0x08019d78
 801550c:	08019dac 	.word	0x08019dac
 8015510:	08019db8 	.word	0x08019db8
 8015514:	08019de0 	.word	0x08019de0
 8015518:	24000226 	.word	0x24000226
 801551c:	0801afc0 	.word	0x0801afc0

08015520 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015520:	b480      	push	{r7}
 8015522:	b085      	sub	sp, #20
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015534:	d002      	beq.n	801553c <ip4_addr_isbroadcast_u32+0x1c>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d101      	bne.n	8015540 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801553c:	2301      	movs	r3, #1
 801553e:	e02a      	b.n	8015596 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015546:	f003 0302 	and.w	r3, r3, #2
 801554a:	2b00      	cmp	r3, #0
 801554c:	d101      	bne.n	8015552 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801554e:	2300      	movs	r3, #0
 8015550:	e021      	b.n	8015596 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	3304      	adds	r3, #4
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	429a      	cmp	r2, r3
 801555c:	d101      	bne.n	8015562 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801555e:	2300      	movs	r3, #0
 8015560:	e019      	b.n	8015596 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015562:	68fa      	ldr	r2, [r7, #12]
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	3304      	adds	r3, #4
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	405a      	eors	r2, r3
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	3308      	adds	r3, #8
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	4013      	ands	r3, r2
 8015574:	2b00      	cmp	r3, #0
 8015576:	d10d      	bne.n	8015594 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	3308      	adds	r3, #8
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	43da      	mvns	r2, r3
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	3308      	adds	r3, #8
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801558c:	429a      	cmp	r2, r3
 801558e:	d101      	bne.n	8015594 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015590:	2301      	movs	r3, #1
 8015592:	e000      	b.n	8015596 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015594:	2300      	movs	r3, #0
  }
}
 8015596:	4618      	mov	r0, r3
 8015598:	3714      	adds	r7, #20
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
	...

080155a4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b082      	sub	sp, #8
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80155ac:	2210      	movs	r2, #16
 80155ae:	4904      	ldr	r1, [pc, #16]	; (80155c0 <ip4addr_ntoa+0x1c>)
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 f807 	bl	80155c4 <ip4addr_ntoa_r>
 80155b6:	4603      	mov	r3, r0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	24000228 	.word	0x24000228

080155c4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b08d      	sub	sp, #52	; 0x34
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80155d0:	2300      	movs	r3, #0
 80155d2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80155de:	f107 0318 	add.w	r3, r7, #24
 80155e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80155e4:	2300      	movs	r3, #0
 80155e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155ea:	e059      	b.n	80156a0 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80155ec:	2300      	movs	r3, #0
 80155ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80155f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f4:	781a      	ldrb	r2, [r3, #0]
 80155f6:	4b33      	ldr	r3, [pc, #204]	; (80156c4 <ip4addr_ntoa_r+0x100>)
 80155f8:	fba3 1302 	umull	r1, r3, r3, r2
 80155fc:	08d9      	lsrs	r1, r3, #3
 80155fe:	460b      	mov	r3, r1
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	440b      	add	r3, r1
 8015604:	005b      	lsls	r3, r3, #1
 8015606:	1ad3      	subs	r3, r2, r3
 8015608:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	4a2d      	ldr	r2, [pc, #180]	; (80156c4 <ip4addr_ntoa_r+0x100>)
 8015610:	fba2 2303 	umull	r2, r3, r2, r3
 8015614:	08db      	lsrs	r3, r3, #3
 8015616:	b2da      	uxtb	r2, r3
 8015618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801561a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801561c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015620:	1c5a      	adds	r2, r3, #1
 8015622:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8015626:	4619      	mov	r1, r3
 8015628:	7ffb      	ldrb	r3, [r7, #31]
 801562a:	3330      	adds	r3, #48	; 0x30
 801562c:	b2da      	uxtb	r2, r3
 801562e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015632:	440b      	add	r3, r1
 8015634:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d1d8      	bne.n	80155f2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015640:	e012      	b.n	8015668 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8015642:	6a3b      	ldr	r3, [r7, #32]
 8015644:	1c5a      	adds	r2, r3, #1
 8015646:	623a      	str	r2, [r7, #32]
 8015648:	687a      	ldr	r2, [r7, #4]
 801564a:	429a      	cmp	r2, r3
 801564c:	dc01      	bgt.n	8015652 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801564e:	2300      	movs	r3, #0
 8015650:	e031      	b.n	80156b6 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8015652:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8015656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015658:	1c59      	adds	r1, r3, #1
 801565a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801565c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015660:	440a      	add	r2, r1
 8015662:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8015666:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8015668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801566c:	1e5a      	subs	r2, r3, #1
 801566e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8015672:	2b00      	cmp	r3, #0
 8015674:	d1e5      	bne.n	8015642 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8015676:	6a3b      	ldr	r3, [r7, #32]
 8015678:	1c5a      	adds	r2, r3, #1
 801567a:	623a      	str	r2, [r7, #32]
 801567c:	687a      	ldr	r2, [r7, #4]
 801567e:	429a      	cmp	r2, r3
 8015680:	dc01      	bgt.n	8015686 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8015682:	2300      	movs	r3, #0
 8015684:	e017      	b.n	80156b6 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8015686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015688:	1c5a      	adds	r2, r3, #1
 801568a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801568c:	222e      	movs	r2, #46	; 0x2e
 801568e:	701a      	strb	r2, [r3, #0]
    ap++;
 8015690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015692:	3301      	adds	r3, #1
 8015694:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8015696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801569a:	3301      	adds	r3, #1
 801569c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156a4:	2b03      	cmp	r3, #3
 80156a6:	d9a1      	bls.n	80155ec <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80156a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156aa:	3b01      	subs	r3, #1
 80156ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b0:	2200      	movs	r2, #0
 80156b2:	701a      	strb	r2, [r3, #0]
  return buf;
 80156b4:	68bb      	ldr	r3, [r7, #8]
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3734      	adds	r7, #52	; 0x34
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr
 80156c2:	bf00      	nop
 80156c4:	cccccccd 	.word	0xcccccccd

080156c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b084      	sub	sp, #16
 80156cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80156ce:	2300      	movs	r3, #0
 80156d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80156d2:	4b12      	ldr	r3, [pc, #72]	; (801571c <ip_reass_tmr+0x54>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80156d8:	e018      	b.n	801570c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	7fdb      	ldrb	r3, [r3, #31]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d00b      	beq.n	80156fa <ip_reass_tmr+0x32>
      r->timer--;
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	7fdb      	ldrb	r3, [r3, #31]
 80156e6:	3b01      	subs	r3, #1
 80156e8:	b2da      	uxtb	r2, r3
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	60fb      	str	r3, [r7, #12]
 80156f8:	e008      	b.n	801570c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015704:	68b9      	ldr	r1, [r7, #8]
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 f80a 	bl	8015720 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d1e3      	bne.n	80156da <ip_reass_tmr+0x12>
    }
  }
}
 8015712:	bf00      	nop
 8015714:	bf00      	nop
 8015716:	3710      	adds	r7, #16
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	24000238 	.word	0x24000238

08015720 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b088      	sub	sp, #32
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801572a:	2300      	movs	r3, #0
 801572c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801572e:	683a      	ldr	r2, [r7, #0]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	429a      	cmp	r2, r3
 8015734:	d105      	bne.n	8015742 <ip_reass_free_complete_datagram+0x22>
 8015736:	4b45      	ldr	r3, [pc, #276]	; (801584c <ip_reass_free_complete_datagram+0x12c>)
 8015738:	22ab      	movs	r2, #171	; 0xab
 801573a:	4945      	ldr	r1, [pc, #276]	; (8015850 <ip_reass_free_complete_datagram+0x130>)
 801573c:	4845      	ldr	r0, [pc, #276]	; (8015854 <ip_reass_free_complete_datagram+0x134>)
 801573e:	f000 ff19 	bl	8016574 <iprintf>
  if (prev != NULL) {
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d00a      	beq.n	801575e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	429a      	cmp	r2, r3
 8015750:	d005      	beq.n	801575e <ip_reass_free_complete_datagram+0x3e>
 8015752:	4b3e      	ldr	r3, [pc, #248]	; (801584c <ip_reass_free_complete_datagram+0x12c>)
 8015754:	22ad      	movs	r2, #173	; 0xad
 8015756:	4940      	ldr	r1, [pc, #256]	; (8015858 <ip_reass_free_complete_datagram+0x138>)
 8015758:	483e      	ldr	r0, [pc, #248]	; (8015854 <ip_reass_free_complete_datagram+0x134>)
 801575a:	f000 ff0b 	bl	8016574 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	889b      	ldrh	r3, [r3, #4]
 801576a:	b29b      	uxth	r3, r3
 801576c:	2b00      	cmp	r3, #0
 801576e:	d12a      	bne.n	80157c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	681a      	ldr	r2, [r3, #0]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801577e:	69bb      	ldr	r3, [r7, #24]
 8015780:	6858      	ldr	r0, [r3, #4]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	3308      	adds	r3, #8
 8015786:	2214      	movs	r2, #20
 8015788:	4619      	mov	r1, r3
 801578a:	f000 fedd 	bl	8016548 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801578e:	2101      	movs	r1, #1
 8015790:	69b8      	ldr	r0, [r7, #24]
 8015792:	f7ff fbab 	bl	8014eec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015796:	69b8      	ldr	r0, [r7, #24]
 8015798:	f7f7 fdc2 	bl	800d320 <pbuf_clen>
 801579c:	4603      	mov	r3, r0
 801579e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157a0:	8bfa      	ldrh	r2, [r7, #30]
 80157a2:	8a7b      	ldrh	r3, [r7, #18]
 80157a4:	4413      	add	r3, r2
 80157a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157aa:	db05      	blt.n	80157b8 <ip_reass_free_complete_datagram+0x98>
 80157ac:	4b27      	ldr	r3, [pc, #156]	; (801584c <ip_reass_free_complete_datagram+0x12c>)
 80157ae:	22bc      	movs	r2, #188	; 0xbc
 80157b0:	492a      	ldr	r1, [pc, #168]	; (801585c <ip_reass_free_complete_datagram+0x13c>)
 80157b2:	4828      	ldr	r0, [pc, #160]	; (8015854 <ip_reass_free_complete_datagram+0x134>)
 80157b4:	f000 fede 	bl	8016574 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80157b8:	8bfa      	ldrh	r2, [r7, #30]
 80157ba:	8a7b      	ldrh	r3, [r7, #18]
 80157bc:	4413      	add	r3, r2
 80157be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80157c0:	69b8      	ldr	r0, [r7, #24]
 80157c2:	f7f7 fd25 	bl	800d210 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80157cc:	e01f      	b.n	801580e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80157ce:	69bb      	ldr	r3, [r7, #24]
 80157d0:	685b      	ldr	r3, [r3, #4]
 80157d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80157d4:	69bb      	ldr	r3, [r7, #24]
 80157d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f7f7 fd9e 	bl	800d320 <pbuf_clen>
 80157e4:	4603      	mov	r3, r0
 80157e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157e8:	8bfa      	ldrh	r2, [r7, #30]
 80157ea:	8a7b      	ldrh	r3, [r7, #18]
 80157ec:	4413      	add	r3, r2
 80157ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157f2:	db05      	blt.n	8015800 <ip_reass_free_complete_datagram+0xe0>
 80157f4:	4b15      	ldr	r3, [pc, #84]	; (801584c <ip_reass_free_complete_datagram+0x12c>)
 80157f6:	22cc      	movs	r2, #204	; 0xcc
 80157f8:	4918      	ldr	r1, [pc, #96]	; (801585c <ip_reass_free_complete_datagram+0x13c>)
 80157fa:	4816      	ldr	r0, [pc, #88]	; (8015854 <ip_reass_free_complete_datagram+0x134>)
 80157fc:	f000 feba 	bl	8016574 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015800:	8bfa      	ldrh	r2, [r7, #30]
 8015802:	8a7b      	ldrh	r3, [r7, #18]
 8015804:	4413      	add	r3, r2
 8015806:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	f7f7 fd01 	bl	800d210 <pbuf_free>
  while (p != NULL) {
 801580e:	69bb      	ldr	r3, [r7, #24]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d1dc      	bne.n	80157ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 f8c2 	bl	80159a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801581c:	4b10      	ldr	r3, [pc, #64]	; (8015860 <ip_reass_free_complete_datagram+0x140>)
 801581e:	881b      	ldrh	r3, [r3, #0]
 8015820:	8bfa      	ldrh	r2, [r7, #30]
 8015822:	429a      	cmp	r2, r3
 8015824:	d905      	bls.n	8015832 <ip_reass_free_complete_datagram+0x112>
 8015826:	4b09      	ldr	r3, [pc, #36]	; (801584c <ip_reass_free_complete_datagram+0x12c>)
 8015828:	22d2      	movs	r2, #210	; 0xd2
 801582a:	490e      	ldr	r1, [pc, #56]	; (8015864 <ip_reass_free_complete_datagram+0x144>)
 801582c:	4809      	ldr	r0, [pc, #36]	; (8015854 <ip_reass_free_complete_datagram+0x134>)
 801582e:	f000 fea1 	bl	8016574 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015832:	4b0b      	ldr	r3, [pc, #44]	; (8015860 <ip_reass_free_complete_datagram+0x140>)
 8015834:	881a      	ldrh	r2, [r3, #0]
 8015836:	8bfb      	ldrh	r3, [r7, #30]
 8015838:	1ad3      	subs	r3, r2, r3
 801583a:	b29a      	uxth	r2, r3
 801583c:	4b08      	ldr	r3, [pc, #32]	; (8015860 <ip_reass_free_complete_datagram+0x140>)
 801583e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015840:	8bfb      	ldrh	r3, [r7, #30]
}
 8015842:	4618      	mov	r0, r3
 8015844:	3720      	adds	r7, #32
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
 801584a:	bf00      	nop
 801584c:	08019e10 	.word	0x08019e10
 8015850:	08019e4c 	.word	0x08019e4c
 8015854:	08019e58 	.word	0x08019e58
 8015858:	08019e80 	.word	0x08019e80
 801585c:	08019e94 	.word	0x08019e94
 8015860:	2400023c 	.word	0x2400023c
 8015864:	08019eb4 	.word	0x08019eb4

08015868 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b08a      	sub	sp, #40	; 0x28
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015872:	2300      	movs	r3, #0
 8015874:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015876:	2300      	movs	r3, #0
 8015878:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801587a:	2300      	movs	r3, #0
 801587c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801587e:	2300      	movs	r3, #0
 8015880:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015882:	2300      	movs	r3, #0
 8015884:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015886:	4b28      	ldr	r3, [pc, #160]	; (8015928 <ip_reass_remove_oldest_datagram+0xc0>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801588c:	e030      	b.n	80158f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015890:	695a      	ldr	r2, [r3, #20]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	68db      	ldr	r3, [r3, #12]
 8015896:	429a      	cmp	r2, r3
 8015898:	d10c      	bne.n	80158b4 <ip_reass_remove_oldest_datagram+0x4c>
 801589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801589c:	699a      	ldr	r2, [r3, #24]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	691b      	ldr	r3, [r3, #16]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d106      	bne.n	80158b4 <ip_reass_remove_oldest_datagram+0x4c>
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	899a      	ldrh	r2, [r3, #12]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	889b      	ldrh	r3, [r3, #4]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d014      	beq.n	80158de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	3301      	adds	r3, #1
 80158b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80158ba:	6a3b      	ldr	r3, [r7, #32]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d104      	bne.n	80158ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80158c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	61bb      	str	r3, [r7, #24]
 80158c8:	e009      	b.n	80158de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80158ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158cc:	7fda      	ldrb	r2, [r3, #31]
 80158ce:	6a3b      	ldr	r3, [r7, #32]
 80158d0:	7fdb      	ldrb	r3, [r3, #31]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d803      	bhi.n	80158de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80158d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80158de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80158e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80158ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80158f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d1cb      	bne.n	801588e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80158f6:	6a3b      	ldr	r3, [r7, #32]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d008      	beq.n	801590e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80158fc:	69b9      	ldr	r1, [r7, #24]
 80158fe:	6a38      	ldr	r0, [r7, #32]
 8015900:	f7ff ff0e 	bl	8015720 <ip_reass_free_complete_datagram>
 8015904:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015906:	697a      	ldr	r2, [r7, #20]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	4413      	add	r3, r2
 801590c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801590e:	697a      	ldr	r2, [r7, #20]
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	429a      	cmp	r2, r3
 8015914:	da02      	bge.n	801591c <ip_reass_remove_oldest_datagram+0xb4>
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	2b01      	cmp	r3, #1
 801591a:	dcac      	bgt.n	8015876 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801591c:	697b      	ldr	r3, [r7, #20]
}
 801591e:	4618      	mov	r0, r3
 8015920:	3728      	adds	r7, #40	; 0x28
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop
 8015928:	24000238 	.word	0x24000238

0801592c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015936:	2004      	movs	r0, #4
 8015938:	f7f6 fd84 	bl	800c444 <memp_malloc>
 801593c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d110      	bne.n	8015966 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015944:	6839      	ldr	r1, [r7, #0]
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f7ff ff8e 	bl	8015868 <ip_reass_remove_oldest_datagram>
 801594c:	4602      	mov	r2, r0
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	4293      	cmp	r3, r2
 8015952:	dc03      	bgt.n	801595c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015954:	2004      	movs	r0, #4
 8015956:	f7f6 fd75 	bl	800c444 <memp_malloc>
 801595a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d101      	bne.n	8015966 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015962:	2300      	movs	r3, #0
 8015964:	e016      	b.n	8015994 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015966:	2220      	movs	r2, #32
 8015968:	2100      	movs	r1, #0
 801596a:	68f8      	ldr	r0, [r7, #12]
 801596c:	f000 fdfa 	bl	8016564 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	220f      	movs	r2, #15
 8015974:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015976:	4b09      	ldr	r3, [pc, #36]	; (801599c <ip_reass_enqueue_new_datagram+0x70>)
 8015978:	681a      	ldr	r2, [r3, #0]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801597e:	4a07      	ldr	r2, [pc, #28]	; (801599c <ip_reass_enqueue_new_datagram+0x70>)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3308      	adds	r3, #8
 8015988:	2214      	movs	r2, #20
 801598a:	6879      	ldr	r1, [r7, #4]
 801598c:	4618      	mov	r0, r3
 801598e:	f000 fddb 	bl	8016548 <memcpy>
  return ipr;
 8015992:	68fb      	ldr	r3, [r7, #12]
}
 8015994:	4618      	mov	r0, r3
 8015996:	3710      	adds	r7, #16
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	24000238 	.word	0x24000238

080159a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80159aa:	4b10      	ldr	r3, [pc, #64]	; (80159ec <ip_reass_dequeue_datagram+0x4c>)
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d104      	bne.n	80159be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	4a0c      	ldr	r2, [pc, #48]	; (80159ec <ip_reass_dequeue_datagram+0x4c>)
 80159ba:	6013      	str	r3, [r2, #0]
 80159bc:	e00d      	b.n	80159da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d106      	bne.n	80159d2 <ip_reass_dequeue_datagram+0x32>
 80159c4:	4b0a      	ldr	r3, [pc, #40]	; (80159f0 <ip_reass_dequeue_datagram+0x50>)
 80159c6:	f240 1245 	movw	r2, #325	; 0x145
 80159ca:	490a      	ldr	r1, [pc, #40]	; (80159f4 <ip_reass_dequeue_datagram+0x54>)
 80159cc:	480a      	ldr	r0, [pc, #40]	; (80159f8 <ip_reass_dequeue_datagram+0x58>)
 80159ce:	f000 fdd1 	bl	8016574 <iprintf>
    prev->next = ipr->next;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80159da:	6879      	ldr	r1, [r7, #4]
 80159dc:	2004      	movs	r0, #4
 80159de:	f7f6 fda1 	bl	800c524 <memp_free>
}
 80159e2:	bf00      	nop
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	24000238 	.word	0x24000238
 80159f0:	08019e10 	.word	0x08019e10
 80159f4:	08019ed8 	.word	0x08019ed8
 80159f8:	08019e58 	.word	0x08019e58

080159fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b08c      	sub	sp, #48	; 0x30
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	685b      	ldr	r3, [r3, #4]
 8015a14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	885b      	ldrh	r3, [r3, #2]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7f5 ffe1 	bl	800b9e4 <lwip_htons>
 8015a22:	4603      	mov	r3, r0
 8015a24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	f003 030f 	and.w	r3, r3, #15
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015a34:	7e7b      	ldrb	r3, [r7, #25]
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	8b7a      	ldrh	r2, [r7, #26]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d202      	bcs.n	8015a44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a42:	e135      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015a44:	7e7b      	ldrb	r3, [r7, #25]
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	8b7a      	ldrh	r2, [r7, #26]
 8015a4a:	1ad3      	subs	r3, r2, r3
 8015a4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	88db      	ldrh	r3, [r3, #6]
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7f5 ffc5 	bl	800b9e4 <lwip_htons>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a60:	b29b      	uxth	r3, r3
 8015a62:	00db      	lsls	r3, r3, #3
 8015a64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6e:	2200      	movs	r2, #0
 8015a70:	701a      	strb	r2, [r3, #0]
 8015a72:	2200      	movs	r2, #0
 8015a74:	705a      	strb	r2, [r3, #1]
 8015a76:	2200      	movs	r2, #0
 8015a78:	709a      	strb	r2, [r3, #2]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a80:	8afa      	ldrh	r2, [r7, #22]
 8015a82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015a84:	8afa      	ldrh	r2, [r7, #22]
 8015a86:	8b7b      	ldrh	r3, [r7, #26]
 8015a88:	4413      	add	r3, r2
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a92:	88db      	ldrh	r3, [r3, #6]
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	8afa      	ldrh	r2, [r7, #22]
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	d902      	bls.n	8015aa2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa0:	e106      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8015aa8:	e068      	b.n	8015b7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aac:	685b      	ldr	r3, [r3, #4]
 8015aae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab2:	889b      	ldrh	r3, [r3, #4]
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	889b      	ldrh	r3, [r3, #4]
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	429a      	cmp	r2, r3
 8015abe:	d235      	bcs.n	8015b2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ac4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d020      	beq.n	8015b0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ace:	889b      	ldrh	r3, [r3, #4]
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad4:	88db      	ldrh	r3, [r3, #6]
 8015ad6:	b29b      	uxth	r3, r3
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d307      	bcc.n	8015aec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ade:	88db      	ldrh	r3, [r3, #6]
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	889b      	ldrh	r3, [r3, #4]
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d902      	bls.n	8015af2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015aec:	f04f 33ff 	mov.w	r3, #4294967295
 8015af0:	e0de      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afa:	88db      	ldrh	r3, [r3, #6]
 8015afc:	b29a      	uxth	r2, r3
 8015afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b00:	889b      	ldrh	r3, [r3, #4]
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d03d      	beq.n	8015b84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015b0c:	e03a      	b.n	8015b84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b10:	88db      	ldrh	r3, [r3, #6]
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	889b      	ldrh	r3, [r3, #4]
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d902      	bls.n	8015b24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b22:	e0c5      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	68ba      	ldr	r2, [r7, #8]
 8015b28:	605a      	str	r2, [r3, #4]
      break;
 8015b2a:	e02b      	b.n	8015b84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2e:	889b      	ldrh	r3, [r3, #4]
 8015b30:	b29a      	uxth	r2, r3
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	889b      	ldrh	r3, [r3, #4]
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d102      	bne.n	8015b42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b40:	e0b6      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b44:	889b      	ldrh	r3, [r3, #4]
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	88db      	ldrh	r3, [r3, #6]
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d202      	bcs.n	8015b58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b52:	f04f 33ff 	mov.w	r3, #4294967295
 8015b56:	e0ab      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d009      	beq.n	8015b72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b60:	88db      	ldrh	r3, [r3, #6]
 8015b62:	b29a      	uxth	r2, r3
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	889b      	ldrh	r3, [r3, #4]
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d001      	beq.n	8015b72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d193      	bne.n	8015aaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015b82:	e000      	b.n	8015b86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015b84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d12d      	bne.n	8015be8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d01c      	beq.n	8015bcc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b94:	88db      	ldrh	r3, [r3, #6]
 8015b96:	b29a      	uxth	r2, r3
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	889b      	ldrh	r3, [r3, #4]
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d906      	bls.n	8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015ba2:	4b45      	ldr	r3, [pc, #276]	; (8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ba4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015ba8:	4944      	ldr	r1, [pc, #272]	; (8015cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015baa:	4845      	ldr	r0, [pc, #276]	; (8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bac:	f000 fce2 	bl	8016574 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb2:	68ba      	ldr	r2, [r7, #8]
 8015bb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb8:	88db      	ldrh	r3, [r3, #6]
 8015bba:	b29a      	uxth	r2, r3
 8015bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bbe:	889b      	ldrh	r3, [r3, #4]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d010      	beq.n	8015be8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	623b      	str	r3, [r7, #32]
 8015bca:	e00d      	b.n	8015be8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	685b      	ldr	r3, [r3, #4]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d006      	beq.n	8015be2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015bd4:	4b38      	ldr	r3, [pc, #224]	; (8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015bd6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015bda:	493a      	ldr	r1, [pc, #232]	; (8015cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015bdc:	4838      	ldr	r0, [pc, #224]	; (8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bde:	f000 fcc9 	bl	8016574 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	68ba      	ldr	r2, [r7, #8]
 8015be6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d105      	bne.n	8015bfa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	7f9b      	ldrb	r3, [r3, #30]
 8015bf2:	f003 0301 	and.w	r3, r3, #1
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d059      	beq.n	8015cae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015bfa:	6a3b      	ldr	r3, [r7, #32]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d04f      	beq.n	8015ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d006      	beq.n	8015c16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	685b      	ldr	r3, [r3, #4]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	889b      	ldrh	r3, [r3, #4]
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d002      	beq.n	8015c1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015c16:	2300      	movs	r3, #0
 8015c18:	623b      	str	r3, [r7, #32]
 8015c1a:	e041      	b.n	8015ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c26:	e012      	b.n	8015c4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c30:	88db      	ldrh	r3, [r3, #6]
 8015c32:	b29a      	uxth	r2, r3
 8015c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c36:	889b      	ldrh	r3, [r3, #4]
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d002      	beq.n	8015c44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	623b      	str	r3, [r7, #32]
            break;
 8015c42:	e007      	b.n	8015c54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d1e9      	bne.n	8015c28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015c54:	6a3b      	ldr	r3, [r7, #32]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d022      	beq.n	8015ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d106      	bne.n	8015c70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015c62:	4b15      	ldr	r3, [pc, #84]	; (8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c64:	f240 12df 	movw	r2, #479	; 0x1df
 8015c68:	4917      	ldr	r1, [pc, #92]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c6a:	4815      	ldr	r0, [pc, #84]	; (8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c6c:	f000 fc82 	bl	8016574 <iprintf>
          LWIP_ASSERT("sanity check",
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d106      	bne.n	8015c8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015c7c:	4b0e      	ldr	r3, [pc, #56]	; (8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015c82:	4911      	ldr	r1, [pc, #68]	; (8015cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c84:	480e      	ldr	r0, [pc, #56]	; (8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c86:	f000 fc75 	bl	8016574 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d006      	beq.n	8015ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015c92:	4b09      	ldr	r3, [pc, #36]	; (8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c94:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015c98:	490c      	ldr	r1, [pc, #48]	; (8015ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015c9a:	4809      	ldr	r0, [pc, #36]	; (8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c9c:	f000 fc6a 	bl	8016574 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015ca0:	6a3b      	ldr	r3, [r7, #32]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	bf14      	ite	ne
 8015ca6:	2301      	movne	r3, #1
 8015ca8:	2300      	moveq	r3, #0
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	e000      	b.n	8015cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3730      	adds	r7, #48	; 0x30
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	08019e10 	.word	0x08019e10
 8015cbc:	08019ef4 	.word	0x08019ef4
 8015cc0:	08019e58 	.word	0x08019e58
 8015cc4:	08019f14 	.word	0x08019f14
 8015cc8:	08019f4c 	.word	0x08019f4c
 8015ccc:	08019f5c 	.word	0x08019f5c

08015cd0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b08e      	sub	sp, #56	; 0x38
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	f003 030f 	and.w	r3, r3, #15
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	009b      	lsls	r3, r3, #2
 8015cea:	b2db      	uxtb	r3, r3
 8015cec:	2b14      	cmp	r3, #20
 8015cee:	f040 8167 	bne.w	8015fc0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf4:	88db      	ldrh	r3, [r3, #6]
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7f5 fe73 	bl	800b9e4 <lwip_htons>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	00db      	lsls	r3, r3, #3
 8015d08:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0c:	885b      	ldrh	r3, [r3, #2]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7f5 fe67 	bl	800b9e4 <lwip_htons>
 8015d16:	4603      	mov	r3, r0
 8015d18:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	f003 030f 	and.w	r3, r3, #15
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d32:	429a      	cmp	r2, r3
 8015d34:	f0c0 8146 	bcc.w	8015fc4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d44:	6878      	ldr	r0, [r7, #4]
 8015d46:	f7f7 faeb 	bl	800d320 <pbuf_clen>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015d4e:	4b9f      	ldr	r3, [pc, #636]	; (8015fcc <ip4_reass+0x2fc>)
 8015d50:	881b      	ldrh	r3, [r3, #0]
 8015d52:	461a      	mov	r2, r3
 8015d54:	8c3b      	ldrh	r3, [r7, #32]
 8015d56:	4413      	add	r3, r2
 8015d58:	2b0a      	cmp	r3, #10
 8015d5a:	dd10      	ble.n	8015d7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d5c:	8c3b      	ldrh	r3, [r7, #32]
 8015d5e:	4619      	mov	r1, r3
 8015d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d62:	f7ff fd81 	bl	8015868 <ip_reass_remove_oldest_datagram>
 8015d66:	4603      	mov	r3, r0
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	f000 812d 	beq.w	8015fc8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015d6e:	4b97      	ldr	r3, [pc, #604]	; (8015fcc <ip4_reass+0x2fc>)
 8015d70:	881b      	ldrh	r3, [r3, #0]
 8015d72:	461a      	mov	r2, r3
 8015d74:	8c3b      	ldrh	r3, [r7, #32]
 8015d76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d78:	2b0a      	cmp	r3, #10
 8015d7a:	f300 8125 	bgt.w	8015fc8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d7e:	4b94      	ldr	r3, [pc, #592]	; (8015fd0 <ip4_reass+0x300>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	633b      	str	r3, [r7, #48]	; 0x30
 8015d84:	e015      	b.n	8015db2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d88:	695a      	ldr	r2, [r3, #20]
 8015d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d8c:	68db      	ldr	r3, [r3, #12]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d10c      	bne.n	8015dac <ip4_reass+0xdc>
 8015d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d94:	699a      	ldr	r2, [r3, #24]
 8015d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d98:	691b      	ldr	r3, [r3, #16]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d106      	bne.n	8015dac <ip4_reass+0xdc>
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da0:	899a      	ldrh	r2, [r3, #12]
 8015da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da4:	889b      	ldrh	r3, [r3, #4]
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d006      	beq.n	8015dba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	633b      	str	r3, [r7, #48]	; 0x30
 8015db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d1e6      	bne.n	8015d86 <ip4_reass+0xb6>
 8015db8:	e000      	b.n	8015dbc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015dba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d109      	bne.n	8015dd6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015dc2:	8c3b      	ldrh	r3, [r7, #32]
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dc8:	f7ff fdb0 	bl	801592c <ip_reass_enqueue_new_datagram>
 8015dcc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d11c      	bne.n	8015e0e <ip4_reass+0x13e>
      goto nullreturn;
 8015dd4:	e109      	b.n	8015fea <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd8:	88db      	ldrh	r3, [r3, #6]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f5 fe01 	bl	800b9e4 <lwip_htons>
 8015de2:	4603      	mov	r3, r0
 8015de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d110      	bne.n	8015e0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dee:	89db      	ldrh	r3, [r3, #14]
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f5 fdf7 	bl	800b9e4 <lwip_htons>
 8015df6:	4603      	mov	r3, r0
 8015df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d006      	beq.n	8015e0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e02:	3308      	adds	r3, #8
 8015e04:	2214      	movs	r2, #20
 8015e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f000 fb9d 	bl	8016548 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e10:	88db      	ldrh	r3, [r3, #6]
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	f003 0320 	and.w	r3, r3, #32
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	bf0c      	ite	eq
 8015e1c:	2301      	moveq	r3, #1
 8015e1e:	2300      	movne	r3, #0
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d00e      	beq.n	8015e48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e2e:	4413      	add	r3, r2
 8015e30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015e32:	8b7a      	ldrh	r2, [r7, #26]
 8015e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e36:	429a      	cmp	r2, r3
 8015e38:	f0c0 80a0 	bcc.w	8015f7c <ip4_reass+0x2ac>
 8015e3c:	8b7b      	ldrh	r3, [r7, #26]
 8015e3e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015e42:	4293      	cmp	r3, r2
 8015e44:	f200 809a 	bhi.w	8015f7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e48:	69fa      	ldr	r2, [r7, #28]
 8015e4a:	6879      	ldr	r1, [r7, #4]
 8015e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e4e:	f7ff fdd5 	bl	80159fc <ip_reass_chain_frag_into_datagram_and_validate>
 8015e52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e5a:	f000 8091 	beq.w	8015f80 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015e5e:	4b5b      	ldr	r3, [pc, #364]	; (8015fcc <ip4_reass+0x2fc>)
 8015e60:	881a      	ldrh	r2, [r3, #0]
 8015e62:	8c3b      	ldrh	r3, [r7, #32]
 8015e64:	4413      	add	r3, r2
 8015e66:	b29a      	uxth	r2, r3
 8015e68:	4b58      	ldr	r3, [pc, #352]	; (8015fcc <ip4_reass+0x2fc>)
 8015e6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d00d      	beq.n	8015e8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e76:	4413      	add	r3, r2
 8015e78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7c:	8a7a      	ldrh	r2, [r7, #18]
 8015e7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e82:	7f9b      	ldrb	r3, [r3, #30]
 8015e84:	f043 0301 	orr.w	r3, r3, #1
 8015e88:	b2da      	uxtb	r2, r3
 8015e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	2b01      	cmp	r3, #1
 8015e92:	d171      	bne.n	8015f78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e96:	8b9b      	ldrh	r3, [r3, #28]
 8015e98:	3314      	adds	r3, #20
 8015e9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	685b      	ldr	r3, [r3, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	685b      	ldr	r3, [r3, #4]
 8015eac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb0:	3308      	adds	r3, #8
 8015eb2:	2214      	movs	r2, #20
 8015eb4:	4619      	mov	r1, r3
 8015eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eb8:	f000 fb46 	bl	8016548 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015ebc:	8a3b      	ldrh	r3, [r7, #16]
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7f5 fd90 	bl	800b9e4 <lwip_htons>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ece:	2200      	movs	r2, #0
 8015ed0:	719a      	strb	r2, [r3, #6]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed8:	2200      	movs	r2, #0
 8015eda:	729a      	strb	r2, [r3, #10]
 8015edc:	2200      	movs	r2, #0
 8015ede:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015ee6:	e00d      	b.n	8015f04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015eee:	2114      	movs	r1, #20
 8015ef0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015ef2:	f7f7 f907 	bl	800d104 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015ef6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f7f7 fa4b 	bl	800d394 <pbuf_cat>
      r = iprh->next_pbuf;
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d1ee      	bne.n	8015ee8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015f0a:	4b31      	ldr	r3, [pc, #196]	; (8015fd0 <ip4_reass+0x300>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d102      	bne.n	8015f1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015f14:	2300      	movs	r3, #0
 8015f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f18:	e010      	b.n	8015f3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f1a:	4b2d      	ldr	r3, [pc, #180]	; (8015fd0 <ip4_reass+0x300>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f20:	e007      	b.n	8015f32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	d006      	beq.n	8015f3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1f4      	bne.n	8015f22 <ip4_reass+0x252>
 8015f38:	e000      	b.n	8015f3c <ip4_reass+0x26c>
          break;
 8015f3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f40:	f7ff fd2e 	bl	80159a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7f7 f9eb 	bl	800d320 <pbuf_clen>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015f4e:	4b1f      	ldr	r3, [pc, #124]	; (8015fcc <ip4_reass+0x2fc>)
 8015f50:	881b      	ldrh	r3, [r3, #0]
 8015f52:	8c3a      	ldrh	r2, [r7, #32]
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d906      	bls.n	8015f66 <ip4_reass+0x296>
 8015f58:	4b1e      	ldr	r3, [pc, #120]	; (8015fd4 <ip4_reass+0x304>)
 8015f5a:	f240 229b 	movw	r2, #667	; 0x29b
 8015f5e:	491e      	ldr	r1, [pc, #120]	; (8015fd8 <ip4_reass+0x308>)
 8015f60:	481e      	ldr	r0, [pc, #120]	; (8015fdc <ip4_reass+0x30c>)
 8015f62:	f000 fb07 	bl	8016574 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015f66:	4b19      	ldr	r3, [pc, #100]	; (8015fcc <ip4_reass+0x2fc>)
 8015f68:	881a      	ldrh	r2, [r3, #0]
 8015f6a:	8c3b      	ldrh	r3, [r7, #32]
 8015f6c:	1ad3      	subs	r3, r2, r3
 8015f6e:	b29a      	uxth	r2, r3
 8015f70:	4b16      	ldr	r3, [pc, #88]	; (8015fcc <ip4_reass+0x2fc>)
 8015f72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	e03c      	b.n	8015ff2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	e03a      	b.n	8015ff2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015f7c:	bf00      	nop
 8015f7e:	e000      	b.n	8015f82 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015f80:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d106      	bne.n	8015f96 <ip4_reass+0x2c6>
 8015f88:	4b12      	ldr	r3, [pc, #72]	; (8015fd4 <ip4_reass+0x304>)
 8015f8a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015f8e:	4914      	ldr	r1, [pc, #80]	; (8015fe0 <ip4_reass+0x310>)
 8015f90:	4812      	ldr	r0, [pc, #72]	; (8015fdc <ip4_reass+0x30c>)
 8015f92:	f000 faef 	bl	8016574 <iprintf>
  if (ipr->p == NULL) {
 8015f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d124      	bne.n	8015fe8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015f9e:	4b0c      	ldr	r3, [pc, #48]	; (8015fd0 <ip4_reass+0x300>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	d006      	beq.n	8015fb6 <ip4_reass+0x2e6>
 8015fa8:	4b0a      	ldr	r3, [pc, #40]	; (8015fd4 <ip4_reass+0x304>)
 8015faa:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015fae:	490d      	ldr	r1, [pc, #52]	; (8015fe4 <ip4_reass+0x314>)
 8015fb0:	480a      	ldr	r0, [pc, #40]	; (8015fdc <ip4_reass+0x30c>)
 8015fb2:	f000 fadf 	bl	8016574 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fba:	f7ff fcf1 	bl	80159a0 <ip_reass_dequeue_datagram>
 8015fbe:	e014      	b.n	8015fea <ip4_reass+0x31a>
    goto nullreturn;
 8015fc0:	bf00      	nop
 8015fc2:	e012      	b.n	8015fea <ip4_reass+0x31a>
    goto nullreturn;
 8015fc4:	bf00      	nop
 8015fc6:	e010      	b.n	8015fea <ip4_reass+0x31a>
      goto nullreturn;
 8015fc8:	bf00      	nop
 8015fca:	e00e      	b.n	8015fea <ip4_reass+0x31a>
 8015fcc:	2400023c 	.word	0x2400023c
 8015fd0:	24000238 	.word	0x24000238
 8015fd4:	08019e10 	.word	0x08019e10
 8015fd8:	08019f80 	.word	0x08019f80
 8015fdc:	08019e58 	.word	0x08019e58
 8015fe0:	08019f9c 	.word	0x08019f9c
 8015fe4:	08019fa8 	.word	0x08019fa8
  }

nullreturn:
 8015fe8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7f7 f910 	bl	800d210 <pbuf_free>
  return NULL;
 8015ff0:	2300      	movs	r3, #0
}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	3738      	adds	r7, #56	; 0x38
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}
 8015ffa:	bf00      	nop

08015ffc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016000:	2005      	movs	r0, #5
 8016002:	f7f6 fa1f 	bl	800c444 <memp_malloc>
 8016006:	4603      	mov	r3, r0
}
 8016008:	4618      	mov	r0, r3
 801600a:	bd80      	pop	{r7, pc}

0801600c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d106      	bne.n	8016028 <ip_frag_free_pbuf_custom_ref+0x1c>
 801601a:	4b07      	ldr	r3, [pc, #28]	; (8016038 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801601c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016020:	4906      	ldr	r1, [pc, #24]	; (801603c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016022:	4807      	ldr	r0, [pc, #28]	; (8016040 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016024:	f000 faa6 	bl	8016574 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016028:	6879      	ldr	r1, [r7, #4]
 801602a:	2005      	movs	r0, #5
 801602c:	f7f6 fa7a 	bl	800c524 <memp_free>
}
 8016030:	bf00      	nop
 8016032:	3708      	adds	r7, #8
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	08019e10 	.word	0x08019e10
 801603c:	08019fc8 	.word	0x08019fc8
 8016040:	08019e58 	.word	0x08019e58

08016044 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b084      	sub	sp, #16
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d106      	bne.n	8016064 <ipfrag_free_pbuf_custom+0x20>
 8016056:	4b11      	ldr	r3, [pc, #68]	; (801609c <ipfrag_free_pbuf_custom+0x58>)
 8016058:	f240 22ce 	movw	r2, #718	; 0x2ce
 801605c:	4910      	ldr	r1, [pc, #64]	; (80160a0 <ipfrag_free_pbuf_custom+0x5c>)
 801605e:	4811      	ldr	r0, [pc, #68]	; (80160a4 <ipfrag_free_pbuf_custom+0x60>)
 8016060:	f000 fa88 	bl	8016574 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016064:	68fa      	ldr	r2, [r7, #12]
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	429a      	cmp	r2, r3
 801606a:	d006      	beq.n	801607a <ipfrag_free_pbuf_custom+0x36>
 801606c:	4b0b      	ldr	r3, [pc, #44]	; (801609c <ipfrag_free_pbuf_custom+0x58>)
 801606e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016072:	490d      	ldr	r1, [pc, #52]	; (80160a8 <ipfrag_free_pbuf_custom+0x64>)
 8016074:	480b      	ldr	r0, [pc, #44]	; (80160a4 <ipfrag_free_pbuf_custom+0x60>)
 8016076:	f000 fa7d 	bl	8016574 <iprintf>
  if (pcr->original != NULL) {
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	695b      	ldr	r3, [r3, #20]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d004      	beq.n	801608c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	695b      	ldr	r3, [r3, #20]
 8016086:	4618      	mov	r0, r3
 8016088:	f7f7 f8c2 	bl	800d210 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f7ff ffbd 	bl	801600c <ip_frag_free_pbuf_custom_ref>
}
 8016092:	bf00      	nop
 8016094:	3710      	adds	r7, #16
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	08019e10 	.word	0x08019e10
 80160a0:	08019fd4 	.word	0x08019fd4
 80160a4:	08019e58 	.word	0x08019e58
 80160a8:	08019fe0 	.word	0x08019fe0

080160ac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b094      	sub	sp, #80	; 0x50
 80160b0:	af02      	add	r7, sp, #8
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80160b8:	2300      	movs	r3, #0
 80160ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80160c2:	3b14      	subs	r3, #20
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	da00      	bge.n	80160ca <ip4_frag+0x1e>
 80160c8:	3307      	adds	r3, #7
 80160ca:	10db      	asrs	r3, r3, #3
 80160cc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80160ce:	2314      	movs	r3, #20
 80160d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80160d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160da:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80160dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	f003 030f 	and.w	r3, r3, #15
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	009b      	lsls	r3, r3, #2
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b14      	cmp	r3, #20
 80160ec:	d002      	beq.n	80160f4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80160ee:	f06f 0305 	mvn.w	r3, #5
 80160f2:	e110      	b.n	8016316 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	895b      	ldrh	r3, [r3, #10]
 80160f8:	2b13      	cmp	r3, #19
 80160fa:	d809      	bhi.n	8016110 <ip4_frag+0x64>
 80160fc:	4b88      	ldr	r3, [pc, #544]	; (8016320 <ip4_frag+0x274>)
 80160fe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016102:	4988      	ldr	r1, [pc, #544]	; (8016324 <ip4_frag+0x278>)
 8016104:	4888      	ldr	r0, [pc, #544]	; (8016328 <ip4_frag+0x27c>)
 8016106:	f000 fa35 	bl	8016574 <iprintf>
 801610a:	f06f 0305 	mvn.w	r3, #5
 801610e:	e102      	b.n	8016316 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016112:	88db      	ldrh	r3, [r3, #6]
 8016114:	b29b      	uxth	r3, r3
 8016116:	4618      	mov	r0, r3
 8016118:	f7f5 fc64 	bl	800b9e4 <lwip_htons>
 801611c:	4603      	mov	r3, r0
 801611e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016120:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801612a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801612c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016130:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	891b      	ldrh	r3, [r3, #8]
 8016136:	3b14      	subs	r3, #20
 8016138:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801613c:	e0e1      	b.n	8016302 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801613e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016140:	00db      	lsls	r3, r3, #3
 8016142:	b29b      	uxth	r3, r3
 8016144:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016148:	4293      	cmp	r3, r2
 801614a:	bf28      	it	cs
 801614c:	4613      	movcs	r3, r2
 801614e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016150:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016154:	2114      	movs	r1, #20
 8016156:	200e      	movs	r0, #14
 8016158:	f7f6 fd76 	bl	800cc48 <pbuf_alloc>
 801615c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016160:	2b00      	cmp	r3, #0
 8016162:	f000 80d5 	beq.w	8016310 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016168:	895b      	ldrh	r3, [r3, #10]
 801616a:	2b13      	cmp	r3, #19
 801616c:	d806      	bhi.n	801617c <ip4_frag+0xd0>
 801616e:	4b6c      	ldr	r3, [pc, #432]	; (8016320 <ip4_frag+0x274>)
 8016170:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016174:	496d      	ldr	r1, [pc, #436]	; (801632c <ip4_frag+0x280>)
 8016176:	486c      	ldr	r0, [pc, #432]	; (8016328 <ip4_frag+0x27c>)
 8016178:	f000 f9fc 	bl	8016574 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	2214      	movs	r2, #20
 8016182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016184:	4618      	mov	r0, r3
 8016186:	f000 f9df 	bl	8016548 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016190:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016192:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016196:	e064      	b.n	8016262 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	895a      	ldrh	r2, [r3, #10]
 801619c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801619e:	1ad3      	subs	r3, r2, r3
 80161a0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	895b      	ldrh	r3, [r3, #10]
 80161a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d906      	bls.n	80161ba <ip4_frag+0x10e>
 80161ac:	4b5c      	ldr	r3, [pc, #368]	; (8016320 <ip4_frag+0x274>)
 80161ae:	f240 322d 	movw	r2, #813	; 0x32d
 80161b2:	495f      	ldr	r1, [pc, #380]	; (8016330 <ip4_frag+0x284>)
 80161b4:	485c      	ldr	r0, [pc, #368]	; (8016328 <ip4_frag+0x27c>)
 80161b6:	f000 f9dd 	bl	8016574 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80161ba:	8bfa      	ldrh	r2, [r7, #30]
 80161bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80161c0:	4293      	cmp	r3, r2
 80161c2:	bf28      	it	cs
 80161c4:	4613      	movcs	r3, r2
 80161c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80161ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d105      	bne.n	80161de <ip4_frag+0x132>
        poff = 0;
 80161d2:	2300      	movs	r3, #0
 80161d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	60fb      	str	r3, [r7, #12]
        continue;
 80161dc:	e041      	b.n	8016262 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80161de:	f7ff ff0d 	bl	8015ffc <ip_frag_alloc_pbuf_custom_ref>
 80161e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80161e4:	69bb      	ldr	r3, [r7, #24]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d103      	bne.n	80161f2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80161ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161ec:	f7f7 f810 	bl	800d210 <pbuf_free>
        goto memerr;
 80161f0:	e08f      	b.n	8016312 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80161f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80161f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161fa:	4413      	add	r3, r2
 80161fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016200:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016204:	9201      	str	r2, [sp, #4]
 8016206:	9300      	str	r3, [sp, #0]
 8016208:	4603      	mov	r3, r0
 801620a:	2241      	movs	r2, #65	; 0x41
 801620c:	2000      	movs	r0, #0
 801620e:	f7f6 fe45 	bl	800ce9c <pbuf_alloced_custom>
 8016212:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d106      	bne.n	8016228 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801621a:	69b8      	ldr	r0, [r7, #24]
 801621c:	f7ff fef6 	bl	801600c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016222:	f7f6 fff5 	bl	800d210 <pbuf_free>
        goto memerr;
 8016226:	e074      	b.n	8016312 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016228:	68f8      	ldr	r0, [r7, #12]
 801622a:	f7f7 f891 	bl	800d350 <pbuf_ref>
      pcr->original = p;
 801622e:	69bb      	ldr	r3, [r7, #24]
 8016230:	68fa      	ldr	r2, [r7, #12]
 8016232:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016234:	69bb      	ldr	r3, [r7, #24]
 8016236:	4a3f      	ldr	r2, [pc, #252]	; (8016334 <ip4_frag+0x288>)
 8016238:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801623a:	6979      	ldr	r1, [r7, #20]
 801623c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801623e:	f7f7 f8a9 	bl	800d394 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016242:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016246:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016250:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016254:	2b00      	cmp	r3, #0
 8016256:	d004      	beq.n	8016262 <ip4_frag+0x1b6>
        poff = 0;
 8016258:	2300      	movs	r3, #0
 801625a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016262:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016266:	2b00      	cmp	r3, #0
 8016268:	d196      	bne.n	8016198 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801626a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801626c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016270:	4413      	add	r3, r2
 8016272:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016274:	68bb      	ldr	r3, [r7, #8]
 8016276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016278:	f1a3 0213 	sub.w	r2, r3, #19
 801627c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016280:	429a      	cmp	r2, r3
 8016282:	bfcc      	ite	gt
 8016284:	2301      	movgt	r3, #1
 8016286:	2300      	movle	r3, #0
 8016288:	b2db      	uxtb	r3, r3
 801628a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801628c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016294:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016296:	6a3b      	ldr	r3, [r7, #32]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d002      	beq.n	80162a2 <ip4_frag+0x1f6>
 801629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d003      	beq.n	80162aa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80162a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80162a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80162aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f5 fb99 	bl	800b9e4 <lwip_htons>
 80162b2:	4603      	mov	r3, r0
 80162b4:	461a      	mov	r2, r3
 80162b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80162ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162bc:	3314      	adds	r3, #20
 80162be:	b29b      	uxth	r3, r3
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7f5 fb8f 	bl	800b9e4 <lwip_htons>
 80162c6:	4603      	mov	r3, r0
 80162c8:	461a      	mov	r2, r3
 80162ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80162ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d0:	2200      	movs	r2, #0
 80162d2:	729a      	strb	r2, [r3, #10]
 80162d4:	2200      	movs	r2, #0
 80162d6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	695b      	ldr	r3, [r3, #20]
 80162dc:	687a      	ldr	r2, [r7, #4]
 80162de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162e0:	68b8      	ldr	r0, [r7, #8]
 80162e2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80162e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162e6:	f7f6 ff93 	bl	800d210 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80162ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80162f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80162fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162fc:	4413      	add	r3, r2
 80162fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016302:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016306:	2b00      	cmp	r3, #0
 8016308:	f47f af19 	bne.w	801613e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801630c:	2300      	movs	r3, #0
 801630e:	e002      	b.n	8016316 <ip4_frag+0x26a>
      goto memerr;
 8016310:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016316:	4618      	mov	r0, r3
 8016318:	3748      	adds	r7, #72	; 0x48
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}
 801631e:	bf00      	nop
 8016320:	08019e10 	.word	0x08019e10
 8016324:	08019fec 	.word	0x08019fec
 8016328:	08019e58 	.word	0x08019e58
 801632c:	0801a008 	.word	0x0801a008
 8016330:	0801a028 	.word	0x0801a028
 8016334:	08016045 	.word	0x08016045

08016338 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b086      	sub	sp, #24
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016342:	230e      	movs	r3, #14
 8016344:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	895b      	ldrh	r3, [r3, #10]
 801634a:	2b0e      	cmp	r3, #14
 801634c:	d96e      	bls.n	801642c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	7bdb      	ldrb	r3, [r3, #15]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d106      	bne.n	8016364 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801635c:	3301      	adds	r3, #1
 801635e:	b2da      	uxtb	r2, r3
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801636a:	693b      	ldr	r3, [r7, #16]
 801636c:	7b1a      	ldrb	r2, [r3, #12]
 801636e:	7b5b      	ldrb	r3, [r3, #13]
 8016370:	021b      	lsls	r3, r3, #8
 8016372:	4313      	orrs	r3, r2
 8016374:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	f003 0301 	and.w	r3, r3, #1
 801637e:	2b00      	cmp	r3, #0
 8016380:	d023      	beq.n	80163ca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	2b01      	cmp	r3, #1
 8016388:	d10f      	bne.n	80163aa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801638a:	693b      	ldr	r3, [r7, #16]
 801638c:	785b      	ldrb	r3, [r3, #1]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d11b      	bne.n	80163ca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016396:	2b5e      	cmp	r3, #94	; 0x5e
 8016398:	d117      	bne.n	80163ca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	7b5b      	ldrb	r3, [r3, #13]
 801639e:	f043 0310 	orr.w	r3, r3, #16
 80163a2:	b2da      	uxtb	r2, r3
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	735a      	strb	r2, [r3, #13]
 80163a8:	e00f      	b.n	80163ca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	2206      	movs	r2, #6
 80163ae:	4928      	ldr	r1, [pc, #160]	; (8016450 <ethernet_input+0x118>)
 80163b0:	4618      	mov	r0, r3
 80163b2:	f000 f8bb 	bl	801652c <memcmp>
 80163b6:	4603      	mov	r3, r0
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d106      	bne.n	80163ca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	7b5b      	ldrb	r3, [r3, #13]
 80163c0:	f043 0308 	orr.w	r3, r3, #8
 80163c4:	b2da      	uxtb	r2, r3
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80163ca:	89fb      	ldrh	r3, [r7, #14]
 80163cc:	2b08      	cmp	r3, #8
 80163ce:	d003      	beq.n	80163d8 <ethernet_input+0xa0>
 80163d0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80163d4:	d014      	beq.n	8016400 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80163d6:	e032      	b.n	801643e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163de:	f003 0308 	and.w	r3, r3, #8
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d024      	beq.n	8016430 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80163e6:	8afb      	ldrh	r3, [r7, #22]
 80163e8:	4619      	mov	r1, r3
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f7f6 fe8a 	bl	800d104 <pbuf_remove_header>
 80163f0:	4603      	mov	r3, r0
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d11e      	bne.n	8016434 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80163f6:	6839      	ldr	r1, [r7, #0]
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7fe fe95 	bl	8015128 <ip4_input>
      break;
 80163fe:	e013      	b.n	8016428 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016406:	f003 0308 	and.w	r3, r3, #8
 801640a:	2b00      	cmp	r3, #0
 801640c:	d014      	beq.n	8016438 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801640e:	8afb      	ldrh	r3, [r7, #22]
 8016410:	4619      	mov	r1, r3
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f7f6 fe76 	bl	800d104 <pbuf_remove_header>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	d10e      	bne.n	801643c <ethernet_input+0x104>
        etharp_input(p, netif);
 801641e:	6839      	ldr	r1, [r7, #0]
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f7fe f80f 	bl	8014444 <etharp_input>
      break;
 8016426:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016428:	2300      	movs	r3, #0
 801642a:	e00c      	b.n	8016446 <ethernet_input+0x10e>
    goto free_and_return;
 801642c:	bf00      	nop
 801642e:	e006      	b.n	801643e <ethernet_input+0x106>
        goto free_and_return;
 8016430:	bf00      	nop
 8016432:	e004      	b.n	801643e <ethernet_input+0x106>
        goto free_and_return;
 8016434:	bf00      	nop
 8016436:	e002      	b.n	801643e <ethernet_input+0x106>
        goto free_and_return;
 8016438:	bf00      	nop
 801643a:	e000      	b.n	801643e <ethernet_input+0x106>
        goto free_and_return;
 801643c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7f6 fee6 	bl	800d210 <pbuf_free>
  return ERR_OK;
 8016444:	2300      	movs	r3, #0
}
 8016446:	4618      	mov	r0, r3
 8016448:	3718      	adds	r7, #24
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	0801afc4 	.word	0x0801afc4

08016454 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
 8016460:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016462:	8c3b      	ldrh	r3, [r7, #32]
 8016464:	4618      	mov	r0, r3
 8016466:	f7f5 fabd 	bl	800b9e4 <lwip_htons>
 801646a:	4603      	mov	r3, r0
 801646c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801646e:	210e      	movs	r1, #14
 8016470:	68b8      	ldr	r0, [r7, #8]
 8016472:	f7f6 fe37 	bl	800d0e4 <pbuf_add_header>
 8016476:	4603      	mov	r3, r0
 8016478:	2b00      	cmp	r3, #0
 801647a:	d125      	bne.n	80164c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	685b      	ldr	r3, [r3, #4]
 8016480:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	8afa      	ldrh	r2, [r7, #22]
 8016486:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	2206      	movs	r2, #6
 801648c:	6839      	ldr	r1, [r7, #0]
 801648e:	4618      	mov	r0, r3
 8016490:	f000 f85a 	bl	8016548 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	3306      	adds	r3, #6
 8016498:	2206      	movs	r2, #6
 801649a:	6879      	ldr	r1, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	f000 f853 	bl	8016548 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164a8:	2b06      	cmp	r3, #6
 80164aa:	d006      	beq.n	80164ba <ethernet_output+0x66>
 80164ac:	4b0a      	ldr	r3, [pc, #40]	; (80164d8 <ethernet_output+0x84>)
 80164ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 80164b2:	490a      	ldr	r1, [pc, #40]	; (80164dc <ethernet_output+0x88>)
 80164b4:	480a      	ldr	r0, [pc, #40]	; (80164e0 <ethernet_output+0x8c>)
 80164b6:	f000 f85d 	bl	8016574 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	699b      	ldr	r3, [r3, #24]
 80164be:	68b9      	ldr	r1, [r7, #8]
 80164c0:	68f8      	ldr	r0, [r7, #12]
 80164c2:	4798      	blx	r3
 80164c4:	4603      	mov	r3, r0
 80164c6:	e002      	b.n	80164ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80164c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80164ca:	f06f 0301 	mvn.w	r3, #1
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3718      	adds	r7, #24
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	0801a038 	.word	0x0801a038
 80164dc:	0801a070 	.word	0x0801a070
 80164e0:	0801a0a4 	.word	0x0801a0a4

080164e4 <__libc_init_array>:
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	4d0d      	ldr	r5, [pc, #52]	; (801651c <__libc_init_array+0x38>)
 80164e8:	4c0d      	ldr	r4, [pc, #52]	; (8016520 <__libc_init_array+0x3c>)
 80164ea:	1b64      	subs	r4, r4, r5
 80164ec:	10a4      	asrs	r4, r4, #2
 80164ee:	2600      	movs	r6, #0
 80164f0:	42a6      	cmp	r6, r4
 80164f2:	d109      	bne.n	8016508 <__libc_init_array+0x24>
 80164f4:	4d0b      	ldr	r5, [pc, #44]	; (8016524 <__libc_init_array+0x40>)
 80164f6:	4c0c      	ldr	r4, [pc, #48]	; (8016528 <__libc_init_array+0x44>)
 80164f8:	f001 f872 	bl	80175e0 <_init>
 80164fc:	1b64      	subs	r4, r4, r5
 80164fe:	10a4      	asrs	r4, r4, #2
 8016500:	2600      	movs	r6, #0
 8016502:	42a6      	cmp	r6, r4
 8016504:	d105      	bne.n	8016512 <__libc_init_array+0x2e>
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	f855 3b04 	ldr.w	r3, [r5], #4
 801650c:	4798      	blx	r3
 801650e:	3601      	adds	r6, #1
 8016510:	e7ee      	b.n	80164f0 <__libc_init_array+0xc>
 8016512:	f855 3b04 	ldr.w	r3, [r5], #4
 8016516:	4798      	blx	r3
 8016518:	3601      	adds	r6, #1
 801651a:	e7f2      	b.n	8016502 <__libc_init_array+0x1e>
 801651c:	0801b128 	.word	0x0801b128
 8016520:	0801b128 	.word	0x0801b128
 8016524:	0801b128 	.word	0x0801b128
 8016528:	0801b12c 	.word	0x0801b12c

0801652c <memcmp>:
 801652c:	b530      	push	{r4, r5, lr}
 801652e:	3901      	subs	r1, #1
 8016530:	2400      	movs	r4, #0
 8016532:	42a2      	cmp	r2, r4
 8016534:	d101      	bne.n	801653a <memcmp+0xe>
 8016536:	2000      	movs	r0, #0
 8016538:	e005      	b.n	8016546 <memcmp+0x1a>
 801653a:	5d03      	ldrb	r3, [r0, r4]
 801653c:	3401      	adds	r4, #1
 801653e:	5d0d      	ldrb	r5, [r1, r4]
 8016540:	42ab      	cmp	r3, r5
 8016542:	d0f6      	beq.n	8016532 <memcmp+0x6>
 8016544:	1b58      	subs	r0, r3, r5
 8016546:	bd30      	pop	{r4, r5, pc}

08016548 <memcpy>:
 8016548:	440a      	add	r2, r1
 801654a:	4291      	cmp	r1, r2
 801654c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016550:	d100      	bne.n	8016554 <memcpy+0xc>
 8016552:	4770      	bx	lr
 8016554:	b510      	push	{r4, lr}
 8016556:	f811 4b01 	ldrb.w	r4, [r1], #1
 801655a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801655e:	4291      	cmp	r1, r2
 8016560:	d1f9      	bne.n	8016556 <memcpy+0xe>
 8016562:	bd10      	pop	{r4, pc}

08016564 <memset>:
 8016564:	4402      	add	r2, r0
 8016566:	4603      	mov	r3, r0
 8016568:	4293      	cmp	r3, r2
 801656a:	d100      	bne.n	801656e <memset+0xa>
 801656c:	4770      	bx	lr
 801656e:	f803 1b01 	strb.w	r1, [r3], #1
 8016572:	e7f9      	b.n	8016568 <memset+0x4>

08016574 <iprintf>:
 8016574:	b40f      	push	{r0, r1, r2, r3}
 8016576:	4b0a      	ldr	r3, [pc, #40]	; (80165a0 <iprintf+0x2c>)
 8016578:	b513      	push	{r0, r1, r4, lr}
 801657a:	681c      	ldr	r4, [r3, #0]
 801657c:	b124      	cbz	r4, 8016588 <iprintf+0x14>
 801657e:	69a3      	ldr	r3, [r4, #24]
 8016580:	b913      	cbnz	r3, 8016588 <iprintf+0x14>
 8016582:	4620      	mov	r0, r4
 8016584:	f000 f8e0 	bl	8016748 <__sinit>
 8016588:	ab05      	add	r3, sp, #20
 801658a:	9a04      	ldr	r2, [sp, #16]
 801658c:	68a1      	ldr	r1, [r4, #8]
 801658e:	9301      	str	r3, [sp, #4]
 8016590:	4620      	mov	r0, r4
 8016592:	f000 fa67 	bl	8016a64 <_vfiprintf_r>
 8016596:	b002      	add	sp, #8
 8016598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801659c:	b004      	add	sp, #16
 801659e:	4770      	bx	lr
 80165a0:	24000038 	.word	0x24000038

080165a4 <rand>:
 80165a4:	4b17      	ldr	r3, [pc, #92]	; (8016604 <rand+0x60>)
 80165a6:	b510      	push	{r4, lr}
 80165a8:	681c      	ldr	r4, [r3, #0]
 80165aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80165ac:	b9b3      	cbnz	r3, 80165dc <rand+0x38>
 80165ae:	2018      	movs	r0, #24
 80165b0:	f000 f97c 	bl	80168ac <malloc>
 80165b4:	63a0      	str	r0, [r4, #56]	; 0x38
 80165b6:	b928      	cbnz	r0, 80165c4 <rand+0x20>
 80165b8:	4602      	mov	r2, r0
 80165ba:	4b13      	ldr	r3, [pc, #76]	; (8016608 <rand+0x64>)
 80165bc:	4813      	ldr	r0, [pc, #76]	; (801660c <rand+0x68>)
 80165be:	214e      	movs	r1, #78	; 0x4e
 80165c0:	f000 f84c 	bl	801665c <__assert_func>
 80165c4:	4a12      	ldr	r2, [pc, #72]	; (8016610 <rand+0x6c>)
 80165c6:	4b13      	ldr	r3, [pc, #76]	; (8016614 <rand+0x70>)
 80165c8:	e9c0 2300 	strd	r2, r3, [r0]
 80165cc:	4b12      	ldr	r3, [pc, #72]	; (8016618 <rand+0x74>)
 80165ce:	6083      	str	r3, [r0, #8]
 80165d0:	230b      	movs	r3, #11
 80165d2:	8183      	strh	r3, [r0, #12]
 80165d4:	2201      	movs	r2, #1
 80165d6:	2300      	movs	r3, #0
 80165d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80165dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80165de:	480f      	ldr	r0, [pc, #60]	; (801661c <rand+0x78>)
 80165e0:	690a      	ldr	r2, [r1, #16]
 80165e2:	694b      	ldr	r3, [r1, #20]
 80165e4:	4c0e      	ldr	r4, [pc, #56]	; (8016620 <rand+0x7c>)
 80165e6:	4350      	muls	r0, r2
 80165e8:	fb04 0003 	mla	r0, r4, r3, r0
 80165ec:	fba2 3404 	umull	r3, r4, r2, r4
 80165f0:	1c5a      	adds	r2, r3, #1
 80165f2:	4404      	add	r4, r0
 80165f4:	f144 0000 	adc.w	r0, r4, #0
 80165f8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80165fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016600:	bd10      	pop	{r4, pc}
 8016602:	bf00      	nop
 8016604:	24000038 	.word	0x24000038
 8016608:	0801afd8 	.word	0x0801afd8
 801660c:	0801afef 	.word	0x0801afef
 8016610:	abcd330e 	.word	0xabcd330e
 8016614:	e66d1234 	.word	0xe66d1234
 8016618:	0005deec 	.word	0x0005deec
 801661c:	5851f42d 	.word	0x5851f42d
 8016620:	4c957f2d 	.word	0x4c957f2d

08016624 <strcpy>:
 8016624:	4603      	mov	r3, r0
 8016626:	f811 2b01 	ldrb.w	r2, [r1], #1
 801662a:	f803 2b01 	strb.w	r2, [r3], #1
 801662e:	2a00      	cmp	r2, #0
 8016630:	d1f9      	bne.n	8016626 <strcpy+0x2>
 8016632:	4770      	bx	lr

08016634 <strncpy>:
 8016634:	b510      	push	{r4, lr}
 8016636:	3901      	subs	r1, #1
 8016638:	4603      	mov	r3, r0
 801663a:	b132      	cbz	r2, 801664a <strncpy+0x16>
 801663c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016640:	f803 4b01 	strb.w	r4, [r3], #1
 8016644:	3a01      	subs	r2, #1
 8016646:	2c00      	cmp	r4, #0
 8016648:	d1f7      	bne.n	801663a <strncpy+0x6>
 801664a:	441a      	add	r2, r3
 801664c:	2100      	movs	r1, #0
 801664e:	4293      	cmp	r3, r2
 8016650:	d100      	bne.n	8016654 <strncpy+0x20>
 8016652:	bd10      	pop	{r4, pc}
 8016654:	f803 1b01 	strb.w	r1, [r3], #1
 8016658:	e7f9      	b.n	801664e <strncpy+0x1a>
	...

0801665c <__assert_func>:
 801665c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801665e:	4614      	mov	r4, r2
 8016660:	461a      	mov	r2, r3
 8016662:	4b09      	ldr	r3, [pc, #36]	; (8016688 <__assert_func+0x2c>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	4605      	mov	r5, r0
 8016668:	68d8      	ldr	r0, [r3, #12]
 801666a:	b14c      	cbz	r4, 8016680 <__assert_func+0x24>
 801666c:	4b07      	ldr	r3, [pc, #28]	; (801668c <__assert_func+0x30>)
 801666e:	9100      	str	r1, [sp, #0]
 8016670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016674:	4906      	ldr	r1, [pc, #24]	; (8016690 <__assert_func+0x34>)
 8016676:	462b      	mov	r3, r5
 8016678:	f000 f8e4 	bl	8016844 <fiprintf>
 801667c:	f000 fddc 	bl	8017238 <abort>
 8016680:	4b04      	ldr	r3, [pc, #16]	; (8016694 <__assert_func+0x38>)
 8016682:	461c      	mov	r4, r3
 8016684:	e7f3      	b.n	801666e <__assert_func+0x12>
 8016686:	bf00      	nop
 8016688:	24000038 	.word	0x24000038
 801668c:	0801b04e 	.word	0x0801b04e
 8016690:	0801b05b 	.word	0x0801b05b
 8016694:	0801b089 	.word	0x0801b089

08016698 <std>:
 8016698:	2300      	movs	r3, #0
 801669a:	b510      	push	{r4, lr}
 801669c:	4604      	mov	r4, r0
 801669e:	e9c0 3300 	strd	r3, r3, [r0]
 80166a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166a6:	6083      	str	r3, [r0, #8]
 80166a8:	8181      	strh	r1, [r0, #12]
 80166aa:	6643      	str	r3, [r0, #100]	; 0x64
 80166ac:	81c2      	strh	r2, [r0, #14]
 80166ae:	6183      	str	r3, [r0, #24]
 80166b0:	4619      	mov	r1, r3
 80166b2:	2208      	movs	r2, #8
 80166b4:	305c      	adds	r0, #92	; 0x5c
 80166b6:	f7ff ff55 	bl	8016564 <memset>
 80166ba:	4b05      	ldr	r3, [pc, #20]	; (80166d0 <std+0x38>)
 80166bc:	6263      	str	r3, [r4, #36]	; 0x24
 80166be:	4b05      	ldr	r3, [pc, #20]	; (80166d4 <std+0x3c>)
 80166c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80166c2:	4b05      	ldr	r3, [pc, #20]	; (80166d8 <std+0x40>)
 80166c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166c6:	4b05      	ldr	r3, [pc, #20]	; (80166dc <std+0x44>)
 80166c8:	6224      	str	r4, [r4, #32]
 80166ca:	6323      	str	r3, [r4, #48]	; 0x30
 80166cc:	bd10      	pop	{r4, pc}
 80166ce:	bf00      	nop
 80166d0:	0801700d 	.word	0x0801700d
 80166d4:	0801702f 	.word	0x0801702f
 80166d8:	08017067 	.word	0x08017067
 80166dc:	0801708b 	.word	0x0801708b

080166e0 <_cleanup_r>:
 80166e0:	4901      	ldr	r1, [pc, #4]	; (80166e8 <_cleanup_r+0x8>)
 80166e2:	f000 b8c1 	b.w	8016868 <_fwalk_reent>
 80166e6:	bf00      	nop
 80166e8:	08017375 	.word	0x08017375

080166ec <__sfmoreglue>:
 80166ec:	b570      	push	{r4, r5, r6, lr}
 80166ee:	1e4a      	subs	r2, r1, #1
 80166f0:	2568      	movs	r5, #104	; 0x68
 80166f2:	4355      	muls	r5, r2
 80166f4:	460e      	mov	r6, r1
 80166f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80166fa:	f000 f92f 	bl	801695c <_malloc_r>
 80166fe:	4604      	mov	r4, r0
 8016700:	b140      	cbz	r0, 8016714 <__sfmoreglue+0x28>
 8016702:	2100      	movs	r1, #0
 8016704:	e9c0 1600 	strd	r1, r6, [r0]
 8016708:	300c      	adds	r0, #12
 801670a:	60a0      	str	r0, [r4, #8]
 801670c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016710:	f7ff ff28 	bl	8016564 <memset>
 8016714:	4620      	mov	r0, r4
 8016716:	bd70      	pop	{r4, r5, r6, pc}

08016718 <__sfp_lock_acquire>:
 8016718:	4801      	ldr	r0, [pc, #4]	; (8016720 <__sfp_lock_acquire+0x8>)
 801671a:	f000 b8c5 	b.w	80168a8 <__retarget_lock_acquire_recursive>
 801671e:	bf00      	nop
 8016720:	2400363c 	.word	0x2400363c

08016724 <__sfp_lock_release>:
 8016724:	4801      	ldr	r0, [pc, #4]	; (801672c <__sfp_lock_release+0x8>)
 8016726:	f000 b8c0 	b.w	80168aa <__retarget_lock_release_recursive>
 801672a:	bf00      	nop
 801672c:	2400363c 	.word	0x2400363c

08016730 <__sinit_lock_acquire>:
 8016730:	4801      	ldr	r0, [pc, #4]	; (8016738 <__sinit_lock_acquire+0x8>)
 8016732:	f000 b8b9 	b.w	80168a8 <__retarget_lock_acquire_recursive>
 8016736:	bf00      	nop
 8016738:	24003637 	.word	0x24003637

0801673c <__sinit_lock_release>:
 801673c:	4801      	ldr	r0, [pc, #4]	; (8016744 <__sinit_lock_release+0x8>)
 801673e:	f000 b8b4 	b.w	80168aa <__retarget_lock_release_recursive>
 8016742:	bf00      	nop
 8016744:	24003637 	.word	0x24003637

08016748 <__sinit>:
 8016748:	b510      	push	{r4, lr}
 801674a:	4604      	mov	r4, r0
 801674c:	f7ff fff0 	bl	8016730 <__sinit_lock_acquire>
 8016750:	69a3      	ldr	r3, [r4, #24]
 8016752:	b11b      	cbz	r3, 801675c <__sinit+0x14>
 8016754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016758:	f7ff bff0 	b.w	801673c <__sinit_lock_release>
 801675c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016760:	6523      	str	r3, [r4, #80]	; 0x50
 8016762:	4b13      	ldr	r3, [pc, #76]	; (80167b0 <__sinit+0x68>)
 8016764:	4a13      	ldr	r2, [pc, #76]	; (80167b4 <__sinit+0x6c>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	62a2      	str	r2, [r4, #40]	; 0x28
 801676a:	42a3      	cmp	r3, r4
 801676c:	bf04      	itt	eq
 801676e:	2301      	moveq	r3, #1
 8016770:	61a3      	streq	r3, [r4, #24]
 8016772:	4620      	mov	r0, r4
 8016774:	f000 f820 	bl	80167b8 <__sfp>
 8016778:	6060      	str	r0, [r4, #4]
 801677a:	4620      	mov	r0, r4
 801677c:	f000 f81c 	bl	80167b8 <__sfp>
 8016780:	60a0      	str	r0, [r4, #8]
 8016782:	4620      	mov	r0, r4
 8016784:	f000 f818 	bl	80167b8 <__sfp>
 8016788:	2200      	movs	r2, #0
 801678a:	60e0      	str	r0, [r4, #12]
 801678c:	2104      	movs	r1, #4
 801678e:	6860      	ldr	r0, [r4, #4]
 8016790:	f7ff ff82 	bl	8016698 <std>
 8016794:	68a0      	ldr	r0, [r4, #8]
 8016796:	2201      	movs	r2, #1
 8016798:	2109      	movs	r1, #9
 801679a:	f7ff ff7d 	bl	8016698 <std>
 801679e:	68e0      	ldr	r0, [r4, #12]
 80167a0:	2202      	movs	r2, #2
 80167a2:	2112      	movs	r1, #18
 80167a4:	f7ff ff78 	bl	8016698 <std>
 80167a8:	2301      	movs	r3, #1
 80167aa:	61a3      	str	r3, [r4, #24]
 80167ac:	e7d2      	b.n	8016754 <__sinit+0xc>
 80167ae:	bf00      	nop
 80167b0:	0801afd4 	.word	0x0801afd4
 80167b4:	080166e1 	.word	0x080166e1

080167b8 <__sfp>:
 80167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ba:	4607      	mov	r7, r0
 80167bc:	f7ff ffac 	bl	8016718 <__sfp_lock_acquire>
 80167c0:	4b1e      	ldr	r3, [pc, #120]	; (801683c <__sfp+0x84>)
 80167c2:	681e      	ldr	r6, [r3, #0]
 80167c4:	69b3      	ldr	r3, [r6, #24]
 80167c6:	b913      	cbnz	r3, 80167ce <__sfp+0x16>
 80167c8:	4630      	mov	r0, r6
 80167ca:	f7ff ffbd 	bl	8016748 <__sinit>
 80167ce:	3648      	adds	r6, #72	; 0x48
 80167d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167d4:	3b01      	subs	r3, #1
 80167d6:	d503      	bpl.n	80167e0 <__sfp+0x28>
 80167d8:	6833      	ldr	r3, [r6, #0]
 80167da:	b30b      	cbz	r3, 8016820 <__sfp+0x68>
 80167dc:	6836      	ldr	r6, [r6, #0]
 80167de:	e7f7      	b.n	80167d0 <__sfp+0x18>
 80167e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167e4:	b9d5      	cbnz	r5, 801681c <__sfp+0x64>
 80167e6:	4b16      	ldr	r3, [pc, #88]	; (8016840 <__sfp+0x88>)
 80167e8:	60e3      	str	r3, [r4, #12]
 80167ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80167ee:	6665      	str	r5, [r4, #100]	; 0x64
 80167f0:	f000 f859 	bl	80168a6 <__retarget_lock_init_recursive>
 80167f4:	f7ff ff96 	bl	8016724 <__sfp_lock_release>
 80167f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80167fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016800:	6025      	str	r5, [r4, #0]
 8016802:	61a5      	str	r5, [r4, #24]
 8016804:	2208      	movs	r2, #8
 8016806:	4629      	mov	r1, r5
 8016808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801680c:	f7ff feaa 	bl	8016564 <memset>
 8016810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016818:	4620      	mov	r0, r4
 801681a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801681c:	3468      	adds	r4, #104	; 0x68
 801681e:	e7d9      	b.n	80167d4 <__sfp+0x1c>
 8016820:	2104      	movs	r1, #4
 8016822:	4638      	mov	r0, r7
 8016824:	f7ff ff62 	bl	80166ec <__sfmoreglue>
 8016828:	4604      	mov	r4, r0
 801682a:	6030      	str	r0, [r6, #0]
 801682c:	2800      	cmp	r0, #0
 801682e:	d1d5      	bne.n	80167dc <__sfp+0x24>
 8016830:	f7ff ff78 	bl	8016724 <__sfp_lock_release>
 8016834:	230c      	movs	r3, #12
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	e7ee      	b.n	8016818 <__sfp+0x60>
 801683a:	bf00      	nop
 801683c:	0801afd4 	.word	0x0801afd4
 8016840:	ffff0001 	.word	0xffff0001

08016844 <fiprintf>:
 8016844:	b40e      	push	{r1, r2, r3}
 8016846:	b503      	push	{r0, r1, lr}
 8016848:	4601      	mov	r1, r0
 801684a:	ab03      	add	r3, sp, #12
 801684c:	4805      	ldr	r0, [pc, #20]	; (8016864 <fiprintf+0x20>)
 801684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016852:	6800      	ldr	r0, [r0, #0]
 8016854:	9301      	str	r3, [sp, #4]
 8016856:	f000 f905 	bl	8016a64 <_vfiprintf_r>
 801685a:	b002      	add	sp, #8
 801685c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016860:	b003      	add	sp, #12
 8016862:	4770      	bx	lr
 8016864:	24000038 	.word	0x24000038

08016868 <_fwalk_reent>:
 8016868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801686c:	4606      	mov	r6, r0
 801686e:	4688      	mov	r8, r1
 8016870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016874:	2700      	movs	r7, #0
 8016876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801687a:	f1b9 0901 	subs.w	r9, r9, #1
 801687e:	d505      	bpl.n	801688c <_fwalk_reent+0x24>
 8016880:	6824      	ldr	r4, [r4, #0]
 8016882:	2c00      	cmp	r4, #0
 8016884:	d1f7      	bne.n	8016876 <_fwalk_reent+0xe>
 8016886:	4638      	mov	r0, r7
 8016888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801688c:	89ab      	ldrh	r3, [r5, #12]
 801688e:	2b01      	cmp	r3, #1
 8016890:	d907      	bls.n	80168a2 <_fwalk_reent+0x3a>
 8016892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016896:	3301      	adds	r3, #1
 8016898:	d003      	beq.n	80168a2 <_fwalk_reent+0x3a>
 801689a:	4629      	mov	r1, r5
 801689c:	4630      	mov	r0, r6
 801689e:	47c0      	blx	r8
 80168a0:	4307      	orrs	r7, r0
 80168a2:	3568      	adds	r5, #104	; 0x68
 80168a4:	e7e9      	b.n	801687a <_fwalk_reent+0x12>

080168a6 <__retarget_lock_init_recursive>:
 80168a6:	4770      	bx	lr

080168a8 <__retarget_lock_acquire_recursive>:
 80168a8:	4770      	bx	lr

080168aa <__retarget_lock_release_recursive>:
 80168aa:	4770      	bx	lr

080168ac <malloc>:
 80168ac:	4b02      	ldr	r3, [pc, #8]	; (80168b8 <malloc+0xc>)
 80168ae:	4601      	mov	r1, r0
 80168b0:	6818      	ldr	r0, [r3, #0]
 80168b2:	f000 b853 	b.w	801695c <_malloc_r>
 80168b6:	bf00      	nop
 80168b8:	24000038 	.word	0x24000038

080168bc <_free_r>:
 80168bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168be:	2900      	cmp	r1, #0
 80168c0:	d048      	beq.n	8016954 <_free_r+0x98>
 80168c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168c6:	9001      	str	r0, [sp, #4]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	f1a1 0404 	sub.w	r4, r1, #4
 80168ce:	bfb8      	it	lt
 80168d0:	18e4      	addlt	r4, r4, r3
 80168d2:	f000 fe01 	bl	80174d8 <__malloc_lock>
 80168d6:	4a20      	ldr	r2, [pc, #128]	; (8016958 <_free_r+0x9c>)
 80168d8:	9801      	ldr	r0, [sp, #4]
 80168da:	6813      	ldr	r3, [r2, #0]
 80168dc:	4615      	mov	r5, r2
 80168de:	b933      	cbnz	r3, 80168ee <_free_r+0x32>
 80168e0:	6063      	str	r3, [r4, #4]
 80168e2:	6014      	str	r4, [r2, #0]
 80168e4:	b003      	add	sp, #12
 80168e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80168ea:	f000 bdfb 	b.w	80174e4 <__malloc_unlock>
 80168ee:	42a3      	cmp	r3, r4
 80168f0:	d90b      	bls.n	801690a <_free_r+0x4e>
 80168f2:	6821      	ldr	r1, [r4, #0]
 80168f4:	1862      	adds	r2, r4, r1
 80168f6:	4293      	cmp	r3, r2
 80168f8:	bf04      	itt	eq
 80168fa:	681a      	ldreq	r2, [r3, #0]
 80168fc:	685b      	ldreq	r3, [r3, #4]
 80168fe:	6063      	str	r3, [r4, #4]
 8016900:	bf04      	itt	eq
 8016902:	1852      	addeq	r2, r2, r1
 8016904:	6022      	streq	r2, [r4, #0]
 8016906:	602c      	str	r4, [r5, #0]
 8016908:	e7ec      	b.n	80168e4 <_free_r+0x28>
 801690a:	461a      	mov	r2, r3
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	b10b      	cbz	r3, 8016914 <_free_r+0x58>
 8016910:	42a3      	cmp	r3, r4
 8016912:	d9fa      	bls.n	801690a <_free_r+0x4e>
 8016914:	6811      	ldr	r1, [r2, #0]
 8016916:	1855      	adds	r5, r2, r1
 8016918:	42a5      	cmp	r5, r4
 801691a:	d10b      	bne.n	8016934 <_free_r+0x78>
 801691c:	6824      	ldr	r4, [r4, #0]
 801691e:	4421      	add	r1, r4
 8016920:	1854      	adds	r4, r2, r1
 8016922:	42a3      	cmp	r3, r4
 8016924:	6011      	str	r1, [r2, #0]
 8016926:	d1dd      	bne.n	80168e4 <_free_r+0x28>
 8016928:	681c      	ldr	r4, [r3, #0]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	6053      	str	r3, [r2, #4]
 801692e:	4421      	add	r1, r4
 8016930:	6011      	str	r1, [r2, #0]
 8016932:	e7d7      	b.n	80168e4 <_free_r+0x28>
 8016934:	d902      	bls.n	801693c <_free_r+0x80>
 8016936:	230c      	movs	r3, #12
 8016938:	6003      	str	r3, [r0, #0]
 801693a:	e7d3      	b.n	80168e4 <_free_r+0x28>
 801693c:	6825      	ldr	r5, [r4, #0]
 801693e:	1961      	adds	r1, r4, r5
 8016940:	428b      	cmp	r3, r1
 8016942:	bf04      	itt	eq
 8016944:	6819      	ldreq	r1, [r3, #0]
 8016946:	685b      	ldreq	r3, [r3, #4]
 8016948:	6063      	str	r3, [r4, #4]
 801694a:	bf04      	itt	eq
 801694c:	1949      	addeq	r1, r1, r5
 801694e:	6021      	streq	r1, [r4, #0]
 8016950:	6054      	str	r4, [r2, #4]
 8016952:	e7c7      	b.n	80168e4 <_free_r+0x28>
 8016954:	b003      	add	sp, #12
 8016956:	bd30      	pop	{r4, r5, pc}
 8016958:	24000240 	.word	0x24000240

0801695c <_malloc_r>:
 801695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801695e:	1ccd      	adds	r5, r1, #3
 8016960:	f025 0503 	bic.w	r5, r5, #3
 8016964:	3508      	adds	r5, #8
 8016966:	2d0c      	cmp	r5, #12
 8016968:	bf38      	it	cc
 801696a:	250c      	movcc	r5, #12
 801696c:	2d00      	cmp	r5, #0
 801696e:	4606      	mov	r6, r0
 8016970:	db01      	blt.n	8016976 <_malloc_r+0x1a>
 8016972:	42a9      	cmp	r1, r5
 8016974:	d903      	bls.n	801697e <_malloc_r+0x22>
 8016976:	230c      	movs	r3, #12
 8016978:	6033      	str	r3, [r6, #0]
 801697a:	2000      	movs	r0, #0
 801697c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801697e:	f000 fdab 	bl	80174d8 <__malloc_lock>
 8016982:	4921      	ldr	r1, [pc, #132]	; (8016a08 <_malloc_r+0xac>)
 8016984:	680a      	ldr	r2, [r1, #0]
 8016986:	4614      	mov	r4, r2
 8016988:	b99c      	cbnz	r4, 80169b2 <_malloc_r+0x56>
 801698a:	4f20      	ldr	r7, [pc, #128]	; (8016a0c <_malloc_r+0xb0>)
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	b923      	cbnz	r3, 801699a <_malloc_r+0x3e>
 8016990:	4621      	mov	r1, r4
 8016992:	4630      	mov	r0, r6
 8016994:	f000 fb2a 	bl	8016fec <_sbrk_r>
 8016998:	6038      	str	r0, [r7, #0]
 801699a:	4629      	mov	r1, r5
 801699c:	4630      	mov	r0, r6
 801699e:	f000 fb25 	bl	8016fec <_sbrk_r>
 80169a2:	1c43      	adds	r3, r0, #1
 80169a4:	d123      	bne.n	80169ee <_malloc_r+0x92>
 80169a6:	230c      	movs	r3, #12
 80169a8:	6033      	str	r3, [r6, #0]
 80169aa:	4630      	mov	r0, r6
 80169ac:	f000 fd9a 	bl	80174e4 <__malloc_unlock>
 80169b0:	e7e3      	b.n	801697a <_malloc_r+0x1e>
 80169b2:	6823      	ldr	r3, [r4, #0]
 80169b4:	1b5b      	subs	r3, r3, r5
 80169b6:	d417      	bmi.n	80169e8 <_malloc_r+0x8c>
 80169b8:	2b0b      	cmp	r3, #11
 80169ba:	d903      	bls.n	80169c4 <_malloc_r+0x68>
 80169bc:	6023      	str	r3, [r4, #0]
 80169be:	441c      	add	r4, r3
 80169c0:	6025      	str	r5, [r4, #0]
 80169c2:	e004      	b.n	80169ce <_malloc_r+0x72>
 80169c4:	6863      	ldr	r3, [r4, #4]
 80169c6:	42a2      	cmp	r2, r4
 80169c8:	bf0c      	ite	eq
 80169ca:	600b      	streq	r3, [r1, #0]
 80169cc:	6053      	strne	r3, [r2, #4]
 80169ce:	4630      	mov	r0, r6
 80169d0:	f000 fd88 	bl	80174e4 <__malloc_unlock>
 80169d4:	f104 000b 	add.w	r0, r4, #11
 80169d8:	1d23      	adds	r3, r4, #4
 80169da:	f020 0007 	bic.w	r0, r0, #7
 80169de:	1ac2      	subs	r2, r0, r3
 80169e0:	d0cc      	beq.n	801697c <_malloc_r+0x20>
 80169e2:	1a1b      	subs	r3, r3, r0
 80169e4:	50a3      	str	r3, [r4, r2]
 80169e6:	e7c9      	b.n	801697c <_malloc_r+0x20>
 80169e8:	4622      	mov	r2, r4
 80169ea:	6864      	ldr	r4, [r4, #4]
 80169ec:	e7cc      	b.n	8016988 <_malloc_r+0x2c>
 80169ee:	1cc4      	adds	r4, r0, #3
 80169f0:	f024 0403 	bic.w	r4, r4, #3
 80169f4:	42a0      	cmp	r0, r4
 80169f6:	d0e3      	beq.n	80169c0 <_malloc_r+0x64>
 80169f8:	1a21      	subs	r1, r4, r0
 80169fa:	4630      	mov	r0, r6
 80169fc:	f000 faf6 	bl	8016fec <_sbrk_r>
 8016a00:	3001      	adds	r0, #1
 8016a02:	d1dd      	bne.n	80169c0 <_malloc_r+0x64>
 8016a04:	e7cf      	b.n	80169a6 <_malloc_r+0x4a>
 8016a06:	bf00      	nop
 8016a08:	24000240 	.word	0x24000240
 8016a0c:	24000244 	.word	0x24000244

08016a10 <__sfputc_r>:
 8016a10:	6893      	ldr	r3, [r2, #8]
 8016a12:	3b01      	subs	r3, #1
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	b410      	push	{r4}
 8016a18:	6093      	str	r3, [r2, #8]
 8016a1a:	da08      	bge.n	8016a2e <__sfputc_r+0x1e>
 8016a1c:	6994      	ldr	r4, [r2, #24]
 8016a1e:	42a3      	cmp	r3, r4
 8016a20:	db01      	blt.n	8016a26 <__sfputc_r+0x16>
 8016a22:	290a      	cmp	r1, #10
 8016a24:	d103      	bne.n	8016a2e <__sfputc_r+0x1e>
 8016a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a2a:	f000 bb33 	b.w	8017094 <__swbuf_r>
 8016a2e:	6813      	ldr	r3, [r2, #0]
 8016a30:	1c58      	adds	r0, r3, #1
 8016a32:	6010      	str	r0, [r2, #0]
 8016a34:	7019      	strb	r1, [r3, #0]
 8016a36:	4608      	mov	r0, r1
 8016a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a3c:	4770      	bx	lr

08016a3e <__sfputs_r>:
 8016a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a40:	4606      	mov	r6, r0
 8016a42:	460f      	mov	r7, r1
 8016a44:	4614      	mov	r4, r2
 8016a46:	18d5      	adds	r5, r2, r3
 8016a48:	42ac      	cmp	r4, r5
 8016a4a:	d101      	bne.n	8016a50 <__sfputs_r+0x12>
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	e007      	b.n	8016a60 <__sfputs_r+0x22>
 8016a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a54:	463a      	mov	r2, r7
 8016a56:	4630      	mov	r0, r6
 8016a58:	f7ff ffda 	bl	8016a10 <__sfputc_r>
 8016a5c:	1c43      	adds	r3, r0, #1
 8016a5e:	d1f3      	bne.n	8016a48 <__sfputs_r+0xa>
 8016a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a64 <_vfiprintf_r>:
 8016a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a68:	460d      	mov	r5, r1
 8016a6a:	b09d      	sub	sp, #116	; 0x74
 8016a6c:	4614      	mov	r4, r2
 8016a6e:	4698      	mov	r8, r3
 8016a70:	4606      	mov	r6, r0
 8016a72:	b118      	cbz	r0, 8016a7c <_vfiprintf_r+0x18>
 8016a74:	6983      	ldr	r3, [r0, #24]
 8016a76:	b90b      	cbnz	r3, 8016a7c <_vfiprintf_r+0x18>
 8016a78:	f7ff fe66 	bl	8016748 <__sinit>
 8016a7c:	4b89      	ldr	r3, [pc, #548]	; (8016ca4 <_vfiprintf_r+0x240>)
 8016a7e:	429d      	cmp	r5, r3
 8016a80:	d11b      	bne.n	8016aba <_vfiprintf_r+0x56>
 8016a82:	6875      	ldr	r5, [r6, #4]
 8016a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a86:	07d9      	lsls	r1, r3, #31
 8016a88:	d405      	bmi.n	8016a96 <_vfiprintf_r+0x32>
 8016a8a:	89ab      	ldrh	r3, [r5, #12]
 8016a8c:	059a      	lsls	r2, r3, #22
 8016a8e:	d402      	bmi.n	8016a96 <_vfiprintf_r+0x32>
 8016a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a92:	f7ff ff09 	bl	80168a8 <__retarget_lock_acquire_recursive>
 8016a96:	89ab      	ldrh	r3, [r5, #12]
 8016a98:	071b      	lsls	r3, r3, #28
 8016a9a:	d501      	bpl.n	8016aa0 <_vfiprintf_r+0x3c>
 8016a9c:	692b      	ldr	r3, [r5, #16]
 8016a9e:	b9eb      	cbnz	r3, 8016adc <_vfiprintf_r+0x78>
 8016aa0:	4629      	mov	r1, r5
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	f000 fb5a 	bl	801715c <__swsetup_r>
 8016aa8:	b1c0      	cbz	r0, 8016adc <_vfiprintf_r+0x78>
 8016aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016aac:	07dc      	lsls	r4, r3, #31
 8016aae:	d50e      	bpl.n	8016ace <_vfiprintf_r+0x6a>
 8016ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ab4:	b01d      	add	sp, #116	; 0x74
 8016ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aba:	4b7b      	ldr	r3, [pc, #492]	; (8016ca8 <_vfiprintf_r+0x244>)
 8016abc:	429d      	cmp	r5, r3
 8016abe:	d101      	bne.n	8016ac4 <_vfiprintf_r+0x60>
 8016ac0:	68b5      	ldr	r5, [r6, #8]
 8016ac2:	e7df      	b.n	8016a84 <_vfiprintf_r+0x20>
 8016ac4:	4b79      	ldr	r3, [pc, #484]	; (8016cac <_vfiprintf_r+0x248>)
 8016ac6:	429d      	cmp	r5, r3
 8016ac8:	bf08      	it	eq
 8016aca:	68f5      	ldreq	r5, [r6, #12]
 8016acc:	e7da      	b.n	8016a84 <_vfiprintf_r+0x20>
 8016ace:	89ab      	ldrh	r3, [r5, #12]
 8016ad0:	0598      	lsls	r0, r3, #22
 8016ad2:	d4ed      	bmi.n	8016ab0 <_vfiprintf_r+0x4c>
 8016ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ad6:	f7ff fee8 	bl	80168aa <__retarget_lock_release_recursive>
 8016ada:	e7e9      	b.n	8016ab0 <_vfiprintf_r+0x4c>
 8016adc:	2300      	movs	r3, #0
 8016ade:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae0:	2320      	movs	r3, #32
 8016ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8016aea:	2330      	movs	r3, #48	; 0x30
 8016aec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016cb0 <_vfiprintf_r+0x24c>
 8016af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016af4:	f04f 0901 	mov.w	r9, #1
 8016af8:	4623      	mov	r3, r4
 8016afa:	469a      	mov	sl, r3
 8016afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b00:	b10a      	cbz	r2, 8016b06 <_vfiprintf_r+0xa2>
 8016b02:	2a25      	cmp	r2, #37	; 0x25
 8016b04:	d1f9      	bne.n	8016afa <_vfiprintf_r+0x96>
 8016b06:	ebba 0b04 	subs.w	fp, sl, r4
 8016b0a:	d00b      	beq.n	8016b24 <_vfiprintf_r+0xc0>
 8016b0c:	465b      	mov	r3, fp
 8016b0e:	4622      	mov	r2, r4
 8016b10:	4629      	mov	r1, r5
 8016b12:	4630      	mov	r0, r6
 8016b14:	f7ff ff93 	bl	8016a3e <__sfputs_r>
 8016b18:	3001      	adds	r0, #1
 8016b1a:	f000 80aa 	beq.w	8016c72 <_vfiprintf_r+0x20e>
 8016b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b20:	445a      	add	r2, fp
 8016b22:	9209      	str	r2, [sp, #36]	; 0x24
 8016b24:	f89a 3000 	ldrb.w	r3, [sl]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	f000 80a2 	beq.w	8016c72 <_vfiprintf_r+0x20e>
 8016b2e:	2300      	movs	r3, #0
 8016b30:	f04f 32ff 	mov.w	r2, #4294967295
 8016b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b38:	f10a 0a01 	add.w	sl, sl, #1
 8016b3c:	9304      	str	r3, [sp, #16]
 8016b3e:	9307      	str	r3, [sp, #28]
 8016b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b44:	931a      	str	r3, [sp, #104]	; 0x68
 8016b46:	4654      	mov	r4, sl
 8016b48:	2205      	movs	r2, #5
 8016b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b4e:	4858      	ldr	r0, [pc, #352]	; (8016cb0 <_vfiprintf_r+0x24c>)
 8016b50:	f7e9 fbe6 	bl	8000320 <memchr>
 8016b54:	9a04      	ldr	r2, [sp, #16]
 8016b56:	b9d8      	cbnz	r0, 8016b90 <_vfiprintf_r+0x12c>
 8016b58:	06d1      	lsls	r1, r2, #27
 8016b5a:	bf44      	itt	mi
 8016b5c:	2320      	movmi	r3, #32
 8016b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b62:	0713      	lsls	r3, r2, #28
 8016b64:	bf44      	itt	mi
 8016b66:	232b      	movmi	r3, #43	; 0x2b
 8016b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8016b70:	2b2a      	cmp	r3, #42	; 0x2a
 8016b72:	d015      	beq.n	8016ba0 <_vfiprintf_r+0x13c>
 8016b74:	9a07      	ldr	r2, [sp, #28]
 8016b76:	4654      	mov	r4, sl
 8016b78:	2000      	movs	r0, #0
 8016b7a:	f04f 0c0a 	mov.w	ip, #10
 8016b7e:	4621      	mov	r1, r4
 8016b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b84:	3b30      	subs	r3, #48	; 0x30
 8016b86:	2b09      	cmp	r3, #9
 8016b88:	d94e      	bls.n	8016c28 <_vfiprintf_r+0x1c4>
 8016b8a:	b1b0      	cbz	r0, 8016bba <_vfiprintf_r+0x156>
 8016b8c:	9207      	str	r2, [sp, #28]
 8016b8e:	e014      	b.n	8016bba <_vfiprintf_r+0x156>
 8016b90:	eba0 0308 	sub.w	r3, r0, r8
 8016b94:	fa09 f303 	lsl.w	r3, r9, r3
 8016b98:	4313      	orrs	r3, r2
 8016b9a:	9304      	str	r3, [sp, #16]
 8016b9c:	46a2      	mov	sl, r4
 8016b9e:	e7d2      	b.n	8016b46 <_vfiprintf_r+0xe2>
 8016ba0:	9b03      	ldr	r3, [sp, #12]
 8016ba2:	1d19      	adds	r1, r3, #4
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	9103      	str	r1, [sp, #12]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	bfbb      	ittet	lt
 8016bac:	425b      	neglt	r3, r3
 8016bae:	f042 0202 	orrlt.w	r2, r2, #2
 8016bb2:	9307      	strge	r3, [sp, #28]
 8016bb4:	9307      	strlt	r3, [sp, #28]
 8016bb6:	bfb8      	it	lt
 8016bb8:	9204      	strlt	r2, [sp, #16]
 8016bba:	7823      	ldrb	r3, [r4, #0]
 8016bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8016bbe:	d10c      	bne.n	8016bda <_vfiprintf_r+0x176>
 8016bc0:	7863      	ldrb	r3, [r4, #1]
 8016bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8016bc4:	d135      	bne.n	8016c32 <_vfiprintf_r+0x1ce>
 8016bc6:	9b03      	ldr	r3, [sp, #12]
 8016bc8:	1d1a      	adds	r2, r3, #4
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	9203      	str	r2, [sp, #12]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	bfb8      	it	lt
 8016bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8016bd6:	3402      	adds	r4, #2
 8016bd8:	9305      	str	r3, [sp, #20]
 8016bda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016cc0 <_vfiprintf_r+0x25c>
 8016bde:	7821      	ldrb	r1, [r4, #0]
 8016be0:	2203      	movs	r2, #3
 8016be2:	4650      	mov	r0, sl
 8016be4:	f7e9 fb9c 	bl	8000320 <memchr>
 8016be8:	b140      	cbz	r0, 8016bfc <_vfiprintf_r+0x198>
 8016bea:	2340      	movs	r3, #64	; 0x40
 8016bec:	eba0 000a 	sub.w	r0, r0, sl
 8016bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8016bf4:	9b04      	ldr	r3, [sp, #16]
 8016bf6:	4303      	orrs	r3, r0
 8016bf8:	3401      	adds	r4, #1
 8016bfa:	9304      	str	r3, [sp, #16]
 8016bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c00:	482c      	ldr	r0, [pc, #176]	; (8016cb4 <_vfiprintf_r+0x250>)
 8016c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c06:	2206      	movs	r2, #6
 8016c08:	f7e9 fb8a 	bl	8000320 <memchr>
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	d03f      	beq.n	8016c90 <_vfiprintf_r+0x22c>
 8016c10:	4b29      	ldr	r3, [pc, #164]	; (8016cb8 <_vfiprintf_r+0x254>)
 8016c12:	bb1b      	cbnz	r3, 8016c5c <_vfiprintf_r+0x1f8>
 8016c14:	9b03      	ldr	r3, [sp, #12]
 8016c16:	3307      	adds	r3, #7
 8016c18:	f023 0307 	bic.w	r3, r3, #7
 8016c1c:	3308      	adds	r3, #8
 8016c1e:	9303      	str	r3, [sp, #12]
 8016c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c22:	443b      	add	r3, r7
 8016c24:	9309      	str	r3, [sp, #36]	; 0x24
 8016c26:	e767      	b.n	8016af8 <_vfiprintf_r+0x94>
 8016c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c2c:	460c      	mov	r4, r1
 8016c2e:	2001      	movs	r0, #1
 8016c30:	e7a5      	b.n	8016b7e <_vfiprintf_r+0x11a>
 8016c32:	2300      	movs	r3, #0
 8016c34:	3401      	adds	r4, #1
 8016c36:	9305      	str	r3, [sp, #20]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	f04f 0c0a 	mov.w	ip, #10
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c44:	3a30      	subs	r2, #48	; 0x30
 8016c46:	2a09      	cmp	r2, #9
 8016c48:	d903      	bls.n	8016c52 <_vfiprintf_r+0x1ee>
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d0c5      	beq.n	8016bda <_vfiprintf_r+0x176>
 8016c4e:	9105      	str	r1, [sp, #20]
 8016c50:	e7c3      	b.n	8016bda <_vfiprintf_r+0x176>
 8016c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c56:	4604      	mov	r4, r0
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e7f0      	b.n	8016c3e <_vfiprintf_r+0x1da>
 8016c5c:	ab03      	add	r3, sp, #12
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	462a      	mov	r2, r5
 8016c62:	4b16      	ldr	r3, [pc, #88]	; (8016cbc <_vfiprintf_r+0x258>)
 8016c64:	a904      	add	r1, sp, #16
 8016c66:	4630      	mov	r0, r6
 8016c68:	f3af 8000 	nop.w
 8016c6c:	4607      	mov	r7, r0
 8016c6e:	1c78      	adds	r0, r7, #1
 8016c70:	d1d6      	bne.n	8016c20 <_vfiprintf_r+0x1bc>
 8016c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c74:	07d9      	lsls	r1, r3, #31
 8016c76:	d405      	bmi.n	8016c84 <_vfiprintf_r+0x220>
 8016c78:	89ab      	ldrh	r3, [r5, #12]
 8016c7a:	059a      	lsls	r2, r3, #22
 8016c7c:	d402      	bmi.n	8016c84 <_vfiprintf_r+0x220>
 8016c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c80:	f7ff fe13 	bl	80168aa <__retarget_lock_release_recursive>
 8016c84:	89ab      	ldrh	r3, [r5, #12]
 8016c86:	065b      	lsls	r3, r3, #25
 8016c88:	f53f af12 	bmi.w	8016ab0 <_vfiprintf_r+0x4c>
 8016c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c8e:	e711      	b.n	8016ab4 <_vfiprintf_r+0x50>
 8016c90:	ab03      	add	r3, sp, #12
 8016c92:	9300      	str	r3, [sp, #0]
 8016c94:	462a      	mov	r2, r5
 8016c96:	4b09      	ldr	r3, [pc, #36]	; (8016cbc <_vfiprintf_r+0x258>)
 8016c98:	a904      	add	r1, sp, #16
 8016c9a:	4630      	mov	r0, r6
 8016c9c:	f000 f880 	bl	8016da0 <_printf_i>
 8016ca0:	e7e4      	b.n	8016c6c <_vfiprintf_r+0x208>
 8016ca2:	bf00      	nop
 8016ca4:	0801b0ac 	.word	0x0801b0ac
 8016ca8:	0801b0cc 	.word	0x0801b0cc
 8016cac:	0801b08c 	.word	0x0801b08c
 8016cb0:	0801b0ec 	.word	0x0801b0ec
 8016cb4:	0801b0f6 	.word	0x0801b0f6
 8016cb8:	00000000 	.word	0x00000000
 8016cbc:	08016a3f 	.word	0x08016a3f
 8016cc0:	0801b0f2 	.word	0x0801b0f2

08016cc4 <_printf_common>:
 8016cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cc8:	4616      	mov	r6, r2
 8016cca:	4699      	mov	r9, r3
 8016ccc:	688a      	ldr	r2, [r1, #8]
 8016cce:	690b      	ldr	r3, [r1, #16]
 8016cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016cd4:	4293      	cmp	r3, r2
 8016cd6:	bfb8      	it	lt
 8016cd8:	4613      	movlt	r3, r2
 8016cda:	6033      	str	r3, [r6, #0]
 8016cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016ce0:	4607      	mov	r7, r0
 8016ce2:	460c      	mov	r4, r1
 8016ce4:	b10a      	cbz	r2, 8016cea <_printf_common+0x26>
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	6033      	str	r3, [r6, #0]
 8016cea:	6823      	ldr	r3, [r4, #0]
 8016cec:	0699      	lsls	r1, r3, #26
 8016cee:	bf42      	ittt	mi
 8016cf0:	6833      	ldrmi	r3, [r6, #0]
 8016cf2:	3302      	addmi	r3, #2
 8016cf4:	6033      	strmi	r3, [r6, #0]
 8016cf6:	6825      	ldr	r5, [r4, #0]
 8016cf8:	f015 0506 	ands.w	r5, r5, #6
 8016cfc:	d106      	bne.n	8016d0c <_printf_common+0x48>
 8016cfe:	f104 0a19 	add.w	sl, r4, #25
 8016d02:	68e3      	ldr	r3, [r4, #12]
 8016d04:	6832      	ldr	r2, [r6, #0]
 8016d06:	1a9b      	subs	r3, r3, r2
 8016d08:	42ab      	cmp	r3, r5
 8016d0a:	dc26      	bgt.n	8016d5a <_printf_common+0x96>
 8016d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016d10:	1e13      	subs	r3, r2, #0
 8016d12:	6822      	ldr	r2, [r4, #0]
 8016d14:	bf18      	it	ne
 8016d16:	2301      	movne	r3, #1
 8016d18:	0692      	lsls	r2, r2, #26
 8016d1a:	d42b      	bmi.n	8016d74 <_printf_common+0xb0>
 8016d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d20:	4649      	mov	r1, r9
 8016d22:	4638      	mov	r0, r7
 8016d24:	47c0      	blx	r8
 8016d26:	3001      	adds	r0, #1
 8016d28:	d01e      	beq.n	8016d68 <_printf_common+0xa4>
 8016d2a:	6823      	ldr	r3, [r4, #0]
 8016d2c:	68e5      	ldr	r5, [r4, #12]
 8016d2e:	6832      	ldr	r2, [r6, #0]
 8016d30:	f003 0306 	and.w	r3, r3, #6
 8016d34:	2b04      	cmp	r3, #4
 8016d36:	bf08      	it	eq
 8016d38:	1aad      	subeq	r5, r5, r2
 8016d3a:	68a3      	ldr	r3, [r4, #8]
 8016d3c:	6922      	ldr	r2, [r4, #16]
 8016d3e:	bf0c      	ite	eq
 8016d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016d44:	2500      	movne	r5, #0
 8016d46:	4293      	cmp	r3, r2
 8016d48:	bfc4      	itt	gt
 8016d4a:	1a9b      	subgt	r3, r3, r2
 8016d4c:	18ed      	addgt	r5, r5, r3
 8016d4e:	2600      	movs	r6, #0
 8016d50:	341a      	adds	r4, #26
 8016d52:	42b5      	cmp	r5, r6
 8016d54:	d11a      	bne.n	8016d8c <_printf_common+0xc8>
 8016d56:	2000      	movs	r0, #0
 8016d58:	e008      	b.n	8016d6c <_printf_common+0xa8>
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	4652      	mov	r2, sl
 8016d5e:	4649      	mov	r1, r9
 8016d60:	4638      	mov	r0, r7
 8016d62:	47c0      	blx	r8
 8016d64:	3001      	adds	r0, #1
 8016d66:	d103      	bne.n	8016d70 <_printf_common+0xac>
 8016d68:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d70:	3501      	adds	r5, #1
 8016d72:	e7c6      	b.n	8016d02 <_printf_common+0x3e>
 8016d74:	18e1      	adds	r1, r4, r3
 8016d76:	1c5a      	adds	r2, r3, #1
 8016d78:	2030      	movs	r0, #48	; 0x30
 8016d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016d7e:	4422      	add	r2, r4
 8016d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016d88:	3302      	adds	r3, #2
 8016d8a:	e7c7      	b.n	8016d1c <_printf_common+0x58>
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	4622      	mov	r2, r4
 8016d90:	4649      	mov	r1, r9
 8016d92:	4638      	mov	r0, r7
 8016d94:	47c0      	blx	r8
 8016d96:	3001      	adds	r0, #1
 8016d98:	d0e6      	beq.n	8016d68 <_printf_common+0xa4>
 8016d9a:	3601      	adds	r6, #1
 8016d9c:	e7d9      	b.n	8016d52 <_printf_common+0x8e>
	...

08016da0 <_printf_i>:
 8016da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016da4:	460c      	mov	r4, r1
 8016da6:	4691      	mov	r9, r2
 8016da8:	7e27      	ldrb	r7, [r4, #24]
 8016daa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016dac:	2f78      	cmp	r7, #120	; 0x78
 8016dae:	4680      	mov	r8, r0
 8016db0:	469a      	mov	sl, r3
 8016db2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016db6:	d807      	bhi.n	8016dc8 <_printf_i+0x28>
 8016db8:	2f62      	cmp	r7, #98	; 0x62
 8016dba:	d80a      	bhi.n	8016dd2 <_printf_i+0x32>
 8016dbc:	2f00      	cmp	r7, #0
 8016dbe:	f000 80d8 	beq.w	8016f72 <_printf_i+0x1d2>
 8016dc2:	2f58      	cmp	r7, #88	; 0x58
 8016dc4:	f000 80a3 	beq.w	8016f0e <_printf_i+0x16e>
 8016dc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016dd0:	e03a      	b.n	8016e48 <_printf_i+0xa8>
 8016dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016dd6:	2b15      	cmp	r3, #21
 8016dd8:	d8f6      	bhi.n	8016dc8 <_printf_i+0x28>
 8016dda:	a001      	add	r0, pc, #4	; (adr r0, 8016de0 <_printf_i+0x40>)
 8016ddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016de0:	08016e39 	.word	0x08016e39
 8016de4:	08016e4d 	.word	0x08016e4d
 8016de8:	08016dc9 	.word	0x08016dc9
 8016dec:	08016dc9 	.word	0x08016dc9
 8016df0:	08016dc9 	.word	0x08016dc9
 8016df4:	08016dc9 	.word	0x08016dc9
 8016df8:	08016e4d 	.word	0x08016e4d
 8016dfc:	08016dc9 	.word	0x08016dc9
 8016e00:	08016dc9 	.word	0x08016dc9
 8016e04:	08016dc9 	.word	0x08016dc9
 8016e08:	08016dc9 	.word	0x08016dc9
 8016e0c:	08016f59 	.word	0x08016f59
 8016e10:	08016e7d 	.word	0x08016e7d
 8016e14:	08016f3b 	.word	0x08016f3b
 8016e18:	08016dc9 	.word	0x08016dc9
 8016e1c:	08016dc9 	.word	0x08016dc9
 8016e20:	08016f7b 	.word	0x08016f7b
 8016e24:	08016dc9 	.word	0x08016dc9
 8016e28:	08016e7d 	.word	0x08016e7d
 8016e2c:	08016dc9 	.word	0x08016dc9
 8016e30:	08016dc9 	.word	0x08016dc9
 8016e34:	08016f43 	.word	0x08016f43
 8016e38:	680b      	ldr	r3, [r1, #0]
 8016e3a:	1d1a      	adds	r2, r3, #4
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	600a      	str	r2, [r1, #0]
 8016e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e48:	2301      	movs	r3, #1
 8016e4a:	e0a3      	b.n	8016f94 <_printf_i+0x1f4>
 8016e4c:	6825      	ldr	r5, [r4, #0]
 8016e4e:	6808      	ldr	r0, [r1, #0]
 8016e50:	062e      	lsls	r6, r5, #24
 8016e52:	f100 0304 	add.w	r3, r0, #4
 8016e56:	d50a      	bpl.n	8016e6e <_printf_i+0xce>
 8016e58:	6805      	ldr	r5, [r0, #0]
 8016e5a:	600b      	str	r3, [r1, #0]
 8016e5c:	2d00      	cmp	r5, #0
 8016e5e:	da03      	bge.n	8016e68 <_printf_i+0xc8>
 8016e60:	232d      	movs	r3, #45	; 0x2d
 8016e62:	426d      	negs	r5, r5
 8016e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e68:	485e      	ldr	r0, [pc, #376]	; (8016fe4 <_printf_i+0x244>)
 8016e6a:	230a      	movs	r3, #10
 8016e6c:	e019      	b.n	8016ea2 <_printf_i+0x102>
 8016e6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016e72:	6805      	ldr	r5, [r0, #0]
 8016e74:	600b      	str	r3, [r1, #0]
 8016e76:	bf18      	it	ne
 8016e78:	b22d      	sxthne	r5, r5
 8016e7a:	e7ef      	b.n	8016e5c <_printf_i+0xbc>
 8016e7c:	680b      	ldr	r3, [r1, #0]
 8016e7e:	6825      	ldr	r5, [r4, #0]
 8016e80:	1d18      	adds	r0, r3, #4
 8016e82:	6008      	str	r0, [r1, #0]
 8016e84:	0628      	lsls	r0, r5, #24
 8016e86:	d501      	bpl.n	8016e8c <_printf_i+0xec>
 8016e88:	681d      	ldr	r5, [r3, #0]
 8016e8a:	e002      	b.n	8016e92 <_printf_i+0xf2>
 8016e8c:	0669      	lsls	r1, r5, #25
 8016e8e:	d5fb      	bpl.n	8016e88 <_printf_i+0xe8>
 8016e90:	881d      	ldrh	r5, [r3, #0]
 8016e92:	4854      	ldr	r0, [pc, #336]	; (8016fe4 <_printf_i+0x244>)
 8016e94:	2f6f      	cmp	r7, #111	; 0x6f
 8016e96:	bf0c      	ite	eq
 8016e98:	2308      	moveq	r3, #8
 8016e9a:	230a      	movne	r3, #10
 8016e9c:	2100      	movs	r1, #0
 8016e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016ea2:	6866      	ldr	r6, [r4, #4]
 8016ea4:	60a6      	str	r6, [r4, #8]
 8016ea6:	2e00      	cmp	r6, #0
 8016ea8:	bfa2      	ittt	ge
 8016eaa:	6821      	ldrge	r1, [r4, #0]
 8016eac:	f021 0104 	bicge.w	r1, r1, #4
 8016eb0:	6021      	strge	r1, [r4, #0]
 8016eb2:	b90d      	cbnz	r5, 8016eb8 <_printf_i+0x118>
 8016eb4:	2e00      	cmp	r6, #0
 8016eb6:	d04d      	beq.n	8016f54 <_printf_i+0x1b4>
 8016eb8:	4616      	mov	r6, r2
 8016eba:	fbb5 f1f3 	udiv	r1, r5, r3
 8016ebe:	fb03 5711 	mls	r7, r3, r1, r5
 8016ec2:	5dc7      	ldrb	r7, [r0, r7]
 8016ec4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ec8:	462f      	mov	r7, r5
 8016eca:	42bb      	cmp	r3, r7
 8016ecc:	460d      	mov	r5, r1
 8016ece:	d9f4      	bls.n	8016eba <_printf_i+0x11a>
 8016ed0:	2b08      	cmp	r3, #8
 8016ed2:	d10b      	bne.n	8016eec <_printf_i+0x14c>
 8016ed4:	6823      	ldr	r3, [r4, #0]
 8016ed6:	07df      	lsls	r7, r3, #31
 8016ed8:	d508      	bpl.n	8016eec <_printf_i+0x14c>
 8016eda:	6923      	ldr	r3, [r4, #16]
 8016edc:	6861      	ldr	r1, [r4, #4]
 8016ede:	4299      	cmp	r1, r3
 8016ee0:	bfde      	ittt	le
 8016ee2:	2330      	movle	r3, #48	; 0x30
 8016ee4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016ee8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016eec:	1b92      	subs	r2, r2, r6
 8016eee:	6122      	str	r2, [r4, #16]
 8016ef0:	f8cd a000 	str.w	sl, [sp]
 8016ef4:	464b      	mov	r3, r9
 8016ef6:	aa03      	add	r2, sp, #12
 8016ef8:	4621      	mov	r1, r4
 8016efa:	4640      	mov	r0, r8
 8016efc:	f7ff fee2 	bl	8016cc4 <_printf_common>
 8016f00:	3001      	adds	r0, #1
 8016f02:	d14c      	bne.n	8016f9e <_printf_i+0x1fe>
 8016f04:	f04f 30ff 	mov.w	r0, #4294967295
 8016f08:	b004      	add	sp, #16
 8016f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f0e:	4835      	ldr	r0, [pc, #212]	; (8016fe4 <_printf_i+0x244>)
 8016f10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016f14:	6823      	ldr	r3, [r4, #0]
 8016f16:	680e      	ldr	r6, [r1, #0]
 8016f18:	061f      	lsls	r7, r3, #24
 8016f1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8016f1e:	600e      	str	r6, [r1, #0]
 8016f20:	d514      	bpl.n	8016f4c <_printf_i+0x1ac>
 8016f22:	07d9      	lsls	r1, r3, #31
 8016f24:	bf44      	itt	mi
 8016f26:	f043 0320 	orrmi.w	r3, r3, #32
 8016f2a:	6023      	strmi	r3, [r4, #0]
 8016f2c:	b91d      	cbnz	r5, 8016f36 <_printf_i+0x196>
 8016f2e:	6823      	ldr	r3, [r4, #0]
 8016f30:	f023 0320 	bic.w	r3, r3, #32
 8016f34:	6023      	str	r3, [r4, #0]
 8016f36:	2310      	movs	r3, #16
 8016f38:	e7b0      	b.n	8016e9c <_printf_i+0xfc>
 8016f3a:	6823      	ldr	r3, [r4, #0]
 8016f3c:	f043 0320 	orr.w	r3, r3, #32
 8016f40:	6023      	str	r3, [r4, #0]
 8016f42:	2378      	movs	r3, #120	; 0x78
 8016f44:	4828      	ldr	r0, [pc, #160]	; (8016fe8 <_printf_i+0x248>)
 8016f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016f4a:	e7e3      	b.n	8016f14 <_printf_i+0x174>
 8016f4c:	065e      	lsls	r6, r3, #25
 8016f4e:	bf48      	it	mi
 8016f50:	b2ad      	uxthmi	r5, r5
 8016f52:	e7e6      	b.n	8016f22 <_printf_i+0x182>
 8016f54:	4616      	mov	r6, r2
 8016f56:	e7bb      	b.n	8016ed0 <_printf_i+0x130>
 8016f58:	680b      	ldr	r3, [r1, #0]
 8016f5a:	6826      	ldr	r6, [r4, #0]
 8016f5c:	6960      	ldr	r0, [r4, #20]
 8016f5e:	1d1d      	adds	r5, r3, #4
 8016f60:	600d      	str	r5, [r1, #0]
 8016f62:	0635      	lsls	r5, r6, #24
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	d501      	bpl.n	8016f6c <_printf_i+0x1cc>
 8016f68:	6018      	str	r0, [r3, #0]
 8016f6a:	e002      	b.n	8016f72 <_printf_i+0x1d2>
 8016f6c:	0671      	lsls	r1, r6, #25
 8016f6e:	d5fb      	bpl.n	8016f68 <_printf_i+0x1c8>
 8016f70:	8018      	strh	r0, [r3, #0]
 8016f72:	2300      	movs	r3, #0
 8016f74:	6123      	str	r3, [r4, #16]
 8016f76:	4616      	mov	r6, r2
 8016f78:	e7ba      	b.n	8016ef0 <_printf_i+0x150>
 8016f7a:	680b      	ldr	r3, [r1, #0]
 8016f7c:	1d1a      	adds	r2, r3, #4
 8016f7e:	600a      	str	r2, [r1, #0]
 8016f80:	681e      	ldr	r6, [r3, #0]
 8016f82:	6862      	ldr	r2, [r4, #4]
 8016f84:	2100      	movs	r1, #0
 8016f86:	4630      	mov	r0, r6
 8016f88:	f7e9 f9ca 	bl	8000320 <memchr>
 8016f8c:	b108      	cbz	r0, 8016f92 <_printf_i+0x1f2>
 8016f8e:	1b80      	subs	r0, r0, r6
 8016f90:	6060      	str	r0, [r4, #4]
 8016f92:	6863      	ldr	r3, [r4, #4]
 8016f94:	6123      	str	r3, [r4, #16]
 8016f96:	2300      	movs	r3, #0
 8016f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f9c:	e7a8      	b.n	8016ef0 <_printf_i+0x150>
 8016f9e:	6923      	ldr	r3, [r4, #16]
 8016fa0:	4632      	mov	r2, r6
 8016fa2:	4649      	mov	r1, r9
 8016fa4:	4640      	mov	r0, r8
 8016fa6:	47d0      	blx	sl
 8016fa8:	3001      	adds	r0, #1
 8016faa:	d0ab      	beq.n	8016f04 <_printf_i+0x164>
 8016fac:	6823      	ldr	r3, [r4, #0]
 8016fae:	079b      	lsls	r3, r3, #30
 8016fb0:	d413      	bmi.n	8016fda <_printf_i+0x23a>
 8016fb2:	68e0      	ldr	r0, [r4, #12]
 8016fb4:	9b03      	ldr	r3, [sp, #12]
 8016fb6:	4298      	cmp	r0, r3
 8016fb8:	bfb8      	it	lt
 8016fba:	4618      	movlt	r0, r3
 8016fbc:	e7a4      	b.n	8016f08 <_printf_i+0x168>
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	4632      	mov	r2, r6
 8016fc2:	4649      	mov	r1, r9
 8016fc4:	4640      	mov	r0, r8
 8016fc6:	47d0      	blx	sl
 8016fc8:	3001      	adds	r0, #1
 8016fca:	d09b      	beq.n	8016f04 <_printf_i+0x164>
 8016fcc:	3501      	adds	r5, #1
 8016fce:	68e3      	ldr	r3, [r4, #12]
 8016fd0:	9903      	ldr	r1, [sp, #12]
 8016fd2:	1a5b      	subs	r3, r3, r1
 8016fd4:	42ab      	cmp	r3, r5
 8016fd6:	dcf2      	bgt.n	8016fbe <_printf_i+0x21e>
 8016fd8:	e7eb      	b.n	8016fb2 <_printf_i+0x212>
 8016fda:	2500      	movs	r5, #0
 8016fdc:	f104 0619 	add.w	r6, r4, #25
 8016fe0:	e7f5      	b.n	8016fce <_printf_i+0x22e>
 8016fe2:	bf00      	nop
 8016fe4:	0801b0fd 	.word	0x0801b0fd
 8016fe8:	0801b10e 	.word	0x0801b10e

08016fec <_sbrk_r>:
 8016fec:	b538      	push	{r3, r4, r5, lr}
 8016fee:	4d06      	ldr	r5, [pc, #24]	; (8017008 <_sbrk_r+0x1c>)
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	4608      	mov	r0, r1
 8016ff6:	602b      	str	r3, [r5, #0]
 8016ff8:	f7ec fa08 	bl	800340c <_sbrk>
 8016ffc:	1c43      	adds	r3, r0, #1
 8016ffe:	d102      	bne.n	8017006 <_sbrk_r+0x1a>
 8017000:	682b      	ldr	r3, [r5, #0]
 8017002:	b103      	cbz	r3, 8017006 <_sbrk_r+0x1a>
 8017004:	6023      	str	r3, [r4, #0]
 8017006:	bd38      	pop	{r3, r4, r5, pc}
 8017008:	24003630 	.word	0x24003630

0801700c <__sread>:
 801700c:	b510      	push	{r4, lr}
 801700e:	460c      	mov	r4, r1
 8017010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017014:	f000 fa6c 	bl	80174f0 <_read_r>
 8017018:	2800      	cmp	r0, #0
 801701a:	bfab      	itete	ge
 801701c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801701e:	89a3      	ldrhlt	r3, [r4, #12]
 8017020:	181b      	addge	r3, r3, r0
 8017022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017026:	bfac      	ite	ge
 8017028:	6563      	strge	r3, [r4, #84]	; 0x54
 801702a:	81a3      	strhlt	r3, [r4, #12]
 801702c:	bd10      	pop	{r4, pc}

0801702e <__swrite>:
 801702e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017032:	461f      	mov	r7, r3
 8017034:	898b      	ldrh	r3, [r1, #12]
 8017036:	05db      	lsls	r3, r3, #23
 8017038:	4605      	mov	r5, r0
 801703a:	460c      	mov	r4, r1
 801703c:	4616      	mov	r6, r2
 801703e:	d505      	bpl.n	801704c <__swrite+0x1e>
 8017040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017044:	2302      	movs	r3, #2
 8017046:	2200      	movs	r2, #0
 8017048:	f000 f9d0 	bl	80173ec <_lseek_r>
 801704c:	89a3      	ldrh	r3, [r4, #12]
 801704e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017056:	81a3      	strh	r3, [r4, #12]
 8017058:	4632      	mov	r2, r6
 801705a:	463b      	mov	r3, r7
 801705c:	4628      	mov	r0, r5
 801705e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017062:	f000 b869 	b.w	8017138 <_write_r>

08017066 <__sseek>:
 8017066:	b510      	push	{r4, lr}
 8017068:	460c      	mov	r4, r1
 801706a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801706e:	f000 f9bd 	bl	80173ec <_lseek_r>
 8017072:	1c43      	adds	r3, r0, #1
 8017074:	89a3      	ldrh	r3, [r4, #12]
 8017076:	bf15      	itete	ne
 8017078:	6560      	strne	r0, [r4, #84]	; 0x54
 801707a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801707e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017082:	81a3      	strheq	r3, [r4, #12]
 8017084:	bf18      	it	ne
 8017086:	81a3      	strhne	r3, [r4, #12]
 8017088:	bd10      	pop	{r4, pc}

0801708a <__sclose>:
 801708a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801708e:	f000 b8db 	b.w	8017248 <_close_r>
	...

08017094 <__swbuf_r>:
 8017094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017096:	460e      	mov	r6, r1
 8017098:	4614      	mov	r4, r2
 801709a:	4605      	mov	r5, r0
 801709c:	b118      	cbz	r0, 80170a6 <__swbuf_r+0x12>
 801709e:	6983      	ldr	r3, [r0, #24]
 80170a0:	b90b      	cbnz	r3, 80170a6 <__swbuf_r+0x12>
 80170a2:	f7ff fb51 	bl	8016748 <__sinit>
 80170a6:	4b21      	ldr	r3, [pc, #132]	; (801712c <__swbuf_r+0x98>)
 80170a8:	429c      	cmp	r4, r3
 80170aa:	d12b      	bne.n	8017104 <__swbuf_r+0x70>
 80170ac:	686c      	ldr	r4, [r5, #4]
 80170ae:	69a3      	ldr	r3, [r4, #24]
 80170b0:	60a3      	str	r3, [r4, #8]
 80170b2:	89a3      	ldrh	r3, [r4, #12]
 80170b4:	071a      	lsls	r2, r3, #28
 80170b6:	d52f      	bpl.n	8017118 <__swbuf_r+0x84>
 80170b8:	6923      	ldr	r3, [r4, #16]
 80170ba:	b36b      	cbz	r3, 8017118 <__swbuf_r+0x84>
 80170bc:	6923      	ldr	r3, [r4, #16]
 80170be:	6820      	ldr	r0, [r4, #0]
 80170c0:	1ac0      	subs	r0, r0, r3
 80170c2:	6963      	ldr	r3, [r4, #20]
 80170c4:	b2f6      	uxtb	r6, r6
 80170c6:	4283      	cmp	r3, r0
 80170c8:	4637      	mov	r7, r6
 80170ca:	dc04      	bgt.n	80170d6 <__swbuf_r+0x42>
 80170cc:	4621      	mov	r1, r4
 80170ce:	4628      	mov	r0, r5
 80170d0:	f000 f950 	bl	8017374 <_fflush_r>
 80170d4:	bb30      	cbnz	r0, 8017124 <__swbuf_r+0x90>
 80170d6:	68a3      	ldr	r3, [r4, #8]
 80170d8:	3b01      	subs	r3, #1
 80170da:	60a3      	str	r3, [r4, #8]
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	6022      	str	r2, [r4, #0]
 80170e2:	701e      	strb	r6, [r3, #0]
 80170e4:	6963      	ldr	r3, [r4, #20]
 80170e6:	3001      	adds	r0, #1
 80170e8:	4283      	cmp	r3, r0
 80170ea:	d004      	beq.n	80170f6 <__swbuf_r+0x62>
 80170ec:	89a3      	ldrh	r3, [r4, #12]
 80170ee:	07db      	lsls	r3, r3, #31
 80170f0:	d506      	bpl.n	8017100 <__swbuf_r+0x6c>
 80170f2:	2e0a      	cmp	r6, #10
 80170f4:	d104      	bne.n	8017100 <__swbuf_r+0x6c>
 80170f6:	4621      	mov	r1, r4
 80170f8:	4628      	mov	r0, r5
 80170fa:	f000 f93b 	bl	8017374 <_fflush_r>
 80170fe:	b988      	cbnz	r0, 8017124 <__swbuf_r+0x90>
 8017100:	4638      	mov	r0, r7
 8017102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017104:	4b0a      	ldr	r3, [pc, #40]	; (8017130 <__swbuf_r+0x9c>)
 8017106:	429c      	cmp	r4, r3
 8017108:	d101      	bne.n	801710e <__swbuf_r+0x7a>
 801710a:	68ac      	ldr	r4, [r5, #8]
 801710c:	e7cf      	b.n	80170ae <__swbuf_r+0x1a>
 801710e:	4b09      	ldr	r3, [pc, #36]	; (8017134 <__swbuf_r+0xa0>)
 8017110:	429c      	cmp	r4, r3
 8017112:	bf08      	it	eq
 8017114:	68ec      	ldreq	r4, [r5, #12]
 8017116:	e7ca      	b.n	80170ae <__swbuf_r+0x1a>
 8017118:	4621      	mov	r1, r4
 801711a:	4628      	mov	r0, r5
 801711c:	f000 f81e 	bl	801715c <__swsetup_r>
 8017120:	2800      	cmp	r0, #0
 8017122:	d0cb      	beq.n	80170bc <__swbuf_r+0x28>
 8017124:	f04f 37ff 	mov.w	r7, #4294967295
 8017128:	e7ea      	b.n	8017100 <__swbuf_r+0x6c>
 801712a:	bf00      	nop
 801712c:	0801b0ac 	.word	0x0801b0ac
 8017130:	0801b0cc 	.word	0x0801b0cc
 8017134:	0801b08c 	.word	0x0801b08c

08017138 <_write_r>:
 8017138:	b538      	push	{r3, r4, r5, lr}
 801713a:	4d07      	ldr	r5, [pc, #28]	; (8017158 <_write_r+0x20>)
 801713c:	4604      	mov	r4, r0
 801713e:	4608      	mov	r0, r1
 8017140:	4611      	mov	r1, r2
 8017142:	2200      	movs	r2, #0
 8017144:	602a      	str	r2, [r5, #0]
 8017146:	461a      	mov	r2, r3
 8017148:	f7ec f90f 	bl	800336a <_write>
 801714c:	1c43      	adds	r3, r0, #1
 801714e:	d102      	bne.n	8017156 <_write_r+0x1e>
 8017150:	682b      	ldr	r3, [r5, #0]
 8017152:	b103      	cbz	r3, 8017156 <_write_r+0x1e>
 8017154:	6023      	str	r3, [r4, #0]
 8017156:	bd38      	pop	{r3, r4, r5, pc}
 8017158:	24003630 	.word	0x24003630

0801715c <__swsetup_r>:
 801715c:	4b32      	ldr	r3, [pc, #200]	; (8017228 <__swsetup_r+0xcc>)
 801715e:	b570      	push	{r4, r5, r6, lr}
 8017160:	681d      	ldr	r5, [r3, #0]
 8017162:	4606      	mov	r6, r0
 8017164:	460c      	mov	r4, r1
 8017166:	b125      	cbz	r5, 8017172 <__swsetup_r+0x16>
 8017168:	69ab      	ldr	r3, [r5, #24]
 801716a:	b913      	cbnz	r3, 8017172 <__swsetup_r+0x16>
 801716c:	4628      	mov	r0, r5
 801716e:	f7ff faeb 	bl	8016748 <__sinit>
 8017172:	4b2e      	ldr	r3, [pc, #184]	; (801722c <__swsetup_r+0xd0>)
 8017174:	429c      	cmp	r4, r3
 8017176:	d10f      	bne.n	8017198 <__swsetup_r+0x3c>
 8017178:	686c      	ldr	r4, [r5, #4]
 801717a:	89a3      	ldrh	r3, [r4, #12]
 801717c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017180:	0719      	lsls	r1, r3, #28
 8017182:	d42c      	bmi.n	80171de <__swsetup_r+0x82>
 8017184:	06dd      	lsls	r5, r3, #27
 8017186:	d411      	bmi.n	80171ac <__swsetup_r+0x50>
 8017188:	2309      	movs	r3, #9
 801718a:	6033      	str	r3, [r6, #0]
 801718c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017190:	81a3      	strh	r3, [r4, #12]
 8017192:	f04f 30ff 	mov.w	r0, #4294967295
 8017196:	e03e      	b.n	8017216 <__swsetup_r+0xba>
 8017198:	4b25      	ldr	r3, [pc, #148]	; (8017230 <__swsetup_r+0xd4>)
 801719a:	429c      	cmp	r4, r3
 801719c:	d101      	bne.n	80171a2 <__swsetup_r+0x46>
 801719e:	68ac      	ldr	r4, [r5, #8]
 80171a0:	e7eb      	b.n	801717a <__swsetup_r+0x1e>
 80171a2:	4b24      	ldr	r3, [pc, #144]	; (8017234 <__swsetup_r+0xd8>)
 80171a4:	429c      	cmp	r4, r3
 80171a6:	bf08      	it	eq
 80171a8:	68ec      	ldreq	r4, [r5, #12]
 80171aa:	e7e6      	b.n	801717a <__swsetup_r+0x1e>
 80171ac:	0758      	lsls	r0, r3, #29
 80171ae:	d512      	bpl.n	80171d6 <__swsetup_r+0x7a>
 80171b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171b2:	b141      	cbz	r1, 80171c6 <__swsetup_r+0x6a>
 80171b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171b8:	4299      	cmp	r1, r3
 80171ba:	d002      	beq.n	80171c2 <__swsetup_r+0x66>
 80171bc:	4630      	mov	r0, r6
 80171be:	f7ff fb7d 	bl	80168bc <_free_r>
 80171c2:	2300      	movs	r3, #0
 80171c4:	6363      	str	r3, [r4, #52]	; 0x34
 80171c6:	89a3      	ldrh	r3, [r4, #12]
 80171c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80171cc:	81a3      	strh	r3, [r4, #12]
 80171ce:	2300      	movs	r3, #0
 80171d0:	6063      	str	r3, [r4, #4]
 80171d2:	6923      	ldr	r3, [r4, #16]
 80171d4:	6023      	str	r3, [r4, #0]
 80171d6:	89a3      	ldrh	r3, [r4, #12]
 80171d8:	f043 0308 	orr.w	r3, r3, #8
 80171dc:	81a3      	strh	r3, [r4, #12]
 80171de:	6923      	ldr	r3, [r4, #16]
 80171e0:	b94b      	cbnz	r3, 80171f6 <__swsetup_r+0x9a>
 80171e2:	89a3      	ldrh	r3, [r4, #12]
 80171e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80171e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171ec:	d003      	beq.n	80171f6 <__swsetup_r+0x9a>
 80171ee:	4621      	mov	r1, r4
 80171f0:	4630      	mov	r0, r6
 80171f2:	f000 f931 	bl	8017458 <__smakebuf_r>
 80171f6:	89a0      	ldrh	r0, [r4, #12]
 80171f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171fc:	f010 0301 	ands.w	r3, r0, #1
 8017200:	d00a      	beq.n	8017218 <__swsetup_r+0xbc>
 8017202:	2300      	movs	r3, #0
 8017204:	60a3      	str	r3, [r4, #8]
 8017206:	6963      	ldr	r3, [r4, #20]
 8017208:	425b      	negs	r3, r3
 801720a:	61a3      	str	r3, [r4, #24]
 801720c:	6923      	ldr	r3, [r4, #16]
 801720e:	b943      	cbnz	r3, 8017222 <__swsetup_r+0xc6>
 8017210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017214:	d1ba      	bne.n	801718c <__swsetup_r+0x30>
 8017216:	bd70      	pop	{r4, r5, r6, pc}
 8017218:	0781      	lsls	r1, r0, #30
 801721a:	bf58      	it	pl
 801721c:	6963      	ldrpl	r3, [r4, #20]
 801721e:	60a3      	str	r3, [r4, #8]
 8017220:	e7f4      	b.n	801720c <__swsetup_r+0xb0>
 8017222:	2000      	movs	r0, #0
 8017224:	e7f7      	b.n	8017216 <__swsetup_r+0xba>
 8017226:	bf00      	nop
 8017228:	24000038 	.word	0x24000038
 801722c:	0801b0ac 	.word	0x0801b0ac
 8017230:	0801b0cc 	.word	0x0801b0cc
 8017234:	0801b08c 	.word	0x0801b08c

08017238 <abort>:
 8017238:	b508      	push	{r3, lr}
 801723a:	2006      	movs	r0, #6
 801723c:	f000 f992 	bl	8017564 <raise>
 8017240:	2001      	movs	r0, #1
 8017242:	f7ec f86b 	bl	800331c <_exit>
	...

08017248 <_close_r>:
 8017248:	b538      	push	{r3, r4, r5, lr}
 801724a:	4d06      	ldr	r5, [pc, #24]	; (8017264 <_close_r+0x1c>)
 801724c:	2300      	movs	r3, #0
 801724e:	4604      	mov	r4, r0
 8017250:	4608      	mov	r0, r1
 8017252:	602b      	str	r3, [r5, #0]
 8017254:	f7ec f8a5 	bl	80033a2 <_close>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_close_r+0x1a>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_close_r+0x1a>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	24003630 	.word	0x24003630

08017268 <__sflush_r>:
 8017268:	898a      	ldrh	r2, [r1, #12]
 801726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801726e:	4605      	mov	r5, r0
 8017270:	0710      	lsls	r0, r2, #28
 8017272:	460c      	mov	r4, r1
 8017274:	d458      	bmi.n	8017328 <__sflush_r+0xc0>
 8017276:	684b      	ldr	r3, [r1, #4]
 8017278:	2b00      	cmp	r3, #0
 801727a:	dc05      	bgt.n	8017288 <__sflush_r+0x20>
 801727c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801727e:	2b00      	cmp	r3, #0
 8017280:	dc02      	bgt.n	8017288 <__sflush_r+0x20>
 8017282:	2000      	movs	r0, #0
 8017284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801728a:	2e00      	cmp	r6, #0
 801728c:	d0f9      	beq.n	8017282 <__sflush_r+0x1a>
 801728e:	2300      	movs	r3, #0
 8017290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017294:	682f      	ldr	r7, [r5, #0]
 8017296:	602b      	str	r3, [r5, #0]
 8017298:	d032      	beq.n	8017300 <__sflush_r+0x98>
 801729a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801729c:	89a3      	ldrh	r3, [r4, #12]
 801729e:	075a      	lsls	r2, r3, #29
 80172a0:	d505      	bpl.n	80172ae <__sflush_r+0x46>
 80172a2:	6863      	ldr	r3, [r4, #4]
 80172a4:	1ac0      	subs	r0, r0, r3
 80172a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172a8:	b10b      	cbz	r3, 80172ae <__sflush_r+0x46>
 80172aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172ac:	1ac0      	subs	r0, r0, r3
 80172ae:	2300      	movs	r3, #0
 80172b0:	4602      	mov	r2, r0
 80172b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172b4:	6a21      	ldr	r1, [r4, #32]
 80172b6:	4628      	mov	r0, r5
 80172b8:	47b0      	blx	r6
 80172ba:	1c43      	adds	r3, r0, #1
 80172bc:	89a3      	ldrh	r3, [r4, #12]
 80172be:	d106      	bne.n	80172ce <__sflush_r+0x66>
 80172c0:	6829      	ldr	r1, [r5, #0]
 80172c2:	291d      	cmp	r1, #29
 80172c4:	d82c      	bhi.n	8017320 <__sflush_r+0xb8>
 80172c6:	4a2a      	ldr	r2, [pc, #168]	; (8017370 <__sflush_r+0x108>)
 80172c8:	40ca      	lsrs	r2, r1
 80172ca:	07d6      	lsls	r6, r2, #31
 80172cc:	d528      	bpl.n	8017320 <__sflush_r+0xb8>
 80172ce:	2200      	movs	r2, #0
 80172d0:	6062      	str	r2, [r4, #4]
 80172d2:	04d9      	lsls	r1, r3, #19
 80172d4:	6922      	ldr	r2, [r4, #16]
 80172d6:	6022      	str	r2, [r4, #0]
 80172d8:	d504      	bpl.n	80172e4 <__sflush_r+0x7c>
 80172da:	1c42      	adds	r2, r0, #1
 80172dc:	d101      	bne.n	80172e2 <__sflush_r+0x7a>
 80172de:	682b      	ldr	r3, [r5, #0]
 80172e0:	b903      	cbnz	r3, 80172e4 <__sflush_r+0x7c>
 80172e2:	6560      	str	r0, [r4, #84]	; 0x54
 80172e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172e6:	602f      	str	r7, [r5, #0]
 80172e8:	2900      	cmp	r1, #0
 80172ea:	d0ca      	beq.n	8017282 <__sflush_r+0x1a>
 80172ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172f0:	4299      	cmp	r1, r3
 80172f2:	d002      	beq.n	80172fa <__sflush_r+0x92>
 80172f4:	4628      	mov	r0, r5
 80172f6:	f7ff fae1 	bl	80168bc <_free_r>
 80172fa:	2000      	movs	r0, #0
 80172fc:	6360      	str	r0, [r4, #52]	; 0x34
 80172fe:	e7c1      	b.n	8017284 <__sflush_r+0x1c>
 8017300:	6a21      	ldr	r1, [r4, #32]
 8017302:	2301      	movs	r3, #1
 8017304:	4628      	mov	r0, r5
 8017306:	47b0      	blx	r6
 8017308:	1c41      	adds	r1, r0, #1
 801730a:	d1c7      	bne.n	801729c <__sflush_r+0x34>
 801730c:	682b      	ldr	r3, [r5, #0]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d0c4      	beq.n	801729c <__sflush_r+0x34>
 8017312:	2b1d      	cmp	r3, #29
 8017314:	d001      	beq.n	801731a <__sflush_r+0xb2>
 8017316:	2b16      	cmp	r3, #22
 8017318:	d101      	bne.n	801731e <__sflush_r+0xb6>
 801731a:	602f      	str	r7, [r5, #0]
 801731c:	e7b1      	b.n	8017282 <__sflush_r+0x1a>
 801731e:	89a3      	ldrh	r3, [r4, #12]
 8017320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017324:	81a3      	strh	r3, [r4, #12]
 8017326:	e7ad      	b.n	8017284 <__sflush_r+0x1c>
 8017328:	690f      	ldr	r7, [r1, #16]
 801732a:	2f00      	cmp	r7, #0
 801732c:	d0a9      	beq.n	8017282 <__sflush_r+0x1a>
 801732e:	0793      	lsls	r3, r2, #30
 8017330:	680e      	ldr	r6, [r1, #0]
 8017332:	bf08      	it	eq
 8017334:	694b      	ldreq	r3, [r1, #20]
 8017336:	600f      	str	r7, [r1, #0]
 8017338:	bf18      	it	ne
 801733a:	2300      	movne	r3, #0
 801733c:	eba6 0807 	sub.w	r8, r6, r7
 8017340:	608b      	str	r3, [r1, #8]
 8017342:	f1b8 0f00 	cmp.w	r8, #0
 8017346:	dd9c      	ble.n	8017282 <__sflush_r+0x1a>
 8017348:	6a21      	ldr	r1, [r4, #32]
 801734a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801734c:	4643      	mov	r3, r8
 801734e:	463a      	mov	r2, r7
 8017350:	4628      	mov	r0, r5
 8017352:	47b0      	blx	r6
 8017354:	2800      	cmp	r0, #0
 8017356:	dc06      	bgt.n	8017366 <__sflush_r+0xfe>
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801735e:	81a3      	strh	r3, [r4, #12]
 8017360:	f04f 30ff 	mov.w	r0, #4294967295
 8017364:	e78e      	b.n	8017284 <__sflush_r+0x1c>
 8017366:	4407      	add	r7, r0
 8017368:	eba8 0800 	sub.w	r8, r8, r0
 801736c:	e7e9      	b.n	8017342 <__sflush_r+0xda>
 801736e:	bf00      	nop
 8017370:	20400001 	.word	0x20400001

08017374 <_fflush_r>:
 8017374:	b538      	push	{r3, r4, r5, lr}
 8017376:	690b      	ldr	r3, [r1, #16]
 8017378:	4605      	mov	r5, r0
 801737a:	460c      	mov	r4, r1
 801737c:	b913      	cbnz	r3, 8017384 <_fflush_r+0x10>
 801737e:	2500      	movs	r5, #0
 8017380:	4628      	mov	r0, r5
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	b118      	cbz	r0, 801738e <_fflush_r+0x1a>
 8017386:	6983      	ldr	r3, [r0, #24]
 8017388:	b90b      	cbnz	r3, 801738e <_fflush_r+0x1a>
 801738a:	f7ff f9dd 	bl	8016748 <__sinit>
 801738e:	4b14      	ldr	r3, [pc, #80]	; (80173e0 <_fflush_r+0x6c>)
 8017390:	429c      	cmp	r4, r3
 8017392:	d11b      	bne.n	80173cc <_fflush_r+0x58>
 8017394:	686c      	ldr	r4, [r5, #4]
 8017396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d0ef      	beq.n	801737e <_fflush_r+0xa>
 801739e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173a0:	07d0      	lsls	r0, r2, #31
 80173a2:	d404      	bmi.n	80173ae <_fflush_r+0x3a>
 80173a4:	0599      	lsls	r1, r3, #22
 80173a6:	d402      	bmi.n	80173ae <_fflush_r+0x3a>
 80173a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173aa:	f7ff fa7d 	bl	80168a8 <__retarget_lock_acquire_recursive>
 80173ae:	4628      	mov	r0, r5
 80173b0:	4621      	mov	r1, r4
 80173b2:	f7ff ff59 	bl	8017268 <__sflush_r>
 80173b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173b8:	07da      	lsls	r2, r3, #31
 80173ba:	4605      	mov	r5, r0
 80173bc:	d4e0      	bmi.n	8017380 <_fflush_r+0xc>
 80173be:	89a3      	ldrh	r3, [r4, #12]
 80173c0:	059b      	lsls	r3, r3, #22
 80173c2:	d4dd      	bmi.n	8017380 <_fflush_r+0xc>
 80173c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173c6:	f7ff fa70 	bl	80168aa <__retarget_lock_release_recursive>
 80173ca:	e7d9      	b.n	8017380 <_fflush_r+0xc>
 80173cc:	4b05      	ldr	r3, [pc, #20]	; (80173e4 <_fflush_r+0x70>)
 80173ce:	429c      	cmp	r4, r3
 80173d0:	d101      	bne.n	80173d6 <_fflush_r+0x62>
 80173d2:	68ac      	ldr	r4, [r5, #8]
 80173d4:	e7df      	b.n	8017396 <_fflush_r+0x22>
 80173d6:	4b04      	ldr	r3, [pc, #16]	; (80173e8 <_fflush_r+0x74>)
 80173d8:	429c      	cmp	r4, r3
 80173da:	bf08      	it	eq
 80173dc:	68ec      	ldreq	r4, [r5, #12]
 80173de:	e7da      	b.n	8017396 <_fflush_r+0x22>
 80173e0:	0801b0ac 	.word	0x0801b0ac
 80173e4:	0801b0cc 	.word	0x0801b0cc
 80173e8:	0801b08c 	.word	0x0801b08c

080173ec <_lseek_r>:
 80173ec:	b538      	push	{r3, r4, r5, lr}
 80173ee:	4d07      	ldr	r5, [pc, #28]	; (801740c <_lseek_r+0x20>)
 80173f0:	4604      	mov	r4, r0
 80173f2:	4608      	mov	r0, r1
 80173f4:	4611      	mov	r1, r2
 80173f6:	2200      	movs	r2, #0
 80173f8:	602a      	str	r2, [r5, #0]
 80173fa:	461a      	mov	r2, r3
 80173fc:	f7eb fff8 	bl	80033f0 <_lseek>
 8017400:	1c43      	adds	r3, r0, #1
 8017402:	d102      	bne.n	801740a <_lseek_r+0x1e>
 8017404:	682b      	ldr	r3, [r5, #0]
 8017406:	b103      	cbz	r3, 801740a <_lseek_r+0x1e>
 8017408:	6023      	str	r3, [r4, #0]
 801740a:	bd38      	pop	{r3, r4, r5, pc}
 801740c:	24003630 	.word	0x24003630

08017410 <__swhatbuf_r>:
 8017410:	b570      	push	{r4, r5, r6, lr}
 8017412:	460e      	mov	r6, r1
 8017414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017418:	2900      	cmp	r1, #0
 801741a:	b096      	sub	sp, #88	; 0x58
 801741c:	4614      	mov	r4, r2
 801741e:	461d      	mov	r5, r3
 8017420:	da07      	bge.n	8017432 <__swhatbuf_r+0x22>
 8017422:	2300      	movs	r3, #0
 8017424:	602b      	str	r3, [r5, #0]
 8017426:	89b3      	ldrh	r3, [r6, #12]
 8017428:	061a      	lsls	r2, r3, #24
 801742a:	d410      	bmi.n	801744e <__swhatbuf_r+0x3e>
 801742c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017430:	e00e      	b.n	8017450 <__swhatbuf_r+0x40>
 8017432:	466a      	mov	r2, sp
 8017434:	f000 f8b2 	bl	801759c <_fstat_r>
 8017438:	2800      	cmp	r0, #0
 801743a:	dbf2      	blt.n	8017422 <__swhatbuf_r+0x12>
 801743c:	9a01      	ldr	r2, [sp, #4]
 801743e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017446:	425a      	negs	r2, r3
 8017448:	415a      	adcs	r2, r3
 801744a:	602a      	str	r2, [r5, #0]
 801744c:	e7ee      	b.n	801742c <__swhatbuf_r+0x1c>
 801744e:	2340      	movs	r3, #64	; 0x40
 8017450:	2000      	movs	r0, #0
 8017452:	6023      	str	r3, [r4, #0]
 8017454:	b016      	add	sp, #88	; 0x58
 8017456:	bd70      	pop	{r4, r5, r6, pc}

08017458 <__smakebuf_r>:
 8017458:	898b      	ldrh	r3, [r1, #12]
 801745a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801745c:	079d      	lsls	r5, r3, #30
 801745e:	4606      	mov	r6, r0
 8017460:	460c      	mov	r4, r1
 8017462:	d507      	bpl.n	8017474 <__smakebuf_r+0x1c>
 8017464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017468:	6023      	str	r3, [r4, #0]
 801746a:	6123      	str	r3, [r4, #16]
 801746c:	2301      	movs	r3, #1
 801746e:	6163      	str	r3, [r4, #20]
 8017470:	b002      	add	sp, #8
 8017472:	bd70      	pop	{r4, r5, r6, pc}
 8017474:	ab01      	add	r3, sp, #4
 8017476:	466a      	mov	r2, sp
 8017478:	f7ff ffca 	bl	8017410 <__swhatbuf_r>
 801747c:	9900      	ldr	r1, [sp, #0]
 801747e:	4605      	mov	r5, r0
 8017480:	4630      	mov	r0, r6
 8017482:	f7ff fa6b 	bl	801695c <_malloc_r>
 8017486:	b948      	cbnz	r0, 801749c <__smakebuf_r+0x44>
 8017488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801748c:	059a      	lsls	r2, r3, #22
 801748e:	d4ef      	bmi.n	8017470 <__smakebuf_r+0x18>
 8017490:	f023 0303 	bic.w	r3, r3, #3
 8017494:	f043 0302 	orr.w	r3, r3, #2
 8017498:	81a3      	strh	r3, [r4, #12]
 801749a:	e7e3      	b.n	8017464 <__smakebuf_r+0xc>
 801749c:	4b0d      	ldr	r3, [pc, #52]	; (80174d4 <__smakebuf_r+0x7c>)
 801749e:	62b3      	str	r3, [r6, #40]	; 0x28
 80174a0:	89a3      	ldrh	r3, [r4, #12]
 80174a2:	6020      	str	r0, [r4, #0]
 80174a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174a8:	81a3      	strh	r3, [r4, #12]
 80174aa:	9b00      	ldr	r3, [sp, #0]
 80174ac:	6163      	str	r3, [r4, #20]
 80174ae:	9b01      	ldr	r3, [sp, #4]
 80174b0:	6120      	str	r0, [r4, #16]
 80174b2:	b15b      	cbz	r3, 80174cc <__smakebuf_r+0x74>
 80174b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174b8:	4630      	mov	r0, r6
 80174ba:	f000 f881 	bl	80175c0 <_isatty_r>
 80174be:	b128      	cbz	r0, 80174cc <__smakebuf_r+0x74>
 80174c0:	89a3      	ldrh	r3, [r4, #12]
 80174c2:	f023 0303 	bic.w	r3, r3, #3
 80174c6:	f043 0301 	orr.w	r3, r3, #1
 80174ca:	81a3      	strh	r3, [r4, #12]
 80174cc:	89a0      	ldrh	r0, [r4, #12]
 80174ce:	4305      	orrs	r5, r0
 80174d0:	81a5      	strh	r5, [r4, #12]
 80174d2:	e7cd      	b.n	8017470 <__smakebuf_r+0x18>
 80174d4:	080166e1 	.word	0x080166e1

080174d8 <__malloc_lock>:
 80174d8:	4801      	ldr	r0, [pc, #4]	; (80174e0 <__malloc_lock+0x8>)
 80174da:	f7ff b9e5 	b.w	80168a8 <__retarget_lock_acquire_recursive>
 80174de:	bf00      	nop
 80174e0:	24003638 	.word	0x24003638

080174e4 <__malloc_unlock>:
 80174e4:	4801      	ldr	r0, [pc, #4]	; (80174ec <__malloc_unlock+0x8>)
 80174e6:	f7ff b9e0 	b.w	80168aa <__retarget_lock_release_recursive>
 80174ea:	bf00      	nop
 80174ec:	24003638 	.word	0x24003638

080174f0 <_read_r>:
 80174f0:	b538      	push	{r3, r4, r5, lr}
 80174f2:	4d07      	ldr	r5, [pc, #28]	; (8017510 <_read_r+0x20>)
 80174f4:	4604      	mov	r4, r0
 80174f6:	4608      	mov	r0, r1
 80174f8:	4611      	mov	r1, r2
 80174fa:	2200      	movs	r2, #0
 80174fc:	602a      	str	r2, [r5, #0]
 80174fe:	461a      	mov	r2, r3
 8017500:	f7eb ff16 	bl	8003330 <_read>
 8017504:	1c43      	adds	r3, r0, #1
 8017506:	d102      	bne.n	801750e <_read_r+0x1e>
 8017508:	682b      	ldr	r3, [r5, #0]
 801750a:	b103      	cbz	r3, 801750e <_read_r+0x1e>
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	bd38      	pop	{r3, r4, r5, pc}
 8017510:	24003630 	.word	0x24003630

08017514 <_raise_r>:
 8017514:	291f      	cmp	r1, #31
 8017516:	b538      	push	{r3, r4, r5, lr}
 8017518:	4604      	mov	r4, r0
 801751a:	460d      	mov	r5, r1
 801751c:	d904      	bls.n	8017528 <_raise_r+0x14>
 801751e:	2316      	movs	r3, #22
 8017520:	6003      	str	r3, [r0, #0]
 8017522:	f04f 30ff 	mov.w	r0, #4294967295
 8017526:	bd38      	pop	{r3, r4, r5, pc}
 8017528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801752a:	b112      	cbz	r2, 8017532 <_raise_r+0x1e>
 801752c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017530:	b94b      	cbnz	r3, 8017546 <_raise_r+0x32>
 8017532:	4620      	mov	r0, r4
 8017534:	f000 f830 	bl	8017598 <_getpid_r>
 8017538:	462a      	mov	r2, r5
 801753a:	4601      	mov	r1, r0
 801753c:	4620      	mov	r0, r4
 801753e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017542:	f000 b817 	b.w	8017574 <_kill_r>
 8017546:	2b01      	cmp	r3, #1
 8017548:	d00a      	beq.n	8017560 <_raise_r+0x4c>
 801754a:	1c59      	adds	r1, r3, #1
 801754c:	d103      	bne.n	8017556 <_raise_r+0x42>
 801754e:	2316      	movs	r3, #22
 8017550:	6003      	str	r3, [r0, #0]
 8017552:	2001      	movs	r0, #1
 8017554:	e7e7      	b.n	8017526 <_raise_r+0x12>
 8017556:	2400      	movs	r4, #0
 8017558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801755c:	4628      	mov	r0, r5
 801755e:	4798      	blx	r3
 8017560:	2000      	movs	r0, #0
 8017562:	e7e0      	b.n	8017526 <_raise_r+0x12>

08017564 <raise>:
 8017564:	4b02      	ldr	r3, [pc, #8]	; (8017570 <raise+0xc>)
 8017566:	4601      	mov	r1, r0
 8017568:	6818      	ldr	r0, [r3, #0]
 801756a:	f7ff bfd3 	b.w	8017514 <_raise_r>
 801756e:	bf00      	nop
 8017570:	24000038 	.word	0x24000038

08017574 <_kill_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d07      	ldr	r5, [pc, #28]	; (8017594 <_kill_r+0x20>)
 8017578:	2300      	movs	r3, #0
 801757a:	4604      	mov	r4, r0
 801757c:	4608      	mov	r0, r1
 801757e:	4611      	mov	r1, r2
 8017580:	602b      	str	r3, [r5, #0]
 8017582:	f7eb feb9 	bl	80032f8 <_kill>
 8017586:	1c43      	adds	r3, r0, #1
 8017588:	d102      	bne.n	8017590 <_kill_r+0x1c>
 801758a:	682b      	ldr	r3, [r5, #0]
 801758c:	b103      	cbz	r3, 8017590 <_kill_r+0x1c>
 801758e:	6023      	str	r3, [r4, #0]
 8017590:	bd38      	pop	{r3, r4, r5, pc}
 8017592:	bf00      	nop
 8017594:	24003630 	.word	0x24003630

08017598 <_getpid_r>:
 8017598:	f7eb bea6 	b.w	80032e8 <_getpid>

0801759c <_fstat_r>:
 801759c:	b538      	push	{r3, r4, r5, lr}
 801759e:	4d07      	ldr	r5, [pc, #28]	; (80175bc <_fstat_r+0x20>)
 80175a0:	2300      	movs	r3, #0
 80175a2:	4604      	mov	r4, r0
 80175a4:	4608      	mov	r0, r1
 80175a6:	4611      	mov	r1, r2
 80175a8:	602b      	str	r3, [r5, #0]
 80175aa:	f7eb ff06 	bl	80033ba <_fstat>
 80175ae:	1c43      	adds	r3, r0, #1
 80175b0:	d102      	bne.n	80175b8 <_fstat_r+0x1c>
 80175b2:	682b      	ldr	r3, [r5, #0]
 80175b4:	b103      	cbz	r3, 80175b8 <_fstat_r+0x1c>
 80175b6:	6023      	str	r3, [r4, #0]
 80175b8:	bd38      	pop	{r3, r4, r5, pc}
 80175ba:	bf00      	nop
 80175bc:	24003630 	.word	0x24003630

080175c0 <_isatty_r>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	4d06      	ldr	r5, [pc, #24]	; (80175dc <_isatty_r+0x1c>)
 80175c4:	2300      	movs	r3, #0
 80175c6:	4604      	mov	r4, r0
 80175c8:	4608      	mov	r0, r1
 80175ca:	602b      	str	r3, [r5, #0]
 80175cc:	f7eb ff05 	bl	80033da <_isatty>
 80175d0:	1c43      	adds	r3, r0, #1
 80175d2:	d102      	bne.n	80175da <_isatty_r+0x1a>
 80175d4:	682b      	ldr	r3, [r5, #0]
 80175d6:	b103      	cbz	r3, 80175da <_isatty_r+0x1a>
 80175d8:	6023      	str	r3, [r4, #0]
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	24003630 	.word	0x24003630

080175e0 <_init>:
 80175e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e2:	bf00      	nop
 80175e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175e6:	bc08      	pop	{r3}
 80175e8:	469e      	mov	lr, r3
 80175ea:	4770      	bx	lr

080175ec <_fini>:
 80175ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ee:	bf00      	nop
 80175f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175f2:	bc08      	pop	{r3}
 80175f4:	469e      	mov	lr, r3
 80175f6:	4770      	bx	lr
